from PySide2 import QtCore
from PySide2 import QtGui
from PySide2 import QtWidgets

import maya.OpenMayaUI as omui1
import maya.cmds as cmds
import maya.api.OpenMaya as om2
import maya.api.OpenMayaUI as omui2
import maya.OpenMaya as om1
import maya.OpenMayaAnim as omanim1
import math

from shiboken2 import wrapInstance


def maya_main_window():

    """
    Return the Maya main window widget as a Python object
    """
    main_window_ptr = omui1.MQtUtil.mainWindow()
    return wrapInstance(long(main_window_ptr), QtWidgets.QWidget)

class MyLineEdit(QtWidgets.QLineEdit):

    enter_pressed = QtCore.Signal(str)
    delete_pressed = QtCore.Signal(str)

    def keyPressEvent(self, type):
        super(MyLineEdit, self).keyPressEvent(type)

        if type.key() == QtCore.Qt.Key_Enter:
            self.enter_pressed.emit("")
        elif type.key() == QtCore.Qt.Key_Return:
            self.enter_pressed.emit("")
        elif type.key() == QtCore.Qt.Key_Delete:
            self.delete_pressed.emit("")

class MainWindow(QtWidgets.QDialog):

    WINDOW_TITLE = "PreViz-AutoRigger v1.0.0"

    FILE_FILTERS_IMPORTANIM = "FBX Import (*.fbx);;animImport (*.anim);;All Files(*.*)"
    SELECTED_FILTER_IMPORTANIM = "FBX Import (*.fbx)"

    FILE_FILTERS_EXPORTANIM = "FBX Export (*.fbx);;animExport (*.anim);;All Files(*.*)"
    SELECTED_FILTER_EXPORTANIM = "FBX Export (*.fbx)"

    FILE_FILTERS_EXPORTJOINTRIG = "FBX Export (*.fbx);;All Files(*.*)"
    SELECTED_FILTER_EXPORTJOINTRIG = "FBX Export (*.fbx)"

    def __init__(self, parent=maya_main_window()):
        super(MainWindow, self).__init__(parent)

        self.setWindowTitle(self.WINDOW_TITLE)
        self.setMaximumWidth(300)
        self.setMaximumHeight(300)

        self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)

        self.createWidgets()
        self.createLayout()
        self.createUIConnection()

        self.MDG1_mod = om1.MDGModifier()
        self.IK_System = omanim1.MIkSystem()
        self.IK_Effector = omanim1.MFnIkEffector()
        self.IK_Handle = omanim1.MFnIkHandle()
        self.MDag_path = om1.MDagPath()
        self.MNurbs1_cv = om1.MFnNurbsCurve()
        self.IKSolver1_lst = om1.MSelectionList()
        self.BlendShape = omanim1.MFnBlendShapeDeformer()

        self.MDG2_mod = om2.MDGModifier()
        self.MDag2_node = om2.MFnDagNode()
        self.MNurbs2_cv = om2.MFnNurbsCurve()
        self.MTrans2 = om2.MFnTransform()

    def createWidgets(self):
        self.createLocatorBut = QtWidgets.QPushButton('Create Locator')
        self.createLocatorBut.setIcon(QtGui.QIcon(":locator.png"))
        self.createLocatorBut.setToolTip("Creates biped locator heirarchy")

        self.deleteLocatorBut = QtWidgets.QPushButton('Delete Locator')
        self.deleteLocatorBut.setIcon(QtGui.QIcon(":deleteActive.png"))
        self.deleteLocatorBut.setToolTip("Deletes biped locator heirarchy")
        
        self.mirrorLocatorBut = QtWidgets.QPushButton('Mirror Locator (X)-->(-X)')
        self.mirrorLocatorBut.setIcon(QtGui.QIcon(":QR_mirrorGuidesRightToLeft.png"))
        self.mirrorLocatorBut.setToolTip("Mirrors locator heirarchy for +X to -X")

        self.createJointBut = QtWidgets.QPushButton('Create Joints')
        self.createJointBut.setIcon(QtGui.QIcon(":out_joint.png"))
        self.createJointBut.setToolTip("Creates biped joint-chain")

        # self.insertJointBut = QtWidgets.QPushButton('Insert Joint')
        self.deleteJointBut = QtWidgets.QPushButton('Delete Joints')
        self.deleteJointBut.setIcon(QtGui.QIcon(":deleteActive.png"))
        self.deleteJointBut.setToolTip("Deletes biped joint-chain")
        
        self.boundingBoxBut = QtWidgets.QPushButton('Create Override Bounding Box')
        self.boundingBoxBut.setIcon(QtGui.QIcon(":out_lattice.png"))
        self.boundingBoxBut.setToolTip("Bounding box helps to fix size of rig controller")

        self.rigCharBut = QtWidgets.QPushButton('Rig Character')
        self.rigCharBut.setIcon(QtGui.QIcon(":HIKCharacterToolStancePose.png"))
        self.rigCharBut.setToolTip("Create rig")

        self.delRigBut = QtWidgets.QPushButton('Delete Rig')
        self.delRigBut.setIcon(QtGui.QIcon(":QR_delete.png"))
        self.delRigBut.setToolTip("Delete whole rig system")

        self.detachRigBut = QtWidgets.QPushButton('Detach Rig')
        self.detachRigBut.setIcon(QtGui.QIcon(":detach.png"))
        self.detachRigBut.setToolTip("Click any controller/s to break it from main rig")

        self.createSpineText = MyLineEdit()
        self.countFingers = MyLineEdit()

        self.facialLocCheckBox = QtWidgets.QCheckBox()

        self.editModeCheckBox = QtWidgets.QCheckBox()

        self.typeofRigComboBox = QtWidgets.QComboBox()
        self.typeofRigComboBox.addItems(["Biped Character Rig", "Quadruple Character Rig*", "Custom Character Rig*"])
        self.typeofRigComboBox.setItemIcon(0, QtGui.QIcon(":HIKcreateControlRig.png"))

        self.typeofLHandIK = QtWidgets.QComboBox()
        self.typeofLHandIK.addItems(["None", "Rotate Plane IK"])
        self.typeofLHandIK.setItemIcon(1, QtGui.QIcon(":out_ikRPsolver.png"))

        self.typeofRHandIK = QtWidgets.QComboBox()
        self.typeofRHandIK.addItems(["None", "Rotate Plane IK"])
        self.typeofRHandIK.setItemIcon(1, QtGui.QIcon(":out_ikRPsolver.png"))

        self.typeofLLegIK = QtWidgets.QComboBox()
        self.typeofLLegIK.addItems(["None", "Rotate Plane IK"])
        self.typeofLLegIK.setItemIcon(1, QtGui.QIcon(":out_ikRPsolver.png"))

        self.typeofRLegIK = QtWidgets.QComboBox()
        self.typeofRLegIK.addItems(["None", "Rotate Plane IK"])
        self.typeofRLegIK.setItemIcon(1, QtGui.QIcon(":out_ikRPsolver.png")) 

        self.autostretch = QtWidgets.QComboBox()
        self.autostretch.addItems(["No", "Yes"])

        self.hipjnt = QtWidgets.QComboBox()
        self.hipjnt.addItems(["No", "Yes"])
        
        self.importAnimBut = QtWidgets.QLineEdit()

        self.browseAnimBut = QtWidgets.QPushButton()
        self.browseAnimBut.setIcon(QtGui.QIcon(":fileOpen.png"))
        self.browseAnimBut.setToolTip("Browse the animation file (.fbx/.anim)")

        self.importAnimBut = QtWidgets.QPushButton("import")
        self.importAnimBut.setIcon(QtGui.QIcon(":RS_accept_import.png"))
        self.importAnimBut.setToolTip("Browse the animation file (.fbx/.anim)")

        self.exportanimationpath = QtWidgets.QLineEdit()

        self.browseExportAnimBut = QtWidgets.QPushButton()
        self.browseExportAnimBut.setIcon(QtGui.QIcon(":fileOpen.png"))
        self.browseExportAnimBut.setToolTip("Browse for path")

        self.exportanim = QtWidgets.QPushButton('Export')
        self.exportanim.setIcon(QtGui.QIcon(":game_exporter.png"))
        self.exportanim.setToolTip("Exports joint rig file (.fbx) ")

        self.exportjointrigpath = QtWidgets.QLineEdit()

        self.browsejointrig = QtWidgets.QPushButton()
        self.browsejointrig.setIcon(QtGui.QIcon(":fileOpen.png"))
        self.browsejointrig.setToolTip("Browse for path")

        self.exportJointRigBUT = QtWidgets.QPushButton('Export')
        self.exportJointRigBUT.setIcon(QtGui.QIcon(":game_exporter.png"))
        self.exportJointRigBUT.setToolTip("Exports joint rig for game engine")
        
    def createLayout(self):
        form_layout_1 = QtWidgets.QFormLayout()
        form_layout_1.addRow("Enter No. Of Spine:", self.createSpineText)
        form_layout_1.addRow("Enter No. Of Finger:", self.countFingers)

        form_layout_2 = QtWidgets.QFormLayout()
        form_layout_2.addRow("Add Facial Locator:", self.facialLocCheckBox)

        form_layout_3 = QtWidgets.QFormLayout()
        form_layout_3.addRow("Edit Mode:", self.editModeCheckBox)

        form_layout_4 = QtWidgets.QFormLayout()
        form_layout_4.addRow("Rig Type", self.typeofRigComboBox)

        form_layout_5 = QtWidgets.QFormLayout()
        form_layout_5.addRow("Left Hand", self.typeofLHandIK)
        form_layout_5.addRow("Right Hand", self.typeofRHandIK)

        form_layout_6 = QtWidgets.QFormLayout()
        form_layout_6.addRow("Left Leg", self.typeofLLegIK)
        form_layout_6.addRow("Right Leg", self.typeofRLegIK)

        form_layout_7 = QtWidgets.QFormLayout()
        form_layout_7.addRow("Include Auto-Stretchy", self.autostretch)

        form_layout_8 = QtWidgets.QFormLayout()
        form_layout_8.addRow("Include Hip-Controller", self.hipjnt)

        form_layout_9 = QtWidgets.QFormLayout()
        form_layout_9.addRow("Animation file:", self.importAnimBut)

        form_layout_10 = QtWidgets.QFormLayout()
        form_layout_10.addRow("Animation file:", self.exportanimationpath)

        form_layout_11 = QtWidgets.QFormLayout()
        form_layout_11.addRow("          Joint rig:", self.exportjointrigpath)

        menu_horizonLayout = QtWidgets.QHBoxLayout()
        menu_horizonLayout.addLayout(form_layout_4)
        menu_horizonLayout.addLayout(form_layout_2)
        menu_horizonLayout.addLayout(form_layout_3)

        loc_horizonLayout = QtWidgets.QHBoxLayout()
        loc_horizonLayout.addWidget(self.createLocatorBut)
        loc_horizonLayout.addWidget(self.deleteLocatorBut)
        loc_horizonLayout.addWidget(self.mirrorLocatorBut)

        jnt_HorizonLayout = QtWidgets.QHBoxLayout()
        jnt_HorizonLayout.addWidget(self.createJointBut)
        # jnt_HorizonLayout.addWidget(self.insertJointBut)
        jnt_HorizonLayout.addWidget(self.deleteJointBut)

        ik_HorizonLayout = QtWidgets.QHBoxLayout()
        ik_HorizonLayout.addLayout(form_layout_5)
        ik_HorizonLayout.addLayout(form_layout_6)

        opt_HorizonLayout = QtWidgets.QHBoxLayout()
        opt_HorizonLayout.addLayout(form_layout_7)
        opt_HorizonLayout.addLayout(form_layout_8)

        rig_HorizonLayout1 = QtWidgets.QHBoxLayout()
        rig_HorizonLayout1.addWidget(self.rigCharBut)

        rig_HorizonLayout2 = QtWidgets.QHBoxLayout()
        rig_HorizonLayout2.addWidget(self.detachRigBut)
        rig_HorizonLayout2.addWidget(self.delRigBut)

        rig_HorizonLayout3 = QtWidgets.QHBoxLayout()
        rig_HorizonLayout3.addLayout(form_layout_9)
        rig_HorizonLayout3.addWidget(self.browseAnimBut)
        rig_HorizonLayout3.addWidget(self.importAnimBut)

        rig_HorizonLayout4 = QtWidgets.QHBoxLayout()
        rig_HorizonLayout4.addLayout(form_layout_10)
        rig_HorizonLayout4.addWidget(self.browseExportAnimBut)
        rig_HorizonLayout4.addWidget(self.exportanim)

        rig_HorizonLayout5 = QtWidgets.QHBoxLayout()
        rig_HorizonLayout5.addLayout(form_layout_11)
        rig_HorizonLayout5.addWidget(self.browsejointrig)
        rig_HorizonLayout5.addWidget(self.exportJointRigBUT)

        #horizonLayout.addWidget(self.mirrorCheckBox)

        #horizonLayout.addWidget(self.editModeCheckBox)
        #subLayoutH.addStretch()

        mainLayoutV = QtWidgets.QVBoxLayout(self)
        mainLayoutV.addLayout(menu_horizonLayout)
        mainLayoutV.addLayout(loc_horizonLayout)
        mainLayoutV.addLayout(form_layout_1)
        mainLayoutV.addLayout(jnt_HorizonLayout)
        mainLayoutV.addLayout(ik_HorizonLayout)
        mainLayoutV.addWidget(self.boundingBoxBut)
        mainLayoutV.addLayout(opt_HorizonLayout)
        mainLayoutV.addLayout(rig_HorizonLayout1)
        mainLayoutV.addLayout(rig_HorizonLayout2)
        mainLayoutV.addLayout(rig_HorizonLayout3)
        mainLayoutV.addLayout(rig_HorizonLayout4)
        mainLayoutV.addLayout(rig_HorizonLayout5)

    def createUIConnection(self):
        self.createSpineText.enter_pressed.connect(self.createLocator)
        self.countFingers.enter_pressed.connect(self.createLocator)
        self.createSpineText.delete_pressed.connect(self.deleteLocator)
        self.countFingers.delete_pressed.connect(self.deleteLocator)
        self.createLocatorBut.clicked.connect(self.createLocator)
        self.deleteLocatorBut.clicked.connect(self.deleteLocator)
        self.mirrorLocatorBut.clicked.connect(self.mirrorLocator)
        self.createJointBut.clicked.connect(self.createJoints)
        # self.insertJointBut.clicked.connect(self.insertJoint)
        self.deleteJointBut.clicked.connect(self.deleteJoints)
        # self.facialLocCheckBox.toggled.connect(self.facialLocator)
        self.editModeCheckBox.toggled.connect(self.editMode)
        self.typeofLHandIK.activated.connect(self.createLHandIK)
        self.typeofRHandIK.activated.connect(self.createRHandIK)
        self.typeofLLegIK.activated.connect(self.createLlegIk)
        self.typeofRLegIK.activated.connect(self.createRlegIk)
        self.boundingBoxBut.clicked.connect(self.createBoundingBox)
        self.rigCharBut.clicked.connect(self.rigChar)
        self.delRigBut.clicked.connect(self.deleteRig)
        self.detachRigBut.clicked.connect(self.detachRig)
        self.browseAnimBut.clicked.connect(self.browseAnimDailog)
        self.browseExportAnimBut.clicked.connect(self.exportanimDailog)
        self.importAnimBut.clicked.connect(self.importAnim)
        self.exportJointRigBUT.clicked.connect(self.exportJointRig)

    def browseAnimDailog(self):
        file_path, self.SELECTED_FILTER_IMPORTANIM = QtWidgets.QFileDialog.getOpenFileName(self, "Select File", "", self.FILE_FILTERS_IMPORTANIM, self.SELECTED_FILTER_IMPORTANIM)

        if file_path:
            self.importAnimBut.setText(file_path)

    def exportanimDailog(self):
        file_path, self.SELECTED_FILTER_EXPORTANIM = QtWidgets.QFileDialog.getOpenFileName(self, "Select File", "", self.FILE_FILTERS_EXPORTANIM, self.SELECTED_FILTER_EXPORTANIM)

        if file_path:
            self.browseExportAnimBut.setText(file_path)

    def exportJointRigDailog(self):
        file_path, self.SELECTED_FILTER_EXPORTJOINTRIG = QtWidgets.QFileDialog.getOpenFileName(self, "Select File", "", self.FILE_FILTERS_EXPORTJOINTRIG, self.SELECTED_FILTER_EXPORTJOINTRIG)

        if file_path:
            self.browsejointrig.setText(file_path)

    def createLocator(self):
        if cmds.objExists("loc_grp"):
            print("Yo! locator Group already exist. Please delete to re-create new locator hierarchy.(Warning: All locator will be in reset position)")
        elif len(self.createSpineText.text()) != 0 and len(self.countFingers.text()) <= 5 and len(self.countFingers.text()) != 0:
            loc_grp = om2.MFnDagNode()
            loc_obj = loc_grp.create("transform", "loc_grp")
            self.loc_root_tn = loc_grp.create("transform", "loc_root", loc_obj)
            loc_root_mn = loc_grp.create("locator", "locatorShape1", self.loc_root_tn)

            self.loc_transform = om2.MFnTransform(self.loc_root_tn)

            loc_plug_ty = self.loc_transform.findPlug("translateY", False)
            loc_plug_ty.setInt(1)

            self.createSpine()
        else:
            print("Please enter no. of Spine and Finger locator required")

    def createSpine(self):
        spineloc_grp = om2.MFnDagNode()

        for i in range(0, int(self.createSpineText.text())):
            if i == 0:
                self.spine_tn = spineloc_grp.create("transform", "loc_spine_"+str(i), self.loc_root_tn)
                spine_ln = spineloc_grp.create("locator", "locatorShape1", self.spine_tn)
            else:
                self.spine_tn = spineloc_grp.create("transform", "loc_spine_"+str(i), self.spine_tn)
                spine_ln = spineloc_grp.create("locator", "locatorShape1", self.spine_tn)

            self.spineloc_transform = om2.MFnTransform(self.spine_tn)
            spineloc_plug_ty = self.spineloc_transform.findPlug("translateY", False)
            spineloc_plug_ty.setDouble(2.25)

            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_spine_{}.scaleX"'.format(str(i)))
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_spine_{}.scaleY"'.format(str(i)))
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_spine_{}.scaleZ"'.format(str(i)))
            self.MDG2_mod.doIt()

        self.createShoulder(1)
        self.createShoulder(-1)
        self.createArms(1)
        self.createArms(-1)
        self.createHead()
        self.createLegs(1)
        self.createLegs(-1)

        if self.facialLocCheckBox.isChecked():
            self.facialLocator()

        transform = ["translate", "rotate", "scale"]
        axis = ["X", "Y", "Z"]
        nodes = cmds.ls("loc_*", transforms=True)

        for t in transform:
            for ax in axis:
                for n in nodes:
                    cmds.setAttr(n+'.'+t+ax, lock=True)

    def createHead(self):
        headloc_grp = om2.MFnDagNode()

        neckloc_tn = headloc_grp.create("transform", "loc_neck", self.spine_tn)
        neckloc_ln = headloc_grp.create("locator", "locatorShape1", neckloc_tn)

        self.neckloc_transform_t = om2.MFnTransform(neckloc_tn)

        neckloc_plug_ty = self.neckloc_transform_t.findPlug("translateY", False)
        neckloc_plug_ty.setDouble((((int(self.createSpineText.text())-1)*0.5)+1.25))

        self.headlowloc_tn = headloc_grp.create("transform", "loc_headlower", neckloc_tn)
        headlowloc_ln = headloc_grp.create("locator", "locatorShape1", self.headlowloc_tn)

        self.headlowloc_transform_t = om2.MFnTransform(self.headlowloc_tn)

        headlowloc_plug_ty = self.headlowloc_transform_t.findPlug("translateY", False)
        headlowloc_plug_ty.setDouble((((int(self.createSpineText.text())-1)*0.5)+0.75))

        headendloc_tn = headloc_grp.create("transform", "loc_headend", self.headlowloc_tn)
        headendloc_ln = headloc_grp.create("locator", "locatorShape1", headendloc_tn)

        self.headendloc_transform_t = om2.MFnTransform(headendloc_tn)
        headendloc_plug_ty = self.headendloc_transform_t.findPlug("translateY", False)
        headendloc_plug_ty.setDouble((((int(self.createSpineText.text())-1)*0.5)+3))

        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headlower.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_headend.scaleZ"')
        self.MDG2_mod.doIt()

    def facialLocator(self):

        eyeloc_tn = self.MDag2_node.create("transform", "loc_facialeye", self.headlowloc_tn)
        eyeloc_ln = self.MDag2_node.create("locator", "locatorShape1", eyeloc_tn)

        eyeloc_transform = om2.MFnTransform(eyeloc_tn)

        eyeloc_plug_t = eyeloc_transform.translation(om2.MSpace.kTransform)
        eyeloc_plug_t[1], eyeloc_plug_t[2] = (((int(self.createSpineText.text())-1)*0.5)+3), 10.0
        eyeloc_transform.setTranslation(eyeloc_plug_t, om2.MSpace.kTransform)

        eyelidloc_tn = self.MDag2_node.create("transform", "loc_facialeyeblink", eyeloc_tn)
        eyelidloc_ln = self.MDag2_node.create("locator", "locatorShape1", eyelidloc_tn)

        leyeballloc_tn = self.MDag2_node.create("transform", "loc_L_facialeyeball", self.headlowloc_tn)
        leyeballloc_ln = self.MDag2_node.create("locator", "locatorShape1", leyeballloc_tn)

        leyeballloc_transform = om2.MFnTransform(leyeballloc_tn)

        leyeballloc_plug_t = leyeballloc_transform.translation(om2.MSpace.kTransform)
        leyeballloc_plug_t[0], leyeballloc_plug_t[1], leyeballloc_plug_t[2] = 1.0, (((int(self.createSpineText.text()) - 1) * 0.5) + 3), 1.0
        leyeballloc_transform.setTranslation(leyeballloc_plug_t, om2.MSpace.kTransform)

        leyeloc_tn = self.MDag2_node.create("transform", "loc_L_facialeye", eyeloc_tn)
        leyeloc_ln = self.MDag2_node.create("locator", "locatorShape1", leyeloc_tn)

        leyeloc_transform = om2.MFnTransform(leyeloc_tn)

        leyeloc_plug_t = leyeloc_transform.translation(om2.MSpace.kTransform)
        leyeloc_plug_t[0] = 0.50
        leyeloc_transform.setTranslation(leyeloc_plug_t, om2.MSpace.kTransform)

        leyeblinkloc_tn = self.MDag2_node.create("transform", "loc_L_facialeyeblink", leyeloc_tn)
        leyeblinkloc_ln = self.MDag2_node.create("locator", "locatorShape1", leyeblinkloc_tn)

        reyeballloc_tn = self.MDag2_node.create("transform", "loc_R_facialeyeball", self.headlowloc_tn)
        reyeballloc_ln = self.MDag2_node.create("locator", "locatorShape1", reyeballloc_tn)

        reyeballloc_transform = om2.MFnTransform(reyeballloc_tn)

        reyeballloc_plug_t = reyeballloc_transform.translation(om2.MSpace.kTransform)
        reyeballloc_plug_t[0], reyeballloc_plug_t[1], reyeballloc_plug_t[2] = -1.0, (((int(self.createSpineText.text()) - 1) * 0.5) + 3), 1.0
        reyeballloc_transform.setTranslation(reyeballloc_plug_t, om2.MSpace.kTransform)

        reyeloc_tn = self.MDag2_node.create("transform", "loc_R_facialeye", eyeloc_tn)
        reyeloc_ln = self.MDag2_node.create("locator", "locatorShape1", reyeloc_tn)

        reyeloc_transform = om2.MFnTransform(reyeloc_tn)

        reyeloc_plug_t = reyeloc_transform.translation(om2.MSpace.kTransform)
        reyeloc_plug_t[0] = -0.50
        reyeloc_transform.setTranslation(reyeloc_plug_t, om2.MSpace.kTransform)

        reyeblinkloc_tn = self.MDag2_node.create("transform", "loc_R_facialeyeblink", reyeloc_tn)
        reyeblinkloc_ln = self.MDag2_node.create("locator", "locatorShape1", reyeblinkloc_tn)

        leyebrowloc_tn = self.MDag2_node.create("transform", "loc_L_facialeyebrow", self.headlowloc_tn)
        leyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", leyebrowloc_tn)

        leyebrowloc_transform = om2.MFnTransform(leyebrowloc_tn)

        leyebrowloc_plug_t = leyebrowloc_transform.translation(om2.MSpace.kTransform)
        leyebrowloc_plug_t[0], leyebrowloc_plug_t[1], leyebrowloc_plug_t[2] = 1.5, (((int(self.createSpineText.text())-1)*0.5)+3), 2.0
        leyebrowloc_transform.setTranslation(leyebrowloc_plug_t, om2.MSpace.kTransform)

        lmiddleeyebrowloc_tn = self.MDag2_node.create("transform", "loc_L_facialmiddleeyebrow", leyebrowloc_tn)
        lmiddleeyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", lmiddleeyebrowloc_tn)

        louttereyebrowloc_tn = self.MDag2_node.create("transform", "loc_L_facialoutereyebrow", leyebrowloc_tn)
        louttereyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", louttereyebrowloc_tn)

        louttereyebrowloc_transform = om2.MFnTransform(louttereyebrowloc_tn)

        louttereyebrowloc_plug_t = louttereyebrowloc_transform.translation(om2.MSpace.kTransform)
        louttereyebrowloc_plug_t[0] = 0.5
        louttereyebrowloc_transform.setTranslation(louttereyebrowloc_plug_t, om2.MSpace.kTransform)

        linnereyebrowloc_tn = self.MDag2_node.create("transform", "loc_L_facialinnereyebrow", leyebrowloc_tn)
        linnereyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", linnereyebrowloc_tn)

        linnereyebrowloc_transform = om2.MFnTransform(linnereyebrowloc_tn)

        linnereyebrowloc_plug_t = linnereyebrowloc_transform.translation(om2.MSpace.kTransform)
        linnereyebrowloc_plug_t[0] = -0.5
        linnereyebrowloc_transform.setTranslation(linnereyebrowloc_plug_t, om2.MSpace.kTransform)

        learloc_tn = self.MDag2_node.create("transform", "loc_L_facialear", self.headlowloc_tn)
        learloc_ln = self.MDag2_node.create("locator", "locatorShape1", learloc_tn)

        learloc_transform = om2.MFnTransform(learloc_tn)

        learloc_plug_t = learloc_transform.translation(om2.MSpace.kTransform)
        learloc_plug_t[0], learloc_plug_t[1] = 2.5, (((int(self.createSpineText.text())-1)*0.5)+3)
        learloc_transform.setTranslation(learloc_plug_t, om2.MSpace.kTransform)

        reyebrowloc_tn = self.MDag2_node.create("transform", "loc_R_facialeyebrow", self.headlowloc_tn)
        reyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", reyebrowloc_tn)

        reyebrowloc_transform = om2.MFnTransform(reyebrowloc_tn)

        reyebrowloc_plug_t = reyebrowloc_transform.translation(om2.MSpace.kTransform)
        reyebrowloc_plug_t[0], reyebrowloc_plug_t[1], reyebrowloc_plug_t[2] = -1.5, (((int(self.createSpineText.text())-1)*0.5)+3), 2.0
        reyebrowloc_transform.setTranslation(reyebrowloc_plug_t, om2.MSpace.kTransform)

        reyebrowloc_plug_r = reyebrowloc_transform.rotation(om2.MSpace.kTransform)
        reyebrowloc_plug_r[1] = -3.1415
        reyebrowloc_transform.setRotation(reyebrowloc_plug_r, om2.MSpace.kTransform)

        rmiddleeyebrowloc_tn = self.MDag2_node.create("transform", "loc_R_facialmiddleeyebrow", reyebrowloc_tn)
        rmiddleeyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", rmiddleeyebrowloc_tn)

        routtereyebrowloc_tn = self.MDag2_node.create("transform", "loc_R_facialoutereyebrow", reyebrowloc_tn)
        routtereyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", routtereyebrowloc_tn)

        routtereyebrowloc_transform = om2.MFnTransform(routtereyebrowloc_tn)

        routtereyebrowloc_plug_t = routtereyebrowloc_transform.translation(om2.MSpace.kTransform)
        routtereyebrowloc_plug_t[0] = 0.5
        routtereyebrowloc_transform.setTranslation(routtereyebrowloc_plug_t, om2.MSpace.kTransform)

        rinnereyebrowloc_tn = self.MDag2_node.create("transform", "loc_R_facialinnereyebrow", reyebrowloc_tn)
        rinnereyebrowloc_ln = self.MDag2_node.create("locator", "locatorShape1", rinnereyebrowloc_tn)

        rinnereyebrowloc_transform = om2.MFnTransform(rinnereyebrowloc_tn)

        rinnereyebrowloc_plug_t = rinnereyebrowloc_transform.translation(om2.MSpace.kTransform)
        rinnereyebrowloc_plug_t[0] = -0.5
        rinnereyebrowloc_transform.setTranslation(rinnereyebrowloc_plug_t, om2.MSpace.kTransform)

        rearloc_tn = self.MDag2_node.create("transform", "loc_R_facialear", self.headlowloc_tn)
        rearloc_ln = self.MDag2_node.create("locator", "locatorShape1", rearloc_tn)

        rearloc_transform = om2.MFnTransform(rearloc_tn)

        rearloc_plug_t = rearloc_transform.translation(om2.MSpace.kTransform)
        rearloc_plug_t[0], rearloc_plug_t[1] = -2.5, (((int(self.createSpineText.text())-1)*0.5)+3)
        rearloc_transform.setTranslation(rearloc_plug_t, om2.MSpace.kTransform)

        leyesquintloc_tn = self.MDag2_node.create("transform", "loc_L_facialeyesquint", self.headlowloc_tn)
        leyesquintloc_ln = self.MDag2_node.create("locator", "locatorShape1", leyesquintloc_tn)

        leyesquintloc_transform = om2.MFnTransform(leyesquintloc_tn)

        leyesquintloc_plug_t = leyesquintloc_transform.translation(om2.MSpace.kTransform)
        leyesquintloc_plug_t[0], leyesquintloc_plug_t[1], leyesquintloc_plug_t[2] = 2.0, (((int(self.createSpineText.text())-1)*0.5)+3)/1.5, 2.0
        leyesquintloc_transform.setTranslation(leyesquintloc_plug_t, om2.MSpace.kTransform)

        leyesquintloc_plug_r = leyesquintloc_transform.rotation(om2.MSpace.kTransform)
        leyesquintloc_plug_r[1] = 0.7853
        leyesquintloc_transform.setRotation(leyesquintloc_plug_r, om2.MSpace.kTransform)

        reyesquintloc_tn = self.MDag2_node.create("transform", "loc_R_facialeyesquint", self.headlowloc_tn)
        reyesquintloc_ln = self.MDag2_node.create("locator", "locatorShape1", reyesquintloc_tn)

        reyesquintloc_transform = om2.MFnTransform(reyesquintloc_tn)

        reyesquintloc_plug_t = reyesquintloc_transform.translation(om2.MSpace.kTransform)
        reyesquintloc_plug_t[0], reyesquintloc_plug_t[1], reyesquintloc_plug_t[2] = -2.0, (((int(self.createSpineText.text())-1)*0.5)+3)/1.5, 2.0
        reyesquintloc_transform.setTranslation(reyesquintloc_plug_t, om2.MSpace.kTransform)

        reyesquintloc_plug_r = reyesquintloc_transform.rotation(om2.MSpace.kTransform)
        reyesquintloc_plug_r[1] = -3.9268
        reyesquintloc_transform.setRotation(reyesquintloc_plug_r, om2.MSpace.kTransform)

        nosescrunchloc_tn = self.MDag2_node.create("transform", "loc_facialnosescrunch", self.headlowloc_tn)
        nosescrunchloc_ln = self.MDag2_node.create("locator", "locatorShape1", nosescrunchloc_tn)

        nosescrunchloc_transform = om2.MFnTransform(nosescrunchloc_tn)

        nosescrunchloc_plug_t = nosescrunchloc_transform.translation(om2.MSpace.kTransform)
        nosescrunchloc_plug_t[1], nosescrunchloc_plug_t[2] = (((int(self.createSpineText.text())-1)*0.5)+3)/2, 2.5
        nosescrunchloc_transform.setTranslation(nosescrunchloc_plug_t, om2.MSpace.kTransform)

        mnosescrunchloc_tn = self.MDag2_node.create("transform", "loc_M_facialnosescrunch", nosescrunchloc_tn)
        mnosescrunchloc_ln = self.MDag2_node.create("locator", "locatorShape1", mnosescrunchloc_tn)

        lnosescrunchloc_tn = self.MDag2_node.create("transform", "loc_L_facialnosescrunch", nosescrunchloc_tn)
        lnosescrunchloc_ln = self.MDag2_node.create("locator", "locatorShape1", lnosescrunchloc_tn)

        lnosescrunchloc_transform = om2.MFnTransform(lnosescrunchloc_tn)

        lnosescrunchloc_plug_t = lnosescrunchloc_transform.translation(om2.MSpace.kTransform)
        lnosescrunchloc_plug_t[0], lnosescrunchloc_plug_t[2] = 0.5, -0.25
        lnosescrunchloc_transform.setTranslation(lnosescrunchloc_plug_t, om2.MSpace.kTransform)

        rnosescrunchloc_tn = self.MDag2_node.create("transform", "loc_R_facialnosescrunch", nosescrunchloc_tn)
        rnosescrunchloc_ln = self.MDag2_node.create("locator", "locatorShape1", rnosescrunchloc_tn)

        rnosescrunchloc_transform = om2.MFnTransform(rnosescrunchloc_tn)

        rnosescrunchloc_plug_t = rnosescrunchloc_transform.translation(om2.MSpace.kTransform)
        rnosescrunchloc_plug_t[0], rnosescrunchloc_plug_t[2] = -0.5, -0.25
        rnosescrunchloc_transform.setTranslation(rnosescrunchloc_plug_t, om2.MSpace.kTransform)

        rnosescrunchloc_plug_r = rnosescrunchloc_transform.rotation(om2.MSpace.kTransform)
        rnosescrunchloc_plug_r[1] = -3.1415
        rnosescrunchloc_transform.setRotation(rnosescrunchloc_plug_r, om2.MSpace.kTransform)

        lcheekloc_tn = self.MDag2_node.create("transform", "loc_L_facialcheek", self.headlowloc_tn)
        lcheekloc_ln = self.MDag2_node.create("locator", "locatorShape1", lcheekloc_tn)

        lcheekloc_transform = om2.MFnTransform(lcheekloc_tn)

        lcheekloc_plug_t = lcheekloc_transform.translation(om2.MSpace.kTransform)
        lcheekloc_plug_t[0],  lcheekloc_plug_t[1],lcheekloc_plug_t[2] = 2.5, (((int(self.createSpineText.text())-1)*0.5)+3)/2, 2.5
        lcheekloc_transform.setTranslation(lcheekloc_plug_t, om2.MSpace.kTransform)

        lcheekloc_plug_r = lcheekloc_transform.rotation(om2.MSpace.kTransform)
        lcheekloc_plug_r[1] = 0.7853
        lcheekloc_transform.setRotation(lcheekloc_plug_r, om2.MSpace.kTransform)

        rcheekloc_tn = self.MDag2_node.create("transform", "loc_R_facialcheek", self.headlowloc_tn)
        rcheelloc_ln = self.MDag2_node.create("locator", "locatorShape1", rcheekloc_tn)

        rcheekloc_transform = om2.MFnTransform(rcheekloc_tn)

        rcheekloc_plug_t = rcheekloc_transform.translation(om2.MSpace.kTransform)
        rcheekloc_plug_t[0], rcheekloc_plug_t[1], rcheekloc_plug_t[2] = -2.5, (((int(self.createSpineText.text())-1)*0.5)+3)/2, 2.5
        rcheekloc_transform.setTranslation(rcheekloc_plug_t, om2.MSpace.kTransform)

        rcheekloc_plug_r = rcheekloc_transform.rotation(om2.MSpace.kTransform)
        rcheekloc_plug_r[1] = -3.9268
        rcheekloc_transform.setRotation(rcheekloc_plug_r, om2.MSpace.kTransform)

        mouthloc_tn = self.MDag2_node.create("transform", "loc_facialmouth", self.headlowloc_tn)
        mouthloc_ln = self.MDag2_node.create("locator", "locatorShape1", mouthloc_tn)

        mouthloc_transform = om2.MFnTransform(mouthloc_tn)

        mouthloc_plug_t = mouthloc_transform.translation(om2.MSpace.kTransform)
        mouthloc_plug_t[2] = 2.5
        mouthloc_transform.setTranslation(mouthloc_plug_t, om2.MSpace.kTransform)

        upperlipcornerloc_tn = self.MDag2_node.create("transform", "loc_facialupperlip", mouthloc_tn)
        upperlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", upperlipcornerloc_tn)

        upperlipcornerloc_transform = om2.MFnTransform(upperlipcornerloc_tn)

        upperlipcornerloc_plug_t = upperlipcornerloc_transform.translation(om2.MSpace.kTransform)
        upperlipcornerloc_plug_t[1] = 0.5
        upperlipcornerloc_transform.setTranslation(upperlipcornerloc_plug_t, om2.MSpace.kTransform)

        lupperlipcornerloc_tn = self.MDag2_node.create("transform", "loc_L_facialupperlip", mouthloc_tn)
        lupperlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", lupperlipcornerloc_tn)

        lupperlipcornerloc_transform = om2.MFnTransform(lupperlipcornerloc_tn)

        lupperlipcornerloc_plug_t = lupperlipcornerloc_transform.translation(om2.MSpace.kTransform)
        lupperlipcornerloc_plug_t[0], lupperlipcornerloc_plug_t[1] = 0.5, 0.5
        lupperlipcornerloc_transform.setTranslation(lupperlipcornerloc_plug_t, om2.MSpace.kTransform)

        llowerlipcornerloc_tn = self.MDag2_node.create("transform", "loc_L_faciallowerlip", mouthloc_tn)
        llowerlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", llowerlipcornerloc_tn)

        llowerlipcornerloc_transform = om2.MFnTransform(llowerlipcornerloc_tn)

        llowerlipcornerloc_plug_t = llowerlipcornerloc_transform.translation(om2.MSpace.kTransform)
        llowerlipcornerloc_plug_t[0], llowerlipcornerloc_plug_t[1] = 0.5, -0.5
        llowerlipcornerloc_transform.setTranslation(llowerlipcornerloc_plug_t, om2.MSpace.kTransform)

        llipcornerloc_tn = self.MDag2_node.create("transform", "loc_L_faciallipcorner", mouthloc_tn)
        llipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", llipcornerloc_tn)

        llipcornerloc_transform = om2.MFnTransform(llipcornerloc_tn)

        llipcornerloc_plug_t = llipcornerloc_transform.translation(om2.MSpace.kTransform)
        llipcornerloc_plug_t[0] = 1
        llipcornerloc_transform.setTranslation(llipcornerloc_plug_t, om2.MSpace.kTransform)

        llipcornerloc_plug_r = llipcornerloc_transform.rotation(om2.MSpace.kTransform)
        llipcornerloc_plug_r[1] = 0.7853
        llipcornerloc_transform.setRotation(llipcornerloc_plug_r, om2.MSpace.kTransform)

        lowerlipcornerloc_tn = self.MDag2_node.create("transform", "loc_faciallowerlip", mouthloc_tn)
        lowerlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", lowerlipcornerloc_tn)

        lowerlipcornerloc_transform = om2.MFnTransform(lowerlipcornerloc_tn)

        lowerlipcornerloc_plug_t = lowerlipcornerloc_transform.translation(om2.MSpace.kTransform)
        lowerlipcornerloc_plug_t[1] = -0.5
        lowerlipcornerloc_transform.setTranslation(lowerlipcornerloc_plug_t, om2.MSpace.kTransform)

        rupperlipcornerloc_tn = self.MDag2_node.create("transform", "loc_R_facialupperlip", mouthloc_tn)
        rupperlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", rupperlipcornerloc_tn)

        rupperlipcornerloc_transform = om2.MFnTransform(rupperlipcornerloc_tn)

        rupperlipcornerloc_plug_t = rupperlipcornerloc_transform.translation(om2.MSpace.kTransform)
        rupperlipcornerloc_plug_t[0], rupperlipcornerloc_plug_t[1] = -0.5, 0.5
        rupperlipcornerloc_transform.setTranslation(rupperlipcornerloc_plug_t, om2.MSpace.kTransform)

        rupperlipcornerloc_plug_r = rupperlipcornerloc_transform.rotation(om2.MSpace.kTransform)
        rupperlipcornerloc_plug_r[1] = 3.1415
        rupperlipcornerloc_transform.setRotation(rupperlipcornerloc_plug_r, om2.MSpace.kTransform)

        rlowerlipcornerloc_tn = self.MDag2_node.create("transform", "loc_R_faciallowerlip", mouthloc_tn)
        rlowerlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", rlowerlipcornerloc_tn)

        rlowerlipcornerloc_transform = om2.MFnTransform(rlowerlipcornerloc_tn)

        rlowerlipcornerloc_plug_t = rlowerlipcornerloc_transform.translation(om2.MSpace.kTransform)
        rlowerlipcornerloc_plug_t[0], rlowerlipcornerloc_plug_t[1] = -0.5, -0.5
        rlowerlipcornerloc_transform.setTranslation(rlowerlipcornerloc_plug_t, om2.MSpace.kTransform)

        rlowerlipcornerloc_plug_r = rlowerlipcornerloc_transform.rotation(om2.MSpace.kTransform)
        rlowerlipcornerloc_plug_r[1] = 3.1415
        rlowerlipcornerloc_transform.setRotation(rlowerlipcornerloc_plug_r, om2.MSpace.kTransform)

        rlipcornerloc_tn = self.MDag2_node.create("transform", "loc_R_faciallipcorner", mouthloc_tn)
        rlipcornerloc_ln = self.MDag2_node.create("locator", "locatorShape1", rlipcornerloc_tn)

        rlipcornerloc_transform = om2.MFnTransform(rlipcornerloc_tn)

        rlipcornerloc_plug_t = rlipcornerloc_transform.translation(om2.MSpace.kTransform)
        rlipcornerloc_plug_t[0] = -1
        rlipcornerloc_transform.setTranslation(rlipcornerloc_plug_t, om2.MSpace.kTransform)

        rlipcornerloc_plug_r = rlipcornerloc_transform.rotation(om2.MSpace.kTransform)
        rlipcornerloc_plug_r[1] = 2.3561
        rlipcornerloc_transform.setRotation(rlipcornerloc_plug_r, om2.MSpace.kTransform)

        jawloc_tn = self.MDag2_node.create("transform", "loc_facialjaw", self.headlowloc_tn)
        jawloc_ln = self.MDag2_node.create("locator", "locatorShape1", jawloc_tn)

        jawloc_transform = om2.MFnTransform(jawloc_tn)

        jawloc_plug_t = upperlipcornerloc_transform.translation(om2.MSpace.kTransform)
        jawloc_plug_t[1], jawloc_plug_t[2] = -1.5, 2.5
        jawloc_transform.setTranslation(jawloc_plug_t, om2.MSpace.kTransform)

        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialeye.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeye.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeye.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialmiddleeyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialmiddleeyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialmiddleeyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialouttereyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialouttereyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialouttereyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialinnereyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialinnereyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialinnereyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialmiddleeyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialmiddleeyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialmiddleeyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialouttereyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialouttereyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialouttereyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialinnereyebrow.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialinnereyebrow.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialinnereyebrow.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialear.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialear.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialear.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialear.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialear.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialear.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyesquint.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyesquint.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialeyesquint.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyesquint.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyesquint.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialeyesquint.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.rotateX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.rotateY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.rotateZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_facialnosescrunch.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_M_facialnosescrunch.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_M_facialnosescrunch.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_M_facialnosescrunch.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialnosescrunch.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialnosescrunch.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_L_facialnosescrunch.scaleZ"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialnosescrunch.scaleX"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialnosescrunch.scaleY"')
        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "loc_R_facialnosescrunch.scaleZ"')
        self.MDG2_mod.doIt()

    def createShoulder(self, side):
        loc_shoulder = ["loc_L_shoulder", "loc_R_shoulder"]
        obj_list = om2.MSelectionList()
        shoulderloc_grp = om2.MFnDagNode()

        if side == 1:
            try:
                obj_list.add(loc_shoulder[0])
            except:
                self.l_shoulder_tn = shoulderloc_grp.create("transform", "loc_L_shoulder", self.spine_tn)
                l_shoulder_ln = shoulderloc_grp.create("locator", "locatorShape1", self.l_shoulder_tn)

                self.lshoulder_transform = om2.MFnTransform(self.l_shoulder_tn)

                lshoulder_plug_t = self.lshoulder_transform.translation(om2.MSpace.kTransform)
                lshoulder_plug_t[0], lshoulder_plug_t[1] = 2.5, ((int(self.createSpineText.text())-1)*0.5)+0.50
                self.lshoulder_transform.setTranslation(lshoulder_plug_t, om2.MSpace.kTransform)


        if side == -1:
            try:
                obj_list.add(loc_shoulder[1])
            except:
                self.r_shoulder_tn = shoulderloc_grp.create("transform", "loc_R_shoulder", self.spine_tn)
                r_shoulder_ln = shoulderloc_grp.create("locator", "locatorShape1", self.r_shoulder_tn)

                self.rshoulder_transform = om2.MFnTransform(self.r_shoulder_tn)

                rshoulder_plug_t = self.rshoulder_transform.translation(om2.MSpace.kTransform)
                rshoulder_plug_t[0], rshoulder_plug_t[1] = -2.5, ((int(self.createSpineText.text())-1)*0.5)+0.50
                self.rshoulder_transform.setTranslation(rshoulder_plug_t, om2.MSpace.kTransform)

    def createArms(self, side):
        loc_arm = ["loc_L_upperarm", "loc_R_upperarm"]
        obj_list = om2.MSelectionList()
        armloc_grp = om2.MFnDagNode()

        if side == 1:
            try:
                obj_list.add(loc_arm[0])
                print("loc_Larm already exist")
            except:
                up_Larm_tn = armloc_grp.create("transform", "loc_L_upperarm", self.l_shoulder_tn)
                up_Larm_ln = armloc_grp.create("locator", "locatorShape1", up_Larm_tn)

                self.larmloc_transform = om2.MFnTransform(up_Larm_tn)
                larmloc_t = self.larmloc_transform.translation(om2.MSpace.kTransform)
                larmloc_t[0], larmloc_t[1] = 4.5, -(((int(self.createSpineText.text())-1)*0.5)+2)
                self.larmloc_transform.setTranslation(larmloc_t, om2.MSpace.kTransform)

                l_elbow_tn = armloc_grp.create("transform", "loc_L_elbow", up_Larm_tn)
                l_elbow_ln = armloc_grp.create("locator", "locatorShape1", l_elbow_tn)

                self.lelbowloc_transform = om2.MFnTransform(l_elbow_tn)
                lelbowloc_t = self.lelbowloc_transform.translation(om2.MSpace.kTransform)
                lelbowloc_t[0], lelbowloc_t[1] = 4.35, -(((int(self.createSpineText.text())-1)*0.5)+5.25)
                self.lelbowloc_transform.setTranslation(lelbowloc_t, om2.MSpace.kTransform)

                self.l_wrist_tn = armloc_grp.create("transform", "loc_L_wrist", l_elbow_tn)
                l_wrist_ln = armloc_grp.create("locator", "locatorShape1", self.l_wrist_tn)

                self.lwristloc_transform = om2.MFnTransform(self.l_wrist_tn)
                lwristloc_t = self.lwristloc_transform.translation(om2.MSpace.kTransform)
                lwristloc_t[0], lwristloc_t[1] = 6.35, -(((int(self.createSpineText.text())-1)*0.5)+6.25)
                self.lwristloc_transform.setTranslation(lwristloc_t, om2.MSpace.kTransform)

                self.createHands(1)

        if side == -1:
            try:
                obj_list.add(loc_arm[1])
                print("loc_Rarm already exist")
            except:
                up_Rarm_tn = armloc_grp.create("transform", "loc_R_upperarm", self.r_shoulder_tn)
                up_Rarm_ln = armloc_grp.create("locator", "locatorShape1", up_Rarm_tn)

                self.rarmloc_transform = om2.MFnTransform(up_Rarm_tn)
                rarmloc_t = self.rarmloc_transform.translation(om2.MSpace.kTransform)
                rarmloc_t[0], rarmloc_t[1] = -4.5, -(((int(self.createSpineText.text())-1)*0.5)+2)
                self.rarmloc_transform.setTranslation(rarmloc_t, om2.MSpace.kTransform)

                r_elbow_tn = armloc_grp.create("transform", "loc_R_elbow", up_Rarm_tn)
                r_elbow_ln = armloc_grp.create("locator", "locatorShape1", r_elbow_tn)

                self.relbowloc_transform = om2.MFnTransform(r_elbow_tn)
                relbowloc_t = self.relbowloc_transform.translation(om2.MSpace.kTransform)
                relbowloc_t[0], relbowloc_t[1] = -4.35, -(((int(self.createSpineText.text())-1)*0.5)+5.25)
                self.relbowloc_transform.setTranslation(relbowloc_t, om2.MSpace.kTransform)

                self.r_wrist_tn = armloc_grp.create("transform", "loc_R_wrist", r_elbow_tn)
                r_wrist_ln = armloc_grp.create("locator", "locatorShape1", self.r_wrist_tn)

                self.rwristloc_transform = om2.MFnTransform(self.r_wrist_tn)
                rwristloc_t = self.rwristloc_transform.translation(om2.MSpace.kTransform)
                rwristloc_t[0], rwristloc_t[1] = -6.35, -(((int(self.createSpineText.text())-1)*0.5)+6.25)
                self.rwristloc_transform.setTranslation(rwristloc_t, om2.MSpace.kTransform)

                self.createHands(-1)

    def createHands(self, side):
        loc_hand = ["loc_L_hand_grp", "loc_R_hand_grp"]
        obj_list = om2.MSelectionList()
        handloc_grp = om2.MFnDagNode()

        if side == 1:
            try:
                obj_list.add(loc_hand[0])
            except:
                self.l_hand_tn = handloc_grp.create("transform", "loc_L_hand_grp", self.l_wrist_tn)

                for i in range(0, int(self.countFingers.text())):
                    self.createFingers(1, i)

        if side == -1:
            try:
                obj_list.add(loc_hand[1])
            except:
                self.r_hand_tn = handloc_grp.create("transform", "loc_R_hand_grp", self.r_wrist_tn)

                for i in range(0, int(self.countFingers.text())):
                    self.createFingers(-1, i)

    def createFingers(self, side, count):
        fingerloc_grp = om2.MFnDagNode()

        for i in range(0,4):
            if side == 1:
                if i == 0:
                    self.loc_lfinger_tn = fingerloc_grp.create("transform", "loc_L_finger_"+str(count)+"_"+str(i), self.l_hand_tn)
                    loc_lfinger_ln = fingerloc_grp.create("locator", "locatorShape1", self.loc_lfinger_tn)

                    l_finger_transform_t = om2.MFnTransform(self.loc_lfinger_tn)

                    lfingerloc_t = l_finger_transform_t.translation(om2.MSpace.kTransform)
                    lfingerloc_t[0], lfingerloc_t[1], lfingerloc_t[2] = 1, -2, count*1
                    l_finger_transform_t.setTranslation(lfingerloc_t, om2.MSpace.kTransform)

                    # l_finger_plug_s = l_finger_transform_t.findPlug("scale", False)

                    # if l_finger_plug_s.isCompound:
                    #     for i in range(l_finger_plug_s.numChildren()):
                    #         child_plug = l_finger_plug_s.child(i)
                    #         attr_value = child_plug.setDouble(0.5)

                else:
                    self.loc_lfinger_tn = fingerloc_grp.create("transform", "loc_L_finger_"+str(count)+"_"+str(i), self.loc_lfinger_tn)
                    loc_lfinger_ln = fingerloc_grp.create("locator", "locatorShape1", self.loc_lfinger_tn)

                    l_finger_transform_t = om2.MFnTransform(self.loc_lfinger_tn)

                    lfingerloc_t = l_finger_transform_t.translation(om2.MSpace.kTransform)
                    lfingerloc_t[0], lfingerloc_t[1] = 1, -1
                    l_finger_transform_t.setTranslation(lfingerloc_t, om2.MSpace.kTransform)

            if side == -1:
                if i == 0:
                    self.loc_rfinger_tn = fingerloc_grp.create("transform", "loc_R_finger_"+str(count)+"_"+str(i), self.r_hand_tn)
                    loc_rfinger_ln = fingerloc_grp.create("locator", "locatorShape1", self.loc_rfinger_tn)

                    r_finger_transform_t = om2.MFnTransform(self.loc_rfinger_tn)

                    r_finger_plug_t = r_finger_transform_t.translation(om2.MSpace.kTransform)
                    r_finger_plug_t[0], r_finger_plug_t[1], r_finger_plug_t[2] = -1, -2, count*1
                    r_finger_transform_t.setTranslation(r_finger_plug_t, om2.MSpace.kTransform)

                    # r_finger_plug_s = r_finger_transform_t.findPlug("scale", False)

                    # if r_finger_plug_s.isCompound:
                    #     for i in range(r_finger_plug_s.numChildren()):
                    #         child_plug = r_finger_plug_s.child(i)
                    #         attr_value = child_plug.setDouble(0.5)

                else:
                    self.loc_rfinger_tn = fingerloc_grp.create("transform", "loc_R_finger_"+str(count)+"_"+str(i), self.loc_rfinger_tn)
                    loc_rfinger_ln = fingerloc_grp.create("locator", "locatorShape1", self.loc_rfinger_tn)

                    r_finger_transform_t = om2.MFnTransform(self.loc_rfinger_tn)
                    r_finger_plug_t = r_finger_transform_t.translation(om2.MSpace.kTransform)
                    r_finger_plug_t[0], r_finger_plug_t[1] = -1, -1
                    r_finger_transform_t.setTranslation(r_finger_plug_t, om2.MSpace.kTransform)

    def createLegs(self, side):
        loc_leg = ["loc_L_upperleg", "loc_R_upperleg"]
        obj_list = om2.MSelectionList()
        legloc_grp = om2.MFnDagNode()

        if side == 1:
            try:
                obj_list.add(loc_leg[0])
                print("loc_L_leg already exist")
            except:
                l_upleg_tn = legloc_grp.create("transform", "loc_L_upperleg", self.loc_root_tn )
                l_upleg_ln = legloc_grp.create("locator", "locatorShape1", l_upleg_tn)

                self.l_leg_transform_t = om2.MFnTransform(l_upleg_tn)
                l_leg_transform = self.l_leg_transform_t.translation(om2.MSpace.kTransform)
                l_leg_transform[0], l_leg_transform[1] = 2.35, -(((int(self.createSpineText.text()))*0.5)+1)
                self.l_leg_transform_t.setTranslation(l_leg_transform, om2.MSpace.kTransform)

                # l_leg_transform_s = om2.MFnTransform(l_upleg_tn)
                # l_leg_plug_s = l_leg_transform_s.findPlug("scale", False)

                # if l_leg_plug_s.isCompound:
                #     for i in range(l_leg_plug_s.numChildren()):
                #         child_plug = l_leg_plug_s.child(i)
                #         attr_value = child_plug.setDouble(0.7)

                l_knee_tn = legloc_grp.create("transform", "loc_L_knee", l_upleg_tn)
                l_knee_ln = legloc_grp.create("locator", "locatorShape1", l_knee_tn)

                self.l_knee_transform_t = om2.MFnTransform(l_knee_tn)
                l_knee_transform_t = self.l_knee_transform_t.translation(om2.MSpace.kTransform)
                l_knee_transform_t[1] = -((int(self.createSpineText.text())*2.5))
                self.l_knee_transform_t.setTranslation(l_knee_transform_t, om2.MSpace.kTransform)

                l_football_tn = legloc_grp.create("transform", "loc_L_football", l_knee_tn)
                l_football_ln = legloc_grp.create("locator", "locatorShape1", l_football_tn)

                self.l_football_transform_t = om2.MFnTransform(l_football_tn)
                l_football_plug_ty = self.l_football_transform_t.findPlug("translateY", False)
                l_football_plug_ty.setDouble(-((int(self.createSpineText.text())*3.5)))

                l_foot_tn = legloc_grp.create("transform", "loc_L_foot", l_football_tn)
                l_football_ln = legloc_grp.create("locator", "locatorShape1", l_foot_tn)

                self.l_foot_transform_t = om2.MFnTransform(l_foot_tn)
                l_foot_transform = self.l_foot_transform_t.translation(om2.MSpace.kTransform)
                l_foot_transform[1], l_foot_transform[2] = -(int(self.createSpineText.text())*0.5), (int(self.createSpineText.text())*0.7)
                self.l_foot_transform_t.setTranslation(l_foot_transform, om2.MSpace.kTransform)

                l_toe_tn = legloc_grp.create("transform", "loc_L_toe", l_foot_tn)
                l_toe_ln = legloc_grp.create("locator", "locatorShape1", l_toe_tn)

                self.l_toe_transform_t = om2.MFnTransform(l_toe_tn)
                l_toe_plug_tz = self.l_toe_transform_t.findPlug("translateZ", False)
                l_toe_plug_tz.setDouble(((int(self.createSpineText.text())*0.7)))

        if side == -1:
            try:
                obj_list.add(loc_leg[1])
                print("loc_L_leg already exist")
            except:
                r_upleg_tn = legloc_grp.create("transform", "loc_R_upperleg", self.loc_root_tn)
                r_upleg_ln = legloc_grp.create("locator", "locatorShape1", r_upleg_tn)

                self.r_leg_transform_t = om2.MFnTransform(r_upleg_tn)
                r_leg_plug_tx = self.r_leg_transform_t.findPlug("translateX", False)
                r_leg_plug_ty = self.r_leg_transform_t.findPlug("translateY", False)
                r_leg_plug_tx.setDouble(-2.35)
                r_leg_plug_ty.setDouble(-(((int(self.createSpineText.text()))*0.5)+1))

                # r_leg_transform_s = om2.MFnTransform(r_upleg_tn)
                # r_leg_plug_s = r_leg_transform_s.findPlug("scale", False)

                # if r_leg_plug_s.isCompound:
                #     for i in range(r_leg_plug_s.numChildren()):
                #         child_plug = r_leg_plug_s.child(i)
                #         attr_value = child_plug.setDouble(1)

                r_knee_tn = legloc_grp.create("transform", "loc_R_knee", r_upleg_tn)
                r_knee_ln = legloc_grp.create("locator", "locatorShape1", r_knee_tn)

                self.r_knee_transform_t = om2.MFnTransform(r_knee_tn)
                r_knee_plug_ty = self.r_knee_transform_t.findPlug("translateY", False)
                r_knee_plug_ty.setDouble(-((int(self.createSpineText.text())*2.5)))

                r_football_tn = legloc_grp.create("transform", "loc_R_football", r_knee_tn)
                r_football_ln = legloc_grp.create("locator", "locatorShape1", r_football_tn)

                self.r_football_transform_t = om2.MFnTransform(r_football_tn)
                r_football_plug_ty = self.r_football_transform_t.findPlug("translateY", False)
                r_football_plug_ty.setDouble(-((int(self.createSpineText.text())*3.5)))

                r_foot_tn = legloc_grp.create("transform", "loc_R_foot", r_football_tn)
                r_football_ln = legloc_grp.create("locator", "locatorShape1", r_foot_tn)

                self.r_foot_transform_t = om2.MFnTransform(r_foot_tn)
                r_foot_transform = self.r_foot_transform_t.translation(om2.MSpace.kTransform)
                r_foot_transform[1], r_foot_transform[2] = -(int(self.createSpineText.text())*0.5), (int(self.createSpineText.text())*0.7)
                self.r_foot_transform_t.setTranslation(r_foot_transform, om2.MSpace.kTransform)

                r_toe_tn = legloc_grp.create("transform", "loc_R_toe", r_foot_tn)
                r_toe_ln = legloc_grp.create("locator", "locatorShape1", r_toe_tn)

                self.r_toe_transform_t = om2.MFnTransform(r_toe_tn)
                r_toe_plug_tz = self.r_toe_transform_t.findPlug("translateZ", False)
                r_toe_plug_tz.setDouble(((int(self.createSpineText.text())*0.7)))

    def mirrorLocator(self):
        if cmds.objExists("loc_L*") and cmds.objExists("loc_R*"):
            allLeftLocator = "loc_L_*"
            leftloc_ls = om2.MSelectionList()
            leftloc_ls.add(allLeftLocator)

            allRightLocator = "loc_R_*"
            rightloc_ls = om2.MSelectionList()
            rightloc_ls.add(allRightLocator)

            for index in range(leftloc_ls.length()):
                obj_l_loc = leftloc_ls.getDependNode(index)
                l_obj_tn = om2.MFnTransform(obj_l_loc)

                obj_r_loc = rightloc_ls.getDependNode(index)
                str_r_loc = rightloc_ls.getSelectionStrings(index)
                r_obj_tn = om2.MFnTransform(obj_r_loc)

                translation = l_obj_tn.translation(om2.MSpace.kTransform)
                rotation = l_obj_tn.rotation(om2.MSpace.kTransform)

                if str(str_r_loc)[3:][:7] == "loc_R_f":
                    translation[0] = -translation[0]
                    r_obj_tn.setTranslation(translation, om2.MSpace.kTransform)
                else:
                    translation[0] = -translation[0]
                    r_obj_tn.setTranslation(translation, om2.MSpace.kTransform)
                    rotation[1], rotation[2] = -rotation[1], -rotation[2]
                    r_obj_tn.setRotation(rotation, om2.MSpace.kTransform)
        else:
            print("Bla Bla...! No locators for Mirroring")

    def editMode(self):
        loc_lock = self.editModeCheckBox.isChecked()
        transform = ["translate", "rotate", "scale"]
        axis = ["X", "Y", "Z"]
        nodes = cmds.ls("loc_*", transforms=True)

        for t in transform:
            for ax in axis:
                for n in nodes:
                    if loc_lock:
                        cmds.setAttr(n+'.'+t+ax, lock=False)
                    else:
                        cmds.setAttr(n+'.'+t+ax, lock=True)

    def deleteLocator(self):
        if cmds.objExists("loc_grp"):
            self.MDG2_mod.commandToExecute('delete "loc_grp"')
            self.MDG2_mod.doIt()
        else:
            print("Heehee! There's no approproaite Locator Group Exist.")

    def createJoints(self):
        if cmds.objExists("loc_grp") and cmds.objExists("loc_root") and cmds.objExists("loc_L_*") and cmds.objExists("loc_R_*"):
            self.jnt_grp = "Biped_jnt_grp"
            obj_lst = om2.MSelectionList()
            spinejnt_grp = om2.MFnDagNode()

            root_loc = "loc_root"
            root_loc_ls = om2.MSelectionList()
            root_loc_ls.add(root_loc)
            root_loc_obj = root_loc_ls.getDependNode(0)
            root_loc_transform = om2.MFnTransform(root_loc_obj)
            self.loc_root_transform = root_loc_transform.transformation()

            try:
                obj_lst.add(self.jnt_grp)
                print("Rig_grp already exist")
            except:
                self.jnt_grp = spinejnt_grp.create("transform", "Biped_jnt_grp")
                self.donttouchjnt_grp = spinejnt_grp.create("transform", "DoNotTouch", self.jnt_grp)
                self.splineik_grp = spinejnt_grp.create("transform", "SplineIk_grp", self.jnt_grp)
                self.jnt_root_tn = spinejnt_grp.create("joint", "Root", self.jnt_grp)
                self.jnt_ikroot_tn = spinejnt_grp.create("joint", "IkHip", self.splineik_grp)
                self.jnt_ikrootcv_tn = spinejnt_grp.create("joint", "IkCvHip", self.donttouchjnt_grp)

                self.jnt_root_transform = om2.MFnTransform(self.jnt_root_tn)
                self.jnt_root_transform.setTransformation(self.loc_root_transform)

                self.jnt_ikroot_transform = om2.MFnTransform(self.jnt_ikroot_tn)
                self.jnt_ikroot_transform.setTransformation(self.loc_root_transform)

                self.jnt_ikrootcv_transform = om2.MFnTransform(self.jnt_ikrootcv_tn)
                self.jnt_ikrootcv_transform.setTransformation(self.loc_root_transform)

                spine_loc = "loc_spine_*"
                spine_loc_ls = om2.MSelectionList()
                spine_loc_ls.add(spine_loc)

                for index in range(spine_loc_ls.length()):
                    spine_loc_obj = spine_loc_ls.getDependNode(index)
                    spine_loc_tn = om2.MFnTransform(spine_loc_obj)
                    loc_spine_transform = spine_loc_tn.transformation()
                    loc_spinesec_transform_t = spine_loc_tn.translation(om2.MSpace.kTransform)
                    loc_spinesec_transform_r = spine_loc_tn.rotation(om2.MSpace.kTransform)

                    spine_path_n = om2.MDagPath()
                    spine_path = spine_path_n.getAPathTo(spine_loc_obj)
                    spine_loc_path_tn = om2.MFnTransform(spine_path)
                    spine_t = spine_loc_path_tn.translation(om2.MSpace.kWorld)

                    if index == 0:
                        self.spine_jnt = spinejnt_grp.create("joint", "Spine"+str(index), self.jnt_root_tn)
                        self.ikspine_jnt = spinejnt_grp.create("joint", "IkSpine"+str(index), self.jnt_ikroot_tn)
                        self.ikspinesec_jnt = spinejnt_grp.create("joint", "IkSpine"+str(index+1), self.ikspine_jnt)
                    else:
                        self.spine_jnt = spinejnt_grp.create("joint", "Spine"+str(index), self.spine_jnt)
                        self.ikspine_jnt = spinejnt_grp.create("joint", "IkSpine"+str(index*2), self.ikspinesec_jnt)
                        self.ikspinesec_jnt = spinejnt_grp.create("joint", "IkSpine"+str((index*2)+1), self.ikspine_jnt)

                        if index == spine_loc_ls.length()-1:
                            self.ikspinecv_jnt = spinejnt_grp.create("joint", "IkCvSpine", self.donttouchjnt_grp)

                            jnt_ikspinecv_tranform = om2.MFnTransform(self.ikspinecv_jnt)
                            jnt_ikspinecv_tranform.setTranslation(spine_t, om2.MSpace.kTransform)

                    jnt_spine_transform = om2.MFnTransform(self.spine_jnt)
                    jnt_spine_transform.setTransformation(loc_spine_transform)

                    jnt_ikspine_transform = om2.MFnTransform(self.ikspine_jnt)
                    jnt_ikspine_transform_t = jnt_ikspine_transform.translation(om2.MSpace.kTransform)
                    jnt_ikspine_transform_t[0], jnt_ikspine_transform_t[1], jnt_ikspine_transform_t[2] = loc_spinesec_transform_t[0]/2, loc_spinesec_transform_t[1]/2, loc_spinesec_transform_t[2]/2
                    jnt_ikspine_transform.setTranslation(jnt_ikspine_transform_t, om2.MSpace.kTransform)

                    jnt_ikspinesec_transform = om2.MFnTransform(self.ikspinesec_jnt)
                    jnt_ikspinesec_transform_t = jnt_ikspinesec_transform.translation(om2.MSpace.kTransform)
                    jnt_ikspinesec_transform_t[0], jnt_ikspinesec_transform_t[1], jnt_ikspinesec_transform_t[2] = loc_spinesec_transform_t[0]/2, loc_spinesec_transform_t[1]/2, loc_spinesec_transform_t[2]/2
                    jnt_ikspinesec_transform.setTranslation(jnt_ikspinesec_transform_t, om2.MSpace.kTransform)

                    jnt_ikspinesec_transform.setRotation(loc_spinesec_transform_r, om2.MSpace.kTransform)

                self.createHeadJoints()
                self.createShoulderJoints(1)
                self.createShoulderJoints(-1)
                self.createArmJoints(1)
                self.createArmJoints(-1)
                self.createLegJoints(1)
                self.createLegJoints(-1)

                lfinger_loc = "loc_L_finger_*"
                self.lfinger_lst = om2.MSelectionList()
                self.lfinger_lst.add(lfinger_loc)

                rfinger_loc = "loc_R_finger_*"
                rfinger_lst = om2.MSelectionList()
                rfinger_lst.add(rfinger_loc)

                self.createFingerJoints()

                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.scaleZ"')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkHip"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkNeck0"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "FkLeftArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkLeftArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkNoFlipLeftArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkPVLeftArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "LeftArmIk_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyLeftJointArm_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkStretchyLeftJointArm_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkLeftJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "FkLeftJointLeg_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkLeftJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkLeftJointLeg_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "LeftLegIk_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "LeftLegIk_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyLeftJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkStretchyLeftJointLeg_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "FkRightArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkRightArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkNoFlipRightArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkPVRightArm"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('select -hierarchy "RightArmIk_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -keyable false -channelBox false "IkStretchyRightJointArm_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkStretchyRightJointArm_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "FkRightJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "FkRightJointLeg_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkRightJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkRightJointLeg_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "RightLegIk_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "RightLegIk_grp"; hide -clearSelection;')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.rotateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.rotateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.rotateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.scaleZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "IkStretchyRightJointLeg_grp.visibility" 0')
                self.MDG2_mod.commandToExecute('select -hierarchy "IkStretchyRightJointLeg_grp"; hide -clearSelection;')

                ikspinejoint_sl_lst = om2.MSelectionList()
                ikspinejoint_sl_lst.add("IkSpine*")

                for index in range(ikspinejoint_sl_lst.length()):
                    ikspinejoint_obj = ikspinejoint_sl_lst.getDependNode(index)
                    ikspinejoint_tn = self.MTrans2.setObject(ikspinejoint_obj)
                    ikspinejointorient_plug = ikspinejoint_tn.findPlug("jointOrient", False)
                    ikspinejointrotate_plug = ikspinejoint_tn.rotation(om2.MSpace.kTransform)
                    if ikspinejointorient_plug.isCompound:
                        for i in range(ikspinejointorient_plug.numChildren()):
                            orientchild_plug = ikspinejointorient_plug.child(i)
                            orientchild_plug.setDouble(ikspinejointrotate_plug[i])
                            ikspinejointrotate_plug[i] = 0
                            ikspinejoint_tn.setRotation(ikspinejointrotate_plug, om2.MSpace.kTransform)

                spinejoint_sl_lst = om2.MSelectionList()
                spinejoint_sl_lst.add("Spine*")

                for index in range(spinejoint_sl_lst.length()):
                    if index == spinejoint_sl_lst.length() - 1:
                        lastspine_r = cmds.xform("Spine{0}".format(index), query=True, rotation=True, worldSpace=True)
                        cmds.setAttr("IkCvSpine.jointOrientX", lastspine_r[0])
                        cmds.setAttr("IkCvSpine.jointOrientY", lastspine_r[1])
                        cmds.setAttr("IkCvSpine.jointOrientZ", lastspine_r[2])

                neckikjoint_sl_lst = om2.MSelectionList()
                neckikjoint_sl_lst.add("IkNeck0")
                neckikjoint_sl_lst.add("IkNeck1")
                neckikjoint_sl_lst.add("IkNeck2")

                for index in range(neckikjoint_sl_lst.length()):
                    self.MDG2_mod.commandToExecute('joint -e -orientJoint yzx -secondaryAxisOrient ydown -zeroScaleOrient IkNeck{0}'.format(index))

                self.MDG2_mod.doIt()

        else:
            print("Yo! Check if you have required locator for Joint-Chain")

    def createHeadJoints(self):
        headjnt_grp = om2.MFnDagNode()

        head_loc = ["loc_neck", "loc_headlower", "loc_headend"]
        head_loc_ls = om2.MSelectionList()
        head_loc_ls.add(head_loc[0])
        neck_loc_obj = head_loc_ls.getDependNode(0)
        neck_loc_transform = om2.MFnTransform(neck_loc_obj)
        loc_neck_transform = neck_loc_transform.transformation()

        neck_path_n = om2.MDagPath()
        neck_path = neck_path_n.getAPathTo(neck_loc_obj)
        neck_loc_path_tn = om2.MFnTransform(neck_path)
        neck_t = neck_loc_path_tn.translation(om2.MSpace.kWorld)

        head_loc_ls.add(head_loc[1])
        headlower_loc_obj = head_loc_ls.getDependNode(1)
        headlower_loc_transform = om2.  MFnTransform(headlower_loc_obj)
        loc_headlower_transform = headlower_loc_transform.transformation()
        loc_headlower_t = headlower_loc_transform.translation(om2.MSpace.kTransform)

        head_path_n = om2.MDagPath()
        head_path = head_path_n.getAPathTo(headlower_loc_obj)
        head_loc_path_tn = om2.MFnTransform(head_path)
        head_t = head_loc_path_tn.translation(om2.MSpace.kWorld)

        head_loc_ls.add(head_loc[2])
        headend_loc_obj = head_loc_ls.getDependNode(2)
        headend_loc_transform = om2.MFnTransform(headend_loc_obj)
        loc_headend_transform = headend_loc_transform.transformation()

        jnt_neck = headjnt_grp.create("joint", "Neck", self.spine_jnt)
        jnt_ikneck0 = headjnt_grp.create("joint", "IkNeck0", self.splineik_grp)
        jnt_ikcvneck = headjnt_grp.create("joint", "IkCvNeck", self.donttouchjnt_grp)

        jnt_neck_transform = om2.MFnTransform(jnt_neck)
        jnt_neck_transform.setTransformation(loc_neck_transform)

        jnt_ikneck0_transform = om2.MFnTransform(jnt_ikneck0)
        jnt_ikneck0_transform.setTranslation(neck_t, om2.MSpace.kTransform)

        jnt_ikcvneck_transform = om2.MFnTransform(jnt_ikcvneck)
        jnt_ikcvneck_transform.setTranslation(neck_t, om2.MSpace.kTransform)

        jnt_ikneck1 = headjnt_grp.create("joint", "IkNeck1", jnt_ikneck0)

        jnt_ikneck1_tranform = om2.MFnTransform(jnt_ikneck1)
        jnt_ikneck1_tranform_t = jnt_ikneck1_tranform.translation(om2.MSpace.kTransform)
        jnt_ikneck1_tranform_t[0], jnt_ikneck1_tranform_t[1], jnt_ikneck1_tranform_t[2] = loc_headlower_t[0]/3, loc_headlower_t[1]/3, loc_headlower_t[2]/3
        jnt_ikneck1_tranform.setTranslation(jnt_ikneck1_tranform_t, om2.MSpace.kTransform)

        jnt_ikneck2 = headjnt_grp.create("joint", "IkNeck2", jnt_ikneck1)

        jnt_ikneck2_tranform = om2.MFnTransform(jnt_ikneck2)
        jnt_ikneck2_tranform_t = jnt_ikneck2_tranform.translation(om2.MSpace.kTransform)
        jnt_ikneck2_tranform_t[0], jnt_ikneck2_tranform_t[1], jnt_ikneck2_tranform_t[2] = loc_headlower_t[0]/3, loc_headlower_t[1]/3, loc_headlower_t[2]/3
        jnt_ikneck2_tranform.setTranslation(jnt_ikneck2_tranform_t, om2.MSpace.kTransform)

        jnt_ikneck3 = headjnt_grp.create("joint", "IkNeck3", jnt_ikneck2)

        jnt_ikneck3_tranform = om2.MFnTransform(jnt_ikneck3)
        jnt_ikneck3_tranform_t = jnt_ikneck3_tranform.translation(om2.MSpace.kTransform)
        jnt_ikneck3_tranform_t[0], jnt_ikneck3_tranform_t[1], jnt_ikneck3_tranform_t[2] = loc_headlower_t[0]/3, loc_headlower_t[1]/3, loc_headlower_t[2]/3
        jnt_ikneck3_tranform.setTranslation(jnt_ikneck3_tranform_t, om2.MSpace.kTransform)

        jnt_head = headjnt_grp.create("joint", "Head", jnt_neck)
        jnt_ikhead = headjnt_grp.create("joint", "IkCvHead", self.donttouchjnt_grp)

        jnt_head_transform = om2.MFnTransform(jnt_head)
        jnt_head_transform.setTransformation(loc_headlower_transform)

        jnt_ikhead_transform = om2.MFnTransform(jnt_ikhead)
        jnt_ikhead_transform.setTranslation(head_t, om2.MSpace.kTransform)

        jnt_headend = headjnt_grp.create("joint", "HeadTopEnd", jnt_head)

        jnt_headend_transform = om2.MFnTransform(jnt_headend)
        jnt_headend_transform.setTransformation(loc_headend_transform)

    def createShoulderJoints(self, side):
        shoulderjnt_grp = om2.MFnDagNode()

        shoulder_loc = ["loc_*_shoulder"]
        shoulder_loc_ls = om2.MSelectionList()
        shoulder_loc_ls.add(shoulder_loc[0])
        lshoulder_loc_obj = shoulder_loc_ls.getDependNode(0)
        loc_lshoulder_transform1 = om2.MFnTransform(lshoulder_loc_obj)
        loc_lshoulder_transform = loc_lshoulder_transform1.transformation()

        loc_lshoulder_r = cmds.xform("loc_L_shoulder", query=True, rotation=True, worldSpace=True)
        self.radian_lshoulder_rx = (loc_lshoulder_r[0] / 180) * 3.1415
        self.radian_lshoulder_ry = (loc_lshoulder_r[1] / 180) * 3.1415
        self.radian_lshoulder_rz = (loc_lshoulder_r[2] / 180) * 3.1415

        lshoulder_loc_path_n = om2.MDagPath()
        lshoulder_loc_path = lshoulder_loc_path_n.getAPathTo(lshoulder_loc_obj)
        loc_lshoulder_transform2 = om2.MFnTransform(lshoulder_loc_path)
        self.loc_lshoulder_t1 = loc_lshoulder_transform2.translation(om2.MSpace.kWorld)

        rshoulder_loc_obj = shoulder_loc_ls.getDependNode(1)
        rshoulder_loc_transform = om2.MFnTransform(rshoulder_loc_obj)
        loc_rshoulder_transform = rshoulder_loc_transform.transformation()

        loc_rshoulder_r = cmds.xform("loc_R_shoulder", query=True, rotation=True, worldSpace=True)
        self.radian_rshoulder_rx = (loc_rshoulder_r[0] / 180) * 3.1415
        self.radian_rshoulder_ry = (loc_rshoulder_r[1] / 180) * 3.1415
        self.radian_rshoulder_rz = (loc_rshoulder_r[2] / 180) * 3.1415

        rshoulder_loc_path_n = om2.MDagPath()
        rshoulder_loc_path = rshoulder_loc_path_n.getAPathTo(rshoulder_loc_obj)
        loc_rshoulder_transform2 = om2.MFnTransform(rshoulder_loc_path)
        self.loc_rshoulder_t = loc_rshoulder_transform2.translation(om2.MSpace.kWorld)

        if side == 1:
            self.jnt_lshoulder = shoulderjnt_grp.create("joint", "LeftShoulder", self.spine_jnt)

            jnt_lshoulder_transform = om2.MFnTransform(self.jnt_lshoulder)
            jnt_lshoulder_transform.setTransformation(loc_lshoulder_transform)

        if side == -1:
            self.jnt_rshoulder = shoulderjnt_grp.create("joint", "RightShoulder", self.spine_jnt)

            jnt_rshoulder_transform = om2.MFnTransform(self.jnt_rshoulder)
            jnt_rshoulder_transform.setTransformation(loc_rshoulder_transform)

    def createArmJoints(self, side):
        armjnt_grp = om2.MFnDagNode()

        hand_loc = ["loc_L_upperarm", "loc_L_elbow", "loc_L_wrist", "loc_R_upperarm", "loc_R_elbow", "loc_R_wrist"]
        hand_loc_ls = om2.MSelectionList()

        if side == 1:
            self.larmik_grp = armjnt_grp.create("transform", "LeftArmIk_grp", self.donttouchjnt_grp)
            self.larmikcluster_grp = armjnt_grp.create("transform", "LeftArmIkCluster_grp", self.splineik_grp)
            self.lupperarmikcluster_grp = armjnt_grp.create("transform", "LeftUpperArmIkCluster_grp", self.larmikcluster_grp)
            self.lupperarmikcluster0_grp = armjnt_grp.create("transform", "LeftUpperArmIkCluster0_grp", self.lupperarmikcluster_grp)
            self.lupperarmikcluster1_grp = armjnt_grp.create("transform", "LeftUpperArmIkCluster1_grp", self.lupperarmikcluster_grp)
            self.lupperarmikcluster2_grp = armjnt_grp.create("transform", "LeftUpperArmIkCluster2_grp", self.lupperarmikcluster_grp)
            self.llowerarmikcluster_grp = armjnt_grp.create("transform", "LeftLowerArmIkCluster_grp", self.larmikcluster_grp)
            self.llowerarmikcluster0_grp = armjnt_grp.create("transform", "LeftLowerArmIkCluster0_grp", self.llowerarmikcluster_grp)
            self.llowerarmikcluster1_grp = armjnt_grp.create("transform", "LeftLowerArmIkCluster1_grp", self.llowerarmikcluster_grp)
            self.llowerarmikcluster2_grp = armjnt_grp.create("transform", "LeftLowerArmIkCluster2_grp", self.llowerarmikcluster_grp)

            self.jnt_lupperarm = armjnt_grp.create("joint", "LeftArm", self.jnt_lshoulder)

            self.jnt_fklupperarm = armjnt_grp.create("joint", "FkLeftArm", self.jnt_lshoulder)

            self.jnt_iklupperarm = armjnt_grp.create("joint", "IkLeftArm", self.jnt_lshoulder)
            jnt_iknofliplupperarm = armjnt_grp.create("joint", "IkNoFlipLeftArm", self.jnt_lshoulder)
            jnt_ikpvlupperarm = armjnt_grp.create("joint", "IkPVLeftArm", self.jnt_lshoulder)

            hand_loc_ls.add(hand_loc[0])
            loc_lupperarm_obj = hand_loc_ls.getDependNode(0)
            loc_lupperarm_transform1 = om2.MFnTransform(loc_lupperarm_obj)
            loc_lupperarm_localtransform = loc_lupperarm_transform1.transformation()
            loc_lupperarm_t1 = loc_lupperarm_transform1.translation(om2.MSpace.kTransform)

            lupperarm_loc_path_n = om2.MDagPath()
            lupperarm_loc_path = lupperarm_loc_path_n.getAPathTo(loc_lupperarm_obj)
            loc_lupperarm_transform2 = om2.MFnTransform(lupperarm_loc_path)
            loc_lupperarm_t2 = loc_lupperarm_transform2.translation(om2.MSpace.kWorld)

            loc_lupperarm_r = cmds.xform("loc_L_upperarm", query=True, rotation=True, worldSpace=True)
            radian_lupperarm_rx = (loc_lupperarm_r[0] / 180) * 3.1415
            radian_lupperarm_ry = (loc_lupperarm_r[1] / 180) * 3.1415
            radian_lupperarm_rz = (loc_lupperarm_r[2] / 180) * 3.1415

            jnt_lupperarm_transform = om2.MFnTransform(self.jnt_lupperarm)
            jnt_lupperarm_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_fklupperarm_transform = om2.MFnTransform(self.jnt_fklupperarm)
            jnt_fklupperarm_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_iklupperarm_transform = om2.MFnTransform(self.jnt_iklupperarm)
            jnt_iklupperarm_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_iknofliplupperarm_transform = om2.MFnTransform(jnt_iknofliplupperarm)
            jnt_iknofliplupperarm_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_ikpvlupperarm_transform = om2.MFnTransform(jnt_ikpvlupperarm)
            jnt_ikpvlupperarm_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_lelbow = armjnt_grp.create("joint", "LeftForeArm", self.jnt_lupperarm)
            jnt_fklelbow = armjnt_grp.create("joint", "FkLeftForeArm", self.jnt_fklupperarm)
            jnt_iklelbow = armjnt_grp.create("joint", "IkLeftForeArm", self.jnt_iklupperarm)
            jnt_iknofliplelbow = armjnt_grp.create("joint", "IkNoFlipLeftForeArm", jnt_iknofliplupperarm)
            jnt_ikpvlelbow = armjnt_grp.create("joint", "IkPVLeftForeArm", jnt_ikpvlupperarm)

            hand_loc_ls.add(hand_loc[1])
            lelbow_loc_obj = hand_loc_ls.getDependNode(1)
            lelbow_loc_transform1 = om2.MFnTransform(lelbow_loc_obj)
            loc_lelbow_localmatrix = lelbow_loc_transform1.transformation()
            loc_lelbow_t1 = lelbow_loc_transform1.translation(om2.MSpace.kTransform)

            lelbow_loc_path_n = om2.MDagPath()
            lelbow_loc_path = lelbow_loc_path_n.getAPathTo(lelbow_loc_obj)
            lelbow_loc_transform2 = om2.MFnTransform(lelbow_loc_path)
            loc_lelbow_t2 = lelbow_loc_transform2.translation(om2.MSpace.kWorld)

            loc_lelbow_r = cmds.xform("loc_L_elbow", query=True, rotation=True, worldSpace=True)
            radian_lelbow_rx = (loc_lelbow_r[0] / 180) * 3.1415
            radian_lelbow_ry = (loc_lelbow_r[1] / 180) * 3.1415
            radian_lelbow_rz = (loc_lelbow_r[2] / 180) * 3.1415

            jnt_lelbow_transform = om2.MFnTransform(jnt_lelbow)
            jnt_lelbow_transform.setTransformation(loc_lelbow_localmatrix)

            jnt_fklelbow_transform = om2.MFnTransform(jnt_fklelbow)
            jnt_fklelbow_transform.setTransformation(loc_lelbow_localmatrix)

            jnt_iklelbow_transform = om2.MFnTransform(jnt_iklelbow)
            jnt_iklelbow_transform.setTransformation(loc_lelbow_localmatrix)

            jnt_iknofliplelbow_transform = om2.MFnTransform(jnt_iknofliplelbow)
            jnt_iknofliplelbow_transform.setTransformation(loc_lelbow_localmatrix)

            jnt_ikpvlelbow_transform = om2.MFnTransform(jnt_ikpvlelbow)
            jnt_ikpvlelbow_transform.setTransformation(loc_lelbow_localmatrix)

            self.jnt_lwrist = armjnt_grp.create("joint", "LeftHand", jnt_lelbow)
            self.jnt_fklwrist = armjnt_grp.create("joint", "FkLeftHand", jnt_fklelbow)
            self.jnt_iklwrist = armjnt_grp.create("joint", "IkLeftHand", jnt_iklelbow)
            jnt_iknofliplwrist = armjnt_grp.create("joint", "IkNoFlipLeftHand", jnt_iknofliplelbow)
            jnt_ikpvlwrist = armjnt_grp.create("joint", "IkPVLeftHand", jnt_ikpvlelbow)

            hand_loc_ls.add(hand_loc[2])
            lwrist_loc_obj = hand_loc_ls.getDependNode(2)
            lwrist_loc_transform1 = om2.MFnTransform(lwrist_loc_obj)
            loc_lwrist_localtransform = lwrist_loc_transform1.transformation()
            loc_lwrist_t1 = lwrist_loc_transform1.translation(om2.MSpace.kTransform)

            lwrist_loc_path_n = om2.MDagPath()
            lwrist_loc_path = lwrist_loc_path_n.getAPathTo(lwrist_loc_obj)
            lwrist_loc_transform2 = om2.MFnTransform(lwrist_loc_path)
            loc_lwrist_t2 = lwrist_loc_transform2.translation(om2.MSpace.kWorld)

            jnt_lwrist_transform = om2.MFnTransform(self.jnt_lwrist)
            jnt_lwrist_transform.setTransformation(loc_lwrist_localtransform)

            jnt_fklwrist_transform = om2.MFnTransform(self.jnt_fklwrist)
            jnt_fklwrist_transform.setTransformation(loc_lwrist_localtransform)

            jnt_iklwrist_transform = om2.MFnTransform(self.jnt_iklwrist)
            jnt_iklwrist_transform.setTransformation(loc_lwrist_localtransform)

            jnt_iknofliplwrist_transform = om2.MFnTransform(jnt_iknofliplwrist)
            jnt_iknofliplwrist_transform.setTransformation(loc_lwrist_localtransform)

            jnt_ikpvlwrist_transform = om2.MFnTransform(jnt_ikpvlwrist)
            jnt_ikpvlwrist_transform.setTransformation(loc_lwrist_localtransform)

            grp_stretchyiklarm = armjnt_grp.create("transform", "IkStretchyLeftJointArm_grp", self.splineik_grp)

            grp_stretchyiklarm_transform = om2.MFnTransform(grp_stretchyiklarm)
            grp_stretchyiklarm_transform.setTranslation(self.loc_lshoulder_t1, om2.MSpace.kTransform)

            grp_stretchyiklarm_transform.setRotation(om2.MEulerRotation(self.radian_lshoulder_rx, self.radian_lshoulder_ry, self.radian_lshoulder_rz), om2.MSpace.kTransform)

            jnt_stretchyiklupperarm0 = armjnt_grp.create("joint", "IkSplineLeftUpperArm0", grp_stretchyiklarm)

            jnt_stretchyiklupperarm0_transform = om2.MFnTransform(jnt_stretchyiklupperarm0)
            jnt_stretchyiklupperarm0_transform.setTransformation(loc_lupperarm_localtransform)

            jnt_stretchyikcvlupperarm0 = armjnt_grp.create("joint", "IkCvSplineLeftUpperArm0", self.lupperarmikcluster0_grp)

            grp_stretchyikcvlupperarm_transform = om2.MFnTransform(self.lupperarmikcluster_grp)
            grp_stretchyikcvlupperarm_transform.setTranslation(loc_lupperarm_t2, om2.MSpace.kTransform)

            grp_stretchyikcvlupperarm_transform.setRotation(om2.MEulerRotation(radian_lupperarm_rx, radian_lupperarm_ry, radian_lupperarm_rz), om2.MSpace.kTransform)

            jnt_stretchyiklupperarm1 = armjnt_grp.create("joint", "IkSplineLeftUpperArm1", jnt_stretchyiklupperarm0)

            jnt_stretchyiklupperarm1_transform = om2.MFnTransform(jnt_stretchyiklupperarm1)
            jnt_stretchyiklupperarm1_transform_t = jnt_stretchyiklupperarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperarm1_transform_t[0], jnt_stretchyiklupperarm1_transform_t[1], jnt_stretchyiklupperarm1_transform_t[2] = loc_lelbow_t1[0]/4, loc_lelbow_t1[1]/4, loc_lelbow_t1[2]/4
            jnt_stretchyiklupperarm1_transform.setTranslation(jnt_stretchyiklupperarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperarm2 = armjnt_grp.create("joint", "IkSplineLeftUpperArm2", jnt_stretchyiklupperarm1)

            jnt_stretchyiklupperarm2_transform = om2.MFnTransform(jnt_stretchyiklupperarm2)
            jnt_stretchyiklupperarm2_transform_t = jnt_stretchyiklupperarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperarm2_transform_t[0], jnt_stretchyiklupperarm2_transform_t[1], jnt_stretchyiklupperarm2_transform_t[2] = (loc_lelbow_t1[0]/2)-jnt_stretchyiklupperarm1_transform_t[0], (loc_lelbow_t1[1]/2)-jnt_stretchyiklupperarm1_transform_t[1], (loc_lelbow_t1[2]/2)-jnt_stretchyiklupperarm1_transform_t[2]
            jnt_stretchyiklupperarm2_transform.setTranslation(jnt_stretchyiklupperarm2_transform_t, om2.MSpace.kTransform)

            # jnt_stretchyikcvlupperarm0_transform_t = grp_stretchyikcvlupperarm_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvlupperarm1 = armjnt_grp.create("joint", "IkCvSplineLeftUpperArm1", self.lupperarmikcluster1_grp)

            jnt_stretchyikcvlupperarm1grp_transform = om2.MFnTransform(self.lupperarmikcluster1_grp)
            jnt_stretchyikcvlupperleg1grp_transform_t = jnt_stretchyikcvlupperarm1grp_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvlupperleg1grp_transform_t[0], jnt_stretchyikcvlupperleg1grp_transform_t[1], jnt_stretchyikcvlupperleg1grp_transform_t[2] = loc_lelbow_t1[0]/2, loc_lelbow_t1[1]/2, loc_lelbow_t1[2]/2
            jnt_stretchyikcvlupperarm1grp_transform.setTranslation(jnt_stretchyikcvlupperleg1grp_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperarm3 = armjnt_grp.create("joint", "IkSplineLeftUpperArm3", jnt_stretchyiklupperarm2)

            jnt_stretchyiklupperarm3_transform = om2.MFnTransform(jnt_stretchyiklupperarm3)
            jnt_stretchyiklupperarm3_transform_t = jnt_stretchyiklupperarm3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperarm3_transform_t[0], jnt_stretchyiklupperarm3_transform_t[1], jnt_stretchyiklupperarm3_transform_t[2] = jnt_stretchyiklupperarm2_transform_t[0], jnt_stretchyiklupperarm2_transform_t[1], jnt_stretchyiklupperarm2_transform_t[2]
            jnt_stretchyiklupperarm3_transform.setTranslation(jnt_stretchyiklupperarm3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperarm4 = armjnt_grp.create("joint", "IkSplineLeftUpperArm4", jnt_stretchyiklupperarm3)

            jnt_stretchyiklupperarm4_transform = om2.MFnTransform(jnt_stretchyiklupperarm4)
            jnt_stretchyiklupperarm4_transform_t = jnt_stretchyiklupperarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperarm4_transform_t[0], jnt_stretchyiklupperarm4_transform_t[1], jnt_stretchyiklupperarm4_transform_t[2] = jnt_stretchyiklupperarm3_transform_t[0], jnt_stretchyiklupperarm3_transform_t[1], jnt_stretchyiklupperarm3_transform_t[2]
            jnt_stretchyiklupperarm4_transform.setTranslation(jnt_stretchyiklupperarm4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvlupperarm2 = armjnt_grp.create("joint", "IkCvSplineLeftUpperArm2", self.lupperarmikcluster2_grp)

            jnt_stretchyikcvlupperarm2_transform = om2.MFnTransform(self.lupperarmikcluster2_grp)
            jnt_stretchyikcvlupperarm2_transform_t = jnt_stretchyikcvlupperarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvlupperarm2_transform_t[0], jnt_stretchyikcvlupperarm2_transform_t[1], jnt_stretchyikcvlupperarm2_transform_t[2] = loc_lelbow_t1[0], loc_lelbow_t1[1], loc_lelbow_t1[2]
            jnt_stretchyikcvlupperarm2_transform.setTranslation(jnt_stretchyikcvlupperarm2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerarm0 = armjnt_grp.create("joint", "IkSplineLeftLowerArm0", grp_stretchyiklarm)

            jnt_stretchyikllowerarm0_transform = om2.MFnTransform(jnt_stretchyikllowerarm0)
            jnt_stretchyikllowerarm0_transform.setTranslation(loc_lelbow_t2, om2.MSpace.kTransform)

            jnt_stretchyikllowerarm0_transform.setRotation(om2.MEulerRotation(radian_lelbow_rx, radian_lelbow_ry, radian_lelbow_rz), om2.MSpace.kTransform)

            grp_stretchyiklarm_transformmatrix = grp_stretchyiklarm_transform.transformation()
            grp_stretchyiklarm_inversematrix = grp_stretchyiklarm_transformmatrix.asMatrixInverse()

            jnt_stretchyikllowerarm0_transformmatrix = jnt_stretchyikllowerarm0_transform.transformation()
            jnt_stretchyikllowerarm0_worldmatrix = jnt_stretchyikllowerarm0_transformmatrix.asMatrix()

            jnt_stretchyikllowerarm0_localmatrix = jnt_stretchyikllowerarm0_worldmatrix * grp_stretchyiklarm_inversematrix
            jnt_stretchyikllowerarm0_transform.setTransformation(om2.MTransformationMatrix(jnt_stretchyikllowerarm0_localmatrix))

            jnt_stretchyikcvllowerarm0 = armjnt_grp.create("joint", "IkCvSplineLeftLowerArm0", self.llowerarmikcluster0_grp)

            jnt_stretchyikcvllowerarm0_transform = om2.MFnTransform(self.llowerarmikcluster_grp)
            jnt_stretchyikcvllowerarm0_transform.setTranslation(loc_lelbow_t2, om2.MSpace.kTransform)

            jnt_stretchyikcvllowerarm0_transform.setRotation(om2.MEulerRotation(radian_lelbow_rx, radian_lelbow_ry, radian_lelbow_rz), om2.MSpace.kTransform)

            jnt_stretchyikllowerarm1 = armjnt_grp.create("joint", "IkSplineLeftLowerArm1", jnt_stretchyikllowerarm0)

            jnt_stretchyikllowerarm1_transform = om2.MFnTransform(jnt_stretchyikllowerarm1)
            jnt_stretchyikllowerarm1_transform_t = jnt_stretchyikllowerarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerarm1_transform_t[0], jnt_stretchyikllowerarm1_transform_t[1], jnt_stretchyikllowerarm1_transform_t[2] = loc_lwrist_t1[0]/4, loc_lwrist_t1[1]/4, loc_lwrist_t1[2]/4
            jnt_stretchyikllowerarm1_transform.setTranslation(jnt_stretchyikllowerarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerarm2 = armjnt_grp.create("joint", "IkSplineLeftLowerArm2", jnt_stretchyikllowerarm1)

            jnt_stretchyikllowerarm2_transform = om2.MFnTransform(jnt_stretchyikllowerarm2)
            jnt_stretchyikllowerarm2_transform_t = jnt_stretchyikllowerarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerarm2_transform_t[0], jnt_stretchyikllowerarm2_transform_t[1], jnt_stretchyikllowerarm2_transform_t[2] = (loc_lwrist_t1[0]/2)-jnt_stretchyikllowerarm1_transform_t[0], (loc_lwrist_t1[1]/2)-jnt_stretchyikllowerarm1_transform_t[1], (loc_lwrist_t1[2]/2)-jnt_stretchyikllowerarm1_transform_t[2]
            jnt_stretchyikllowerarm2_transform.setTranslation(jnt_stretchyikllowerarm2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvllowerarm1 = armjnt_grp.create("joint", "IkCvSplineLeftLowerArm1", self.llowerarmikcluster1_grp)

            # jnt_stretchyikcvllowerarm0_transform_t = jnt_stretchyikcvllowerarm0_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvllowerarm1_transform = om2.MFnTransform(self.llowerarmikcluster1_grp)
            jnt_stretchyikcvllowerarm1_transform_t = jnt_stretchyikcvllowerarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvllowerarm1_transform_t[0], jnt_stretchyikcvllowerarm1_transform_t[1], jnt_stretchyikcvllowerarm1_transform_t[2] = loc_lwrist_t1[0]/2, loc_lwrist_t1[1]/2, loc_lwrist_t1[2]/2
            jnt_stretchyikcvllowerarm1_transform.setTranslation(jnt_stretchyikcvllowerarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerarm3 = armjnt_grp.create("joint", "IkSplineLeftLowerArm3", jnt_stretchyikllowerarm2)

            jnt_stretchyikllowerarm3_transform = om2.MFnTransform(jnt_stretchyikllowerarm3)
            jnt_stretchyikllowearm3_transform_t = jnt_stretchyikllowerarm3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowearm3_transform_t[0], jnt_stretchyikllowearm3_transform_t[1], jnt_stretchyikllowearm3_transform_t[2] = jnt_stretchyikllowerarm2_transform_t[0], jnt_stretchyikllowerarm2_transform_t[1], jnt_stretchyikllowerarm2_transform_t[2]
            jnt_stretchyikllowerarm3_transform.setTranslation(jnt_stretchyikllowearm3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerarm4 = armjnt_grp.create("joint", "IkSplineLeftLowerArm4", jnt_stretchyikllowerarm3)

            jnt_stretchyikllowerarm4_transform = om2.MFnTransform(jnt_stretchyikllowerarm4)
            jnt_stretchyikllowerarm4_transform_t = jnt_stretchyikllowerarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerarm4_transform_t[0], jnt_stretchyikllowerarm4_transform_t[1], jnt_stretchyikllowerarm4_transform_t[2] = jnt_stretchyikllowearm3_transform_t[0], jnt_stretchyikllowearm3_transform_t[1], jnt_stretchyikllowearm3_transform_t[2]
            jnt_stretchyikllowerarm4_transform.setTranslation(jnt_stretchyikllowerarm4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvllowerarm2 = armjnt_grp.create("joint", "IkCvSplineLeftLowerArm2", self.llowerarmikcluster2_grp)

            jnt_stretchyikcvllowerarm4_transform = om2.MFnTransform(self.llowerarmikcluster2_grp)
            jnt_stretchyikcvllowerarm4_transform_t = jnt_stretchyikcvllowerarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvllowerarm4_transform_t[0], jnt_stretchyikcvllowerarm4_transform_t[1], jnt_stretchyikcvllowerarm4_transform_t[2] = loc_lwrist_t1[0], loc_lwrist_t1[1], loc_lwrist_t1[2]
            jnt_stretchyikcvllowerarm4_transform.setTranslation(jnt_stretchyikcvllowerarm4_transform_t, om2.MSpace.kTransform)

            self.MDG2_mod.commandToExecute('float $leftarm_rx = `getAttr "IkLeftArm.rotateX"`; $leftarm_ry = `getAttr "IkLeftArm.rotateY"`; float $leftarm_rz = `getAttr "IkLeftArm.rotateZ"`; setAttr "IkLeftArm.jointOrientX" $leftarm_rx; setAttr "IkLeftArm.jointOrientY" $leftarm_ry; setAttr "IkLeftArm.jointOrientZ" $leftarm_rz; setAttr "IkLeftArm.rotateX" 0; setAttr "IkLeftArm.rotateY" 0; setAttr "IkLeftArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $leftforearm_rx = `getAttr "IkLeftForeArm.rotateX"`; $leftforearm_ry = `getAttr "IkLeftForeArm.rotateY"`; float $leftforearm_rz = `getAttr "IkLeftForeArm.rotateZ"`; setAttr "IkLeftForeArm.jointOrientX" $leftforearm_rx; setAttr "IkLeftForeArm.jointOrientY" $leftforearm_ry; setAttr "IkLeftForeArm.jointOrientZ" $leftforearm_rz; setAttr "IkLeftForeArm.rotateX" 0; setAttr "IkLeftForeArm.rotateY" 0; setAttr "IkLeftForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $lefthand_rx = `getAttr "IkLeftHand.rotateX"`; $lefthand_ry = `getAttr "IkLeftHand.rotateY"`; float $lefthand_rz = `getAttr "IkLeftHand.rotateZ"`; setAttr "IkLeftHand.jointOrientX" $lefthand_rx; setAttr "IkLeftHand.jointOrientY" $lefthand_ry; setAttr "IkLeftHand.jointOrientZ" $lefthand_rz; setAttr "IkLeftHand.rotateX" 0; setAttr "IkLeftHand.rotateY" 0; setAttr "IkLeftHand.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $noflipleftarm_rx = `getAttr "IkNoFlipLeftArm.rotateX"`; $noflipleftarm_ry = `getAttr "IkNoFlipLeftArm.rotateY"`; float $noflipleftarm_rz = `getAttr "IkNoFlipLeftArm.rotateZ"`; setAttr "IkNoFlipLeftArm.jointOrientX" $noflipleftarm_rx; setAttr "IkNoFlipLeftArm.jointOrientY" $noflipleftarm_ry; setAttr "IkNoFlipLeftArm.jointOrientZ" $noflipleftarm_rz; setAttr "IkNoFlipLeftArm.rotateX" 0; setAttr "IkNoFlipLeftArm.rotateY" 0; setAttr "IkNoFlipLeftArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $noflipleftforearm_rx = `getAttr "IkNoFlipLeftForeArm.rotateX"`; $noflipleftforearm_ry = `getAttr "IkNoFlipLeftForeArm.rotateY"`; float $noflipleftforearm_rz = `getAttr "IkNoFlipLeftForeArm.rotateZ"`; setAttr "IkNoFlipLeftForeArm.jointOrientX" $noflipleftforearm_rx; setAttr "IkNoFlipLeftForeArm.jointOrientY" $noflipleftforearm_ry; setAttr "IkNoFlipLeftForeArm.jointOrientZ" $noflipleftforearm_rz; setAttr "IkNoFlipLeftForeArm.rotateX" 0; setAttr "IkNoFlipLeftForeArm.rotateY" 0; setAttr "IkNoFlipLeftForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliplefthand_rx = `getAttr "IkNoFlipLeftHand.rotateX"`; $nofliplefthand_ry = `getAttr "IkNoFlipLeftHand.rotateY"`; float $nofliplefthand_rz = `getAttr "IkNoFlipLeftHand.rotateZ"`; setAttr "IkNoFlipLeftHand.jointOrientX" $nofliplefthand_rx; setAttr "IkNoFlipLeftHand.jointOrientY" $nofliplefthand_ry; setAttr "IkNoFlipLeftHand.jointOrientZ" $nofliplefthand_rz; setAttr "IkNoFlipLeftHand.rotateX" 0; setAttr "IkNoFlipLeftHand.rotateY" 0; setAttr "IkNoFlipLeftHand.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvleftarm_rx = `getAttr "IkPVLeftArm.rotateX"`; $pvleftarm_ry = `getAttr "IkPVLeftArm.rotateY"`; float $pvleftarm_rz = `getAttr "IkPVLeftArm.rotateZ"`; setAttr "IkPVLeftArm.jointOrientX" $pvleftarm_rx; setAttr "IkPVLeftArm.jointOrientY" $pvleftarm_ry; setAttr "IkPVLeftArm.jointOrientZ" $pvleftarm_rz; setAttr "IkPVLeftArm.rotateX" 0; setAttr "IkPVLeftArm.rotateY" 0; setAttr "IkPVLeftArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvleftforearm_rx = `getAttr "IkPVLeftForeArm.rotateX"`; $pvleftforearm_ry = `getAttr "IkPVLeftForeArm.rotateY"`; float $pvleftforearm_rz = `getAttr "IkPVLeftForeArm.rotateZ"`; setAttr "IkPVLeftForeArm.jointOrientX" $pvleftforearm_rx; setAttr "IkPVLeftForeArm.jointOrientY" $pvleftforearm_ry; setAttr "IkPVLeftForeArm.jointOrientZ" $pvleftforearm_rz; setAttr "IkPVLeftForeArm.rotateX" 0; setAttr "IkPVLeftForeArm.rotateY" 0; setAttr "IkPVLeftForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvlefthand_rx = `getAttr "IkPVLeftHand.rotateX"`; $pvlefthand_ry = `getAttr "IkPVLeftHand.rotateY"`; float $pvlefthand_rz = `getAttr "IkPVLeftHand.rotateZ"`; setAttr "IkPVLeftHand.jointOrientX" $pvlefthand_rx; setAttr "IkPVLeftHand.jointOrientY" $pvlefthand_ry; setAttr "IkPVLeftHand.jointOrientZ" $pvlefthand_rz; setAttr "IkPVLeftHand.rotateX" 0; setAttr "IkPVLeftHand.rotateY" 0; setAttr "IkPVLeftHand.rotateZ" 0;')
            self.MDG2_mod.doIt()

        if side == -1:
            self.rarmik_grp = armjnt_grp.create("transform", "RightArmIk_grp", self.donttouchjnt_grp)
            self.rarmikcluster_grp = armjnt_grp.create("transform", "RightArmIkCluster_grp", self.splineik_grp)
            self.rupperarmikcluster_grp = armjnt_grp.create("transform", "RightUpperArmIkCluster_grp", self.rarmikcluster_grp)
            self.rupperarmikcluster0_grp = armjnt_grp.create("transform", "RightUpperArmIkCluster0_grp", self.rupperarmikcluster_grp)
            self.rupperarmikcluster1_grp = armjnt_grp.create("transform", "RightUpperArmIkCluster1_grp", self.rupperarmikcluster_grp)
            self.rupperarmikcluster2_grp = armjnt_grp.create("transform", "RightUpperArmIkCluster2_grp", self.rupperarmikcluster_grp)
            self.rlowerarmikcluster_grp = armjnt_grp.create("transform", "RightLowerArmIkCluster_grp", self.rarmikcluster_grp)
            self.rlowerarmikcluster0_grp = armjnt_grp.create("transform", "RightLowerArmIkCluster0_grp", self.rlowerarmikcluster_grp)
            self.rlowerarmikcluster1_grp = armjnt_grp.create("transform", "RightLowerArmIkCluster1_grp", self.rlowerarmikcluster_grp)
            self.rlowerarmikcluster2_grp = armjnt_grp.create("transform", "RightLowerArmIkCluster2_grp", self.rlowerarmikcluster_grp)

            self.jnt_rupperarm = armjnt_grp.create("joint", "RightArm", self.jnt_rshoulder)

            self.jnt_fkrupperarm = armjnt_grp.create("joint", "FkRightArm", self.jnt_rshoulder)

            self.jnt_ikrupperarm = armjnt_grp.create("joint", "IkRightArm", self.jnt_rshoulder)
            jnt_iknofliprupperarm = armjnt_grp.create("joint", "IkNoFlipRightArm", self.jnt_rshoulder)
            jnt_ikpvrupperarm = armjnt_grp.create("joint", "IkPVRightArm", self.jnt_rshoulder)

            hand_loc_ls.add(hand_loc[3])
            rupperarm_loc_obj = hand_loc_ls.getDependNode(0)
            rupperarm_loc_transform1 = om2.MFnTransform(rupperarm_loc_obj)
            loc_rupperarm_localtransform = rupperarm_loc_transform1.transformation()

            rupperarm_loc_path_n = om2.MDagPath()
            rupperarm_loc_path = rupperarm_loc_path_n.getAPathTo(rupperarm_loc_obj)
            rupperarm_loc_transform2 = om2.MFnTransform(rupperarm_loc_path)
            loc_rupperarm_t2 = rupperarm_loc_transform2.translation(om2.MSpace.kWorld)

            loc_rupperarm_r = cmds.xform("loc_R_upperarm", query=True, rotation=True, worldSpace=True)
            radian_rupperarm_rx = (loc_rupperarm_r[0] / 180) * 3.1415
            radian_rupperarm_ry = (loc_rupperarm_r[1] / 180) * 3.1415
            radian_rupperarm_rz = (loc_rupperarm_r[2] / 180) * 3.1415

            jnt_rupperarm_transform = om2.MFnTransform(self.jnt_rupperarm)
            jnt_rupperarm_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_fkrupperarm_transform = om2.MFnTransform(self.jnt_fkrupperarm)
            jnt_fkrupperarm_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_ikrupperarm_transform = om2.MFnTransform(self.jnt_ikrupperarm)
            jnt_ikrupperarm_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_iknofliprupperarm_transform = om2.MFnTransform(jnt_iknofliprupperarm)
            jnt_iknofliprupperarm_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_ikpvrupperarm_transform = om2.MFnTransform(jnt_ikpvrupperarm)
            jnt_ikpvrupperarm_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_relbow = armjnt_grp.create("joint", "RightForeArm", self.jnt_rupperarm)
            jnt_fkrelbow = armjnt_grp.create("joint", "FkRightForeArm", self.jnt_fkrupperarm)
            jnt_ikrelbow = armjnt_grp.create("joint", "IkRightForeArm", self.jnt_ikrupperarm)
            jnt_iknofliprelbow = armjnt_grp.create("joint", "IkNoFlipRightForeArm", jnt_iknofliprupperarm)
            jnt_ikpvrelbow = armjnt_grp.create("joint", "IkPVRightForeArm", jnt_ikpvrupperarm)

            hand_loc_ls.add(hand_loc[4])
            relbow_loc_obj = hand_loc_ls.getDependNode(1)
            relbow_loc_transform1 = om2.MFnTransform(relbow_loc_obj)
            loc_relbow_localtransform = relbow_loc_transform1.transformation()
            loc_relbow_t1 = relbow_loc_transform1.translation(om2.MSpace.kTransform)

            relbowleg_loc_path_n = om2.MDagPath()
            relbowleg_loc_path = relbowleg_loc_path_n.getAPathTo(relbow_loc_obj)
            relbow_loc_transform2 = om2.MFnTransform(relbowleg_loc_path)
            loc_relbow_t2 = relbow_loc_transform2.translation(om2.MSpace.kWorld)

            loc_relbow_r = cmds.xform("loc_R_elbow", query=True, rotation=True, worldSpace=True)
            radian_relbow_rx = (loc_relbow_r[0] / 180) * 3.1415
            radian_relbow_ry = (loc_relbow_r[1] / 180) * 3.1415
            radian_relbow_rz = (loc_relbow_r[2] / 180) * 3.1415

            jnt_relbow_transform = om2.MFnTransform(jnt_relbow)
            jnt_relbow_transform.setTransformation(loc_relbow_localtransform)

            jnt_fkrelbow_transform = om2.MFnTransform(jnt_fkrelbow)
            jnt_fkrelbow_transform.setTransformation(loc_relbow_localtransform)

            jnt_ikrelbow_transform = om2.MFnTransform(jnt_ikrelbow)
            jnt_ikrelbow_transform.setTransformation(loc_relbow_localtransform)

            jnt_iknofliprelbow_transform = om2.MFnTransform(jnt_iknofliprelbow)
            jnt_iknofliprelbow_transform.setTransformation(loc_relbow_localtransform)

            jnt_ikpvrelbow_transform = om2.MFnTransform(jnt_ikpvrelbow)
            jnt_ikpvrelbow_transform.setTransformation(loc_relbow_localtransform)

            self.jnt_rwrist = armjnt_grp.create("joint", "RightHand", jnt_relbow)
            self.jnt_fkrwrist = armjnt_grp.create("joint", "FkRightHand", jnt_fkrelbow)
            self.jnt_ikrwrist = armjnt_grp.create("joint", "IkRightHand", jnt_ikrelbow)
            jnt_iknofliprwrist = armjnt_grp.create("joint", "IkNoFlipRightHand", jnt_iknofliprelbow)
            jnt_ikpvrwrist = armjnt_grp.create("joint", "IkPVRightHand", jnt_ikpvrelbow)

            hand_loc_ls.add(hand_loc[5])
            rwrist_loc_obj = hand_loc_ls.getDependNode(2)
            loc_rwrist_transform1 = om2.MFnTransform(rwrist_loc_obj)
            loc_rwrist_localtransform = loc_rwrist_transform1.transformation()
            loc_rwrist_t1 = loc_rwrist_transform1.translation(om2.MSpace.kTransform)

            rwrist_loc_path_n = om2.MDagPath()
            rwrist_loc_path = rwrist_loc_path_n.getAPathTo(rwrist_loc_obj)
            loc_rwrist_transform2 = om2.MFnTransform(rwrist_loc_path)
            loc_rwrist_t2 = loc_rwrist_transform2.translation(om2.MSpace.kWorld)

            jnt_rwrist_transform = om2.MFnTransform(self.jnt_rwrist)
            jnt_rwrist_transform.setTransformation(loc_rwrist_localtransform)

            jnt_fkrwrist_transform = om2.MFnTransform(self.jnt_fkrwrist)
            jnt_fkrwrist_transform.setTransformation(loc_rwrist_localtransform)

            jnt_ikrwrist_transform = om2.MFnTransform(self.jnt_ikrwrist)
            jnt_ikrwrist_transform.setTransformation(loc_rwrist_localtransform)

            jnt_iknofliprwrist_transform = om2.MFnTransform(jnt_iknofliprwrist)
            jnt_iknofliprwrist_transform.setTransformation(loc_rwrist_localtransform)

            jnt_ikpvrwrist_transform = om2.MFnTransform(jnt_ikpvrwrist)
            jnt_ikpvrwrist_transform.setTransformation(loc_rwrist_localtransform)

            grp_stretchyikrarm = armjnt_grp.create("transform", "IkStretchyRightJointArm_grp", self.splineik_grp)

            grp_stretchyikrarm_transform = om2.MFnTransform(grp_stretchyikrarm)
            grp_stretchyikrarm_transform.setTranslation(self.loc_rshoulder_t, om2.MSpace.kTransform)

            grp_stretchyikrarm_transform.setRotation(om2.MEulerRotation(self.radian_rshoulder_rx, self.radian_rshoulder_ry, self.radian_rshoulder_rz), om2.MSpace.kTransform)

            jnt_stretchyikrupperarm0 = armjnt_grp.create("joint", "IkSplineRightUpperArm0", grp_stretchyikrarm)

            jnt_stretchyikrupperarm0_transform = om2.MFnTransform(jnt_stretchyikrupperarm0)
            jnt_stretchyikrupperarm0_transform.setTransformation(loc_rupperarm_localtransform)

            jnt_stretchyikcvrupperarm0 = armjnt_grp.create("joint", "IkCvSplineRightUpperArm0", self.rupperarmikcluster0_grp)

            grp_stretchyikcvrupperarm_transform = om2.MFnTransform(self.rupperarmikcluster_grp)
            grp_stretchyikcvrupperarm_transform.setTranslation(loc_rupperarm_t2, om2.MSpace.kTransform)

            grp_stretchyikcvrupperarm_transform.setRotation(om2.MEulerRotation(radian_rupperarm_rx, radian_rupperarm_ry, radian_rupperarm_rz), om2.MSpace.kTransform)

            jnt_stretchyikrupperarm1 = armjnt_grp.create("joint", "IkSplineRightUpperArm1", jnt_stretchyikrupperarm0)

            jnt_stretchyikrupperarm1_transform = om2.MFnTransform(jnt_stretchyikrupperarm1)
            jnt_stretchyikrupperarm1_transform_t = jnt_stretchyikrupperarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperarm1_transform_t[0], jnt_stretchyikrupperarm1_transform_t[1], jnt_stretchyikrupperarm1_transform_t[2] = loc_relbow_t1[0]/4, loc_relbow_t1[1]/4, loc_relbow_t1[2]/4
            jnt_stretchyikrupperarm1_transform.setTranslation(jnt_stretchyikrupperarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperarm2 = armjnt_grp.create("joint", "IkSplineRightUpperArm2", jnt_stretchyikrupperarm1)

            jnt_stretchyikrupperarm2_transform = om2.MFnTransform(jnt_stretchyikrupperarm2)
            jnt_stretchyikrupperarm2_transform_t = jnt_stretchyikrupperarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperarm2_transform_t[0], jnt_stretchyikrupperarm2_transform_t[1], jnt_stretchyikrupperarm2_transform_t[2] = (loc_relbow_t1[0]/2)-jnt_stretchyikrupperarm1_transform_t[0], (loc_relbow_t1[1]/2)-jnt_stretchyikrupperarm1_transform_t[1], (loc_relbow_t1[2]/2)-jnt_stretchyikrupperarm1_transform_t[2]
            jnt_stretchyikrupperarm2_transform.setTranslation(jnt_stretchyikrupperarm2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvrupperarm0_transform_t = grp_stretchyikcvrupperarm_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvrupperarm1 = armjnt_grp.create("joint", "IkCvSplineRightUpperArm1", self.rupperarmikcluster1_grp)

            jnt_stretchyikcvrupperarm1grp_transform = om2.MFnTransform(self.rupperarmikcluster1_grp)
            jnt_stretchyikcvrupperleg1grp_transform_t = jnt_stretchyikcvrupperarm1grp_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrupperleg1grp_transform_t[0], jnt_stretchyikcvrupperleg1grp_transform_t[1], jnt_stretchyikcvrupperleg1grp_transform_t[2] = loc_relbow_t1[0]/2, loc_relbow_t1[1]/2, loc_relbow_t1[2]/2
            jnt_stretchyikcvrupperarm1grp_transform.setTranslation(jnt_stretchyikcvrupperleg1grp_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperarm3 = armjnt_grp.create("joint", "IkSplineRightUpperArm3", jnt_stretchyikrupperarm2)

            jnt_stretchyikrupperarm3_transform = om2.MFnTransform(jnt_stretchyikrupperarm3)
            jnt_stretchyikrupperarm3_transform_t = jnt_stretchyikrupperarm3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperarm3_transform_t[0], jnt_stretchyikrupperarm3_transform_t[1], jnt_stretchyikrupperarm3_transform_t[2] = jnt_stretchyikrupperarm2_transform_t[0], jnt_stretchyikrupperarm2_transform_t[1], jnt_stretchyikrupperarm2_transform_t[2]
            jnt_stretchyikrupperarm3_transform.setTranslation(jnt_stretchyikrupperarm3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperarm4 = armjnt_grp.create("joint", "IkSplineRightUpperArm4", jnt_stretchyikrupperarm3)

            jnt_stretchyikrupperarm4_transform = om2.MFnTransform(jnt_stretchyikrupperarm4)
            jnt_stretchyikrupperarm4_transform_t = jnt_stretchyikrupperarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperarm4_transform_t[0], jnt_stretchyikrupperarm4_transform_t[1], jnt_stretchyikrupperarm4_transform_t[2] = jnt_stretchyikrupperarm3_transform_t[0], jnt_stretchyikrupperarm3_transform_t[1], jnt_stretchyikrupperarm3_transform_t[2]
            jnt_stretchyikrupperarm4_transform.setTranslation(jnt_stretchyikrupperarm4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvrupperarm2 = armjnt_grp.create("joint", "IkCvSplineRightUpperArm2", self.rupperarmikcluster2_grp)

            jnt_stretchyikcvrupperarm2_transform = om2.MFnTransform(self.rupperarmikcluster2_grp)
            jnt_stretchyikcvrupperarm2_transform_t = jnt_stretchyikcvrupperarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrupperarm2_transform_t[0], jnt_stretchyikcvrupperarm2_transform_t[1], jnt_stretchyikcvrupperarm2_transform_t[2] = loc_relbow_t1[0], loc_relbow_t1[1], loc_relbow_t1[2]
            jnt_stretchyikcvrupperarm2_transform.setTranslation(jnt_stretchyikcvrupperarm2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm0 = armjnt_grp.create("joint", "IkSplineRightLowerArm0", grp_stretchyikrarm)

            jnt_stretchyikrlowerarm0_transform = om2.MFnTransform(jnt_stretchyikrlowerarm0)
            jnt_stretchyikrlowerarm0_transform.setTranslation(loc_relbow_t2, om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm0_transform.setRotation(om2.MEulerRotation(radian_relbow_rx, radian_relbow_ry, radian_relbow_rz), om2.MSpace.kTransform)

            grp_stretchyikrarm_transformmatrix = grp_stretchyikrarm_transform.transformation()
            grp_stretchyikrarm_inversematrix = grp_stretchyikrarm_transformmatrix.asMatrixInverse()

            jnt_stretchyikrlowerarm0_transformmatrix = jnt_stretchyikrlowerarm0_transform.transformation()
            jnt_stretchyikrlowerarm0_worldmatrix = jnt_stretchyikrlowerarm0_transformmatrix.asMatrix()

            jnt_stretchyikrlowerarm0_localmatrix = jnt_stretchyikrlowerarm0_worldmatrix * grp_stretchyikrarm_inversematrix
            jnt_stretchyikrlowerarm0_transform.setTransformation(om2.MTransformationMatrix(jnt_stretchyikrlowerarm0_localmatrix))

            jnt_stretchyikcvrlowerarm0 = armjnt_grp.create("joint", "IkCvSplineRightLowerArm0", self.rlowerarmikcluster0_grp)

            jnt_stretchyikcvrlowerarm0_transform = om2.MFnTransform(self.rlowerarmikcluster_grp)
            jnt_stretchyikcvrlowerarm0_transform.setTranslation(loc_relbow_t2, om2.MSpace.kTransform)

            jnt_stretchyikcvrlowerarm0_transform.setRotation(om2.MEulerRotation(radian_relbow_rx, radian_relbow_ry, radian_relbow_rz), om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm1 = armjnt_grp.create("joint", "IkSplineRightLowerArm1", jnt_stretchyikrlowerarm0)

            jnt_stretchyikrlowerarm1_transform = om2.MFnTransform(jnt_stretchyikrlowerarm1)
            jnt_stretchyikrlowerarm1_transform_t = jnt_stretchyikrlowerarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerarm1_transform_t[0], jnt_stretchyikrlowerarm1_transform_t[1], jnt_stretchyikrlowerarm1_transform_t[2] = loc_rwrist_t1[0]/4, loc_rwrist_t1[1]/4, loc_rwrist_t1[2]/4
            jnt_stretchyikrlowerarm1_transform.setTranslation(jnt_stretchyikrlowerarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm2 = armjnt_grp.create("joint", "IkSplineRightLowerArm2", jnt_stretchyikrlowerarm1)

            jnt_stretchyikrlowerarm2_transform = om2.MFnTransform(jnt_stretchyikrlowerarm2)
            jnt_stretchyikrlowerarm2_transform_t = jnt_stretchyikrlowerarm2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerarm2_transform_t[0], jnt_stretchyikrlowerarm2_transform_t[1], jnt_stretchyikrlowerarm2_transform_t[2] = (loc_rwrist_t1[0]/2)-jnt_stretchyikrlowerarm1_transform_t[0], (loc_rwrist_t1[1]/2)-jnt_stretchyikrlowerarm1_transform_t[1], (loc_rwrist_t1[2]/2)-jnt_stretchyikrlowerarm1_transform_t[2]
            jnt_stretchyikrlowerarm2_transform.setTranslation(jnt_stretchyikrlowerarm2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvrlowerarm1 = armjnt_grp.create("joint", "IkCvSplineRightLowerArm1", self.rlowerarmikcluster1_grp)

            # jnt_stretchyikcvrlowerarm0_transform_t = jnt_stretchyikcvrlowerarm0_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvrlowerarm1_transform = om2.MFnTransform(self.rlowerarmikcluster1_grp)
            jnt_stretchyikcvrlowerarm1_transform_t = jnt_stretchyikcvrlowerarm1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrlowerarm1_transform_t[0], jnt_stretchyikcvrlowerarm1_transform_t[1], jnt_stretchyikcvrlowerarm1_transform_t[2] = loc_rwrist_t1[0]/2, loc_rwrist_t1[1]/2, loc_rwrist_t1[2]/2
            jnt_stretchyikcvrlowerarm1_transform.setTranslation(jnt_stretchyikcvrlowerarm1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm3 = armjnt_grp.create("joint", "IkSplineRightLowerArm3", jnt_stretchyikrlowerarm2)

            jnt_stretchyikrlowerarm3_transform = om2.MFnTransform(jnt_stretchyikrlowerarm3)
            jnt_stretchyikrlowerarm3_transform_t = jnt_stretchyikrlowerarm3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerarm3_transform_t[0], jnt_stretchyikrlowerarm3_transform_t[1], jnt_stretchyikrlowerarm3_transform_t[2] = jnt_stretchyikrlowerarm2_transform_t[0], jnt_stretchyikrlowerarm2_transform_t[1], jnt_stretchyikrlowerarm2_transform_t[2]
            jnt_stretchyikrlowerarm3_transform.setTranslation(jnt_stretchyikrlowerarm3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerarm4 = armjnt_grp.create("joint", "IkSplineRightLowerArm4", jnt_stretchyikrlowerarm3)

            jnt_stretchyikrlowerarm4_transform = om2.MFnTransform(jnt_stretchyikrlowerarm4)
            jnt_stretchyikrlowerarm4_transform_t = jnt_stretchyikrlowerarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerarm4_transform_t[0], jnt_stretchyikrlowerarm4_transform_t[1], jnt_stretchyikrlowerarm4_transform_t[2] = jnt_stretchyikrlowerarm3_transform_t[0], jnt_stretchyikrlowerarm3_transform_t[1], jnt_stretchyikrlowerarm3_transform_t[2]
            jnt_stretchyikrlowerarm4_transform.setTranslation(jnt_stretchyikrlowerarm4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvrlowerarm2 = armjnt_grp.create("joint", "IkCvSplineRightLowerArm2", self.rlowerarmikcluster2_grp)

            jnt_stretchyikcvrlowerarm4_transform = om2.MFnTransform(self.rlowerarmikcluster2_grp)
            jnt_stretchyikcvrlowerarm4_transform_t = jnt_stretchyikcvrlowerarm4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrlowerarm4_transform_t[0], jnt_stretchyikcvrlowerarm4_transform_t[1], jnt_stretchyikcvrlowerarm4_transform_t[2] = loc_rwrist_t1[0], loc_rwrist_t1[1], loc_rwrist_t1[2]
            jnt_stretchyikcvrlowerarm4_transform.setTranslation(jnt_stretchyikcvrlowerarm4_transform_t, om2.MSpace.kTransform)

            self.MDG2_mod.commandToExecute('float $rightarm_rx = `getAttr "IkRightArm.rotateX"`; $rightarm_ry = `getAttr "IkRightArm.rotateY"`; float $rightarm_rz = `getAttr "IkRightArm.rotateZ"`; setAttr "IkRightArm.jointOrientX" $rightarm_rx; setAttr "IkRightArm.jointOrientY" $rightarm_ry; setAttr "IkRightArm.jointOrientZ" $rightarm_rz; setAttr "IkRightArm.rotateX" 0; setAttr "IkRightArm.rotateY" 0; setAttr "IkRightArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $rightforearm_rx = `getAttr "IkRightForeArm.rotateX"`; $rightforearm_ry = `getAttr "IkRightForeArm.rotateY"`; float $rightforearm_rz = `getAttr "IkRightForeArm.rotateZ"`; setAttr "IkRightForeArm.jointOrientX" $rightforearm_rx; setAttr "IkRightForeArm.jointOrientY" $rightforearm_ry; setAttr "IkRightForeArm.jointOrientZ" $rightforearm_rz; setAttr "IkRightForeArm.rotateX" 0; setAttr "IkRightForeArm.rotateY" 0; setAttr "IkRightForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $righthand_rx = `getAttr "IkRightHand.rotateX"`; $righthand_ry = `getAttr "IkRightHand.rotateY"`; float $righthand_rz = `getAttr "IkRightHand.rotateZ"`; setAttr "IkRightHand.jointOrientX" $righthand_rx; setAttr "IkRightHand.jointOrientY" $righthand_ry; setAttr "IkRightHand.jointOrientZ" $righthand_rz; setAttr "IkRightHand.rotateX" 0; setAttr "IkRightHand.rotateY" 0; setAttr "IkRightHand.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprightarm_rx = `getAttr "IkNoFlipRightArm.rotateX"`; $nofliprightarm_ry = `getAttr "IkNoFlipRightArm.rotateY"`; float $nofliprightarm_rz = `getAttr "IkNoFlipRightArm.rotateZ"`; setAttr "IkNoFlipRightArm.jointOrientX" $nofliprightarm_rx; setAttr "IkNoFlipRightArm.jointOrientY" $nofliprightarm_ry; setAttr "IkNoFlipRightArm.jointOrientZ" $nofliprightarm_rz; setAttr "IkNoFlipRightArm.rotateX" 0; setAttr "IkNoFlipRightArm.rotateY" 0; setAttr "IkNoFlipRightArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprightforearm_rx = `getAttr "IkNoFlipRightForeArm.rotateX"`; $nofliprightforearm_ry = `getAttr "IkNoFlipRightForeArm.rotateY"`; float $nofliprightforearm_rz = `getAttr "IkNoFlipRightForeArm.rotateZ"`; setAttr "IkNoFlipRightForeArm.jointOrientX" $nofliprightforearm_rx; setAttr "IkNoFlipRightForeArm.jointOrientY" $nofliprightforearm_ry; setAttr "IkNoFlipRightForeArm.jointOrientZ" $nofliprightforearm_rz; setAttr "IkNoFlipRightForeArm.rotateX" 0; setAttr "IkNoFlipRightForeArm.rotateY" 0; setAttr "IkNoFlipRightForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprighthand_rx = `getAttr "IkNoFlipRightHand.rotateX"`; $nofliprighthand_ry = `getAttr "IkNoFlipRightHand.rotateY"`; float $nofliprighthand_rz = `getAttr "IkNoFlipRightHand.rotateZ"`; setAttr "IkNoFlipRightHand.jointOrientX" $nofliprighthand_rx; setAttr "IkNoFlipRightHand.jointOrientY" $nofliprighthand_ry; setAttr "IkNoFlipRightHand.jointOrientZ" $nofliprighthand_rz; setAttr "IkNoFlipRightHand.rotateX" 0; setAttr "IkNoFlipRightHand.rotateY" 0; setAttr "IkNoFlipRightHand.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrightarm_rx = `getAttr "IkPVRightArm.rotateX"`; $pvrightarm_ry = `getAttr "IkPVRightArm.rotateY"`; float $pvrightarm_rz = `getAttr "IkPVRightArm.rotateZ"`; setAttr "IkPVRightArm.jointOrientX" $pvrightarm_rx; setAttr "IkPVRightArm.jointOrientY" $pvrightarm_ry; setAttr "IkPVRightArm.jointOrientZ" $pvrightarm_rz; setAttr "IkPVRightArm.rotateX" 0; setAttr "IkPVRightArm.rotateY" 0; setAttr "IkPVRightArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrightforearm_rx = `getAttr "IkPVRightForeArm.rotateX"`; $pvrightforearm_ry = `getAttr "IkPVRightForeArm.rotateY"`; float $pvrightforearm_rz = `getAttr "IkPVRightForeArm.rotateZ"`; setAttr "IkPVRightForeArm.jointOrientX" $pvrightforearm_rx; setAttr "IkPVRightForeArm.jointOrientY" $pvrightforearm_ry; setAttr "IkPVRightForeArm.jointOrientZ" $pvrightforearm_rz; setAttr "IkPVRightForeArm.rotateX" 0; setAttr "IkPVRightForeArm.rotateY" 0; setAttr "IkPVRightForeArm.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrighthand_rx = `getAttr "IkPVRightHand.rotateX"`; $pvrighthand_ry = `getAttr "IkPVRightHand.rotateY"`; float $pvrighthand_rz = `getAttr "IkPVRightHand.rotateZ"`; setAttr "IkPVRightHand.jointOrientX" $pvrighthand_rx; setAttr "IkPVRightHand.jointOrientY" $pvrighthand_ry; setAttr "IkPVRightHand.jointOrientZ" $pvrighthand_rz; setAttr "IkPVRightHand.rotateX" 0; setAttr "IkPVRightHand.rotateY" 0; setAttr "IkPVRightHand.rotateZ" 0;')
            self.MDG2_mod.doIt()

    def createFingerJoints(self):
        for i in range(0, self.lfinger_lst.length()/4):
            self.createFingersJoints(1, i)
            self.createFingersJoints(-1, i)

    def createFingersJoints(self, side, i):
        fingerjnt_grp = om2.MFnDagNode()

        if side == 1:
            if i == 0:
                loc_thumb = "loc_L_finger_0_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_thumb)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerThumb1", self.jnt_lwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerThumb"+str(index+1), self.jnt_finger)

                    obj_lthumb_loc = sl_lst.getDependNode(index)
                    lthumbloc_transform = om2.MFnTransform(obj_lthumb_loc)
                    loc_lthumb_transform = lthumbloc_transform.transformation()

                    jnt_thump_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_thump_transform.transformation()
                    jnt_thump_transform.setTransformation(loc_lthumb_transform)

            if i == 1:
                loc_index = "loc_L_finger_1_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_index)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerIndex1", self.jnt_lwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerIndex"+str(index+1), self.jnt_finger)

                    obj_lfinger_loc = sl_lst.getDependNode(index)
                    lindexloc_transform = om2.MFnTransform(obj_lfinger_loc)
                    loc_lindex_transform = lindexloc_transform.transformation()

                    jnt_index_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_index_transform.transformation()
                    jnt_index_transform.setTransformation(loc_lindex_transform)

            if i == 2:
                loc_middle = "loc_L_finger_2_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_middle)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerMiddle1", self.jnt_lwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerMiddle"+str(index+1), self.jnt_finger)

                    obj_lfinger_loc = sl_lst.getDependNode(index)
                    lmiddleloc_transform = om2.MFnTransform(obj_lfinger_loc)
                    loc_lindex_transform = lmiddleloc_transform.transformation()

                    jnt_middle_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_middle_transform.transformation()
                    jnt_middle_transform.setTransformation(loc_lindex_transform)

            if i == 3:
                loc_ring = "loc_L_finger_3_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_ring)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerRing1", self.jnt_lwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerRing"+str(index+1), self.jnt_finger)

                    obj_lfinger_loc = sl_lst.getDependNode(index)
                    lringloc_transform = om2.MFnTransform(obj_lfinger_loc)
                    loc_lring_transform = lringloc_transform.transformation()

                    jnt_ring_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_ring_transform.transformation()
                    jnt_ring_transform.setTransformation(loc_lring_transform)

            if i == 4:
                loc_pinky = "loc_L_finger_4_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_pinky)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerPinky1", self.jnt_lwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "LeftFingerPinky"+str(index+1), self.jnt_finger)

                    obj_lfinger_loc = sl_lst.getDependNode(index)
                    lpinkyloc_transform = om2.MFnTransform(obj_lfinger_loc)
                    loc_lpinky_transform = lpinkyloc_transform.transformation()

                    jnt_pinky_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_pinky_transform.transformation()
                    jnt_pinky_transform.setTransformation(loc_lpinky_transform)

        if side == -1:
            if i == 0:
                loc_thumb = "loc_R_finger_0_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_thumb)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerThumb1", self.jnt_rwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerThumb"+str(index+1), self.jnt_finger)

                    obj_rthumb_loc = sl_lst.getDependNode(index)
                    rthumbloc_transform = om2.MFnTransform(obj_rthumb_loc)
                    loc_rthumb_transform = rthumbloc_transform.transformation()

                    jnt_thump_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_thump_transform.transformation()
                    jnt_thump_transform.setTransformation(loc_rthumb_transform)

            if i == 1:
                loc_index = "loc_R_finger_1_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_index)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerIndex1", self.jnt_rwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerIndex"+str(index+1), self.jnt_finger)

                    obj_rfinger_loc = sl_lst.getDependNode(index)
                    rindexloc_transform = om2.MFnTransform(obj_rfinger_loc)
                    loc_rindex_transform = rindexloc_transform.transformation()

                    jnt_index_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_index_transform.transformation()
                    jnt_index_transform.setTransformation(loc_rindex_transform)

            if i == 2:
                loc_middle = "loc_R_finger_2_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_middle)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerMiddle1", self.jnt_rwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerMiddle"+str(index+1), self.jnt_finger)

                    obj_rfinger_loc = sl_lst.getDependNode(index)
                    rmiddleloc_transform = om2.MFnTransform(obj_rfinger_loc)
                    loc_rindex_transform = rmiddleloc_transform.transformation()

                    jnt_middle_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_middle_transform.transformation()
                    jnt_middle_transform.setTransformation(loc_rindex_transform)

            if i == 3:
                loc_ring = "loc_R_finger_3_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_ring)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerRing1", self.jnt_rwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerRing"+str(index+1), self.jnt_finger)

                    obj_rfinger_loc = sl_lst.getDependNode(index)
                    rringloc_transform = om2.MFnTransform(obj_rfinger_loc)
                    loc_rring_transform = rringloc_transform.transformation()

                    jnt_ring_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_ring_transform.transformation()
                    jnt_ring_transform.setTransformation(loc_rring_transform)

            if i == 4:
                loc_pinky = "loc_R_finger_4_*"
                sl_lst = om2.MSelectionList()
                sl_lst.add(loc_pinky)

                for index in range(sl_lst.length()):
                    if index == 0:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerPinky1", self.jnt_rwrist)
                    else:
                        self.jnt_finger = fingerjnt_grp.create("joint", "RightFingerPinky"+str(index+1), self.jnt_finger)

                    obj_rfinger_loc = sl_lst.getDependNode(index)
                    rpinkyloc_transform = om2.MFnTransform(obj_rfinger_loc)
                    loc_rpinky_transform = rpinkyloc_transform.transformation()

                    jnt_pinky_transform = om2.MFnTransform(self.jnt_finger)
                    jnt_pinky_transform.transformation()
                    jnt_pinky_transform.setTransformation(loc_rpinky_transform)

    def createLegJoints(self, side):
        legjnt_grp = om2.MFnDagNode()

        leg_loc = ["loc_L_upperleg", "loc_L_knee", "loc_L_football", "loc_L_foot", "loc_L_toe", "loc_R_upperleg", "loc_R_knee", "loc_R_football", "loc_R_foot", "loc_R_toe"]
        leg_loc_ls = om2.MSelectionList()

        if side == 1:
            self.llegik_grp = legjnt_grp.create("transform", "LeftLegIk_grp", self.donttouchjnt_grp)
            self.llegikcluster_grp = legjnt_grp.create("transform", "LeftLegIkCluster_grp", self.splineik_grp)
            self.lupperlegikcluster_grp = legjnt_grp.create("transform", "LeftUpperLegIkCluster_grp", self.llegikcluster_grp)
            self.lupperlegikcluster0_grp = legjnt_grp.create("transform", "LeftUpperLegIkCluster0_grp", self.lupperlegikcluster_grp)
            self.lupperlegikcluster1_grp = legjnt_grp.create("transform", "LeftUpperLegIkCluster1_grp", self.lupperlegikcluster_grp)
            self.lupperlegikcluster2_grp = legjnt_grp.create("transform", "LeftUpperLegIkCluster2_grp", self.lupperlegikcluster_grp)
            self.llowerlegikcluster_grp = legjnt_grp.create("transform", "LeftLowerLegIkCluster_grp", self.llegikcluster_grp)
            self.llowerlegikcluster0_grp = legjnt_grp.create("transform", "LeftLowerLegIkCluster0_grp", self.llowerlegikcluster_grp)
            self.llowerlegikcluster1_grp = legjnt_grp.create("transform", "LeftLowerLegIkCluster1_grp", self.llowerlegikcluster_grp)
            self.llowerlegikcluster2_grp = legjnt_grp.create("transform", "LeftLowerLegIkCluster2_grp", self.llowerlegikcluster_grp)

            grp_lupperleg = legjnt_grp.create("transform", "LeftJointLeg_grp", self.jnt_root_tn)
            jnt_lupperleg = legjnt_grp.create("joint", "LeftUpLeg", grp_lupperleg)

            grp_fklupperleg = legjnt_grp.create("transform", "FkLeftJointLeg_grp", self.jnt_root_tn)
            jnt_fklupperleg = legjnt_grp.create("joint", "FkLeftUpLeg", grp_fklupperleg)

            grp_iklupperleg = legjnt_grp.create("transform", "IkLeftJointLeg_grp", self.jnt_root_tn)
            jnt_iklupperleg = legjnt_grp.create("joint", "IkLeftUpLeg", grp_iklupperleg)
            jnt_iknofliplupperleg = legjnt_grp.create("joint", "IkNoFlipLeftUpLeg", grp_iklupperleg)
            jnt_ikpvlupperleg = legjnt_grp.create("joint", "IkPVLeftUpLeg", grp_iklupperleg)

            leg_loc_ls.add(leg_loc[0])
            lupperleg_loc_obj = leg_loc_ls.getDependNode(0)
            lupperleg_loc_transform = om2.MFnTransform(lupperleg_loc_obj)
            loc_lupperleg_localtransform = lupperleg_loc_transform.transformation()

            lupperleg_loc_path_n = om2.MDagPath()
            lupperleg_loc_path = lupperleg_loc_path_n.getAPathTo(lupperleg_loc_obj)
            loc_lupperleg_worldtransform = om2.MFnTransform(lupperleg_loc_path)
            loc_lupperleg_t2 = loc_lupperleg_worldtransform.translation(om2.MSpace.kWorld)

            loc_lupperleg_r = cmds.xform("loc_L_upperleg", query=True, rotation=True, worldSpace=True)
            radian_lupperleg_rx = (loc_lupperleg_r[0] / 180) * 3.1415
            radian_lupperleg_ry = (loc_lupperleg_r[1] / 180) * 3.1415
            radian_lupperleg_rz = (loc_lupperleg_r[2] / 180) * 3.1415

            jnt_lupperleg_transform = om2.MFnTransform(jnt_lupperleg)
            jnt_lupperleg_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_fklupperleg_transform = om2.MFnTransform(jnt_fklupperleg)
            jnt_fklupperleg_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_iklupperleg_transform = om2.MFnTransform(jnt_iklupperleg)
            jnt_iklupperleg_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_iknofliplupperleg_transform = om2.MFnTransform(jnt_iknofliplupperleg)
            jnt_iknofliplupperleg_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_ikpvlupperleg_transform = om2.MFnTransform(jnt_ikpvlupperleg)
            jnt_ikpvlupperleg_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_lknee = legjnt_grp.create("joint", "LeftLeg", jnt_lupperleg)
            jnt_fklknee = legjnt_grp.create("joint", "FkLeftLeg", jnt_fklupperleg)
            jnt_iklknee = legjnt_grp.create("joint", "IkLeftLeg", jnt_iklupperleg)
            jnt_iknofliplknee = legjnt_grp.create("joint", "IkNoFlipLeftLeg", jnt_iknofliplupperleg)
            jnt_ikpvlknee = legjnt_grp.create("joint", "IkPVLeftLeg", jnt_ikpvlupperleg)

            leg_loc_ls.add(leg_loc[1])
            lknee_loc_obj = leg_loc_ls.getDependNode(1)
            lknee_loc_transform = om2.MFnTransform(lknee_loc_obj)
            loc_lknee_transform1 = lknee_loc_transform.transformation()
            loc_lknee_t1 = loc_lknee_transform1.translation(om2.MSpace.kTransform)

            lknee_loc_path_n = om2.MDagPath()
            lknee_loc_path = lknee_loc_path_n.getAPathTo(lknee_loc_obj)
            loc_lknee_transform2 = om2.MFnTransform(lknee_loc_path)
            loc_lknee_t2 = loc_lknee_transform2.translation(om2.MSpace.kWorld)

            loc_lknee_r = cmds.xform("loc_L_knee", query=True, rotation=True, worldSpace=True)
            radian_lknee_rx = (loc_lknee_r[0] / 180) * 3.1415
            radian_lknee_ry = (loc_lknee_r[1] / 180) * 3.1415
            radian_lknee_rz = (loc_lknee_r[2] / 180) * 3.1415

            jnt_lknee_transform = om2.MFnTransform(jnt_lknee)
            jnt_lknee_transform.setTransformation(loc_lknee_transform1)

            jnt_fklknee_transform = om2.MFnTransform(jnt_fklknee)
            jnt_fklknee_transform.setTransformation(loc_lknee_transform1)

            jnt_iklknee_transform = om2.MFnTransform(jnt_iklknee)
            jnt_iklknee_transform.setTransformation(loc_lknee_transform1)

            jnt_iknofliplknee_transform = om2.MFnTransform(jnt_iknofliplknee)
            jnt_iknofliplknee_transform.setTransformation(loc_lknee_transform1)

            jnt_ikpvlknee_transform = om2.MFnTransform(jnt_ikpvlknee)
            jnt_ikpvlknee_transform.setTransformation(loc_lknee_transform1)

            jnt_lfootball = legjnt_grp.create("joint", "LeftFoot", jnt_lknee)
            jnt_fklfootball = legjnt_grp.create("joint", "FkLeftFoot", jnt_fklknee)
            jnt_iklfootball = legjnt_grp.create("joint", "IkLeftFoot", jnt_iklknee)
            jnt_iknofliplfootball = legjnt_grp.create("joint", "IkNoFlipLeftFoot", jnt_iknofliplknee)
            jnt_ikpvlfootball = legjnt_grp.create("joint", "IkPVLeftFoot", jnt_ikpvlknee)
            lreversefoot_hell = legjnt_grp.create("transform", "LeftReverseFootHeel", self.donttouchjnt_grp)
            lreversefoot_hell_ln = legjnt_grp.create("locator", "LeftReverseFootHeelShape", lreversefoot_hell)

            leg_loc_ls.add(leg_loc[2])
            lfootball_loc_obj = leg_loc_ls.getDependNode(2)
            lfootball_loc_transform = om2.MFnTransform(lfootball_loc_obj)
            loc_lfootball_transform = lfootball_loc_transform.transformation()
            loc_lfootball_t1 = lfootball_loc_transform.translation(om2.MSpace.kTransform)

            lfootball_loc_path_n = om2.MDagPath()
            lfootball_loc_path = lfootball_loc_path_n.getAPathTo(lfootball_loc_obj)
            loc_lfootball_transform2 = om2.MFnTransform(lfootball_loc_path)
            loc_lfootball_t2 = loc_lfootball_transform2.translation(om2.MSpace.kWorld)

            jnt_lfootball_transform = om2.MFnTransform(jnt_lfootball)
            jnt_lfootball_transform.setTransformation(loc_lfootball_transform)

            jnt_fklfootball_transform = om2.MFnTransform(jnt_fklfootball)
            jnt_fklfootball_transform.setTransformation(loc_lfootball_transform)

            jnt_iklfootball_transform = om2.MFnTransform(jnt_iklfootball)
            jnt_iklfootball_transform.setTransformation(loc_lfootball_transform)

            jnt_iknofliplfootball_transform = om2.MFnTransform(jnt_iknofliplfootball)
            jnt_iknofliplfootball_transform.setTransformation(loc_lfootball_transform)

            jnt_ikpvlfootball_transform = om2.MFnTransform(jnt_ikpvlfootball)
            jnt_ikpvlfootball_transform.setTransformation(loc_lfootball_transform)

            lreversefoot_hell_transform = om2.MFnTransform(lreversefoot_hell)
            lreversefoot_hell_transform_t = lreversefoot_hell_transform.translation(om2.MSpace.kTransform)
            lreversefoot_hell_transform_t[0], lreversefoot_hell_transform_t[1], lreversefoot_hell_transform_t[2] = loc_lfootball_t2[0], loc_lfootball_t2[1], -loc_lfootball_t2[2]*10
            lreversefoot_hell_transform.setTranslation(lreversefoot_hell_transform_t, om2.MSpace.kTransform)

            grp_llegik_transform = om2.MFnTransform(self.llegik_grp)
            grp_llegik_transform.setTranslation(loc_lfootball_t2, om2.MSpace.kTransform)

            jnt_lfoot = legjnt_grp.create("joint", "LeftToeBase", jnt_lfootball)
            jnt_fklfoot = legjnt_grp.create("joint", "FkLeftToeBase", jnt_fklfootball)
            jnt_iklfoot = legjnt_grp.create("joint", "IkLeftToeBase", jnt_iklfootball)
            lreversefoot_foot = legjnt_grp.create("transform", "LeftReverseFootToe", self.donttouchjnt_grp)
            lreversefoot_foot_ln = legjnt_grp.create("locator", "LeftReverseFootToeShape", lreversefoot_foot)
            lreverseinner_foot = legjnt_grp.create("transform", "LeftReverseInnerFoot", self.donttouchjnt_grp)
            lreverseinner_foot_ln = legjnt_grp.create("locator", "LeftReverseInnerFootShape", lreverseinner_foot)
            lreverseouter_foot = legjnt_grp.create("transform", "LeftReverseOuterFoot", self.donttouchjnt_grp)
            lreverseouter_foot_ln = legjnt_grp.create("locator", "LeftReverseOuterFootShape", lreverseouter_foot)

            leg_loc_ls.add(leg_loc[3])
            lfoot_loc_obj = leg_loc_ls.getDependNode(3)
            lfoot_loc_transform = om2.MFnTransform(lfoot_loc_obj)
            loc_lfoot_transform = lfoot_loc_transform.transformation()

            lfootleg_loc_path_n = om2.MDagPath()
            lfootleg_loc_path = lfootleg_loc_path_n.getAPathTo(lfoot_loc_obj)
            loc_lfootleg_transform = om2.MFnTransform(lfootleg_loc_path)
            loc_lfootleg_t = loc_lfootleg_transform.translation(om2.MSpace.kWorld)

            jnt_lfoot_transform = om2.MFnTransform(jnt_lfoot)
            jnt_lfoot_transform.setTransformation(loc_lfoot_transform)

            jnt_fklfoot_transform = om2.MFnTransform(jnt_fklfoot)
            jnt_fklfoot_transform.setTransformation(loc_lfoot_transform)

            jnt_iklfoot_transform = om2.MFnTransform(jnt_iklfoot)
            jnt_iklfoot_transform.setTransformation(loc_lfoot_transform)

            lreversefoot_foot_transform = om2.MFnTransform(lreversefoot_foot)
            lreversefoot_foot_transform.setTranslation(loc_lfootleg_t, om2.MSpace.kTransform)

            lreverseinner_foot_transform = om2.MFnTransform(lreverseinner_foot)
            lreverseinner_foot_transform_t = lreverseinner_foot_transform.translation(om2.MSpace.kTransform)
            lreverseinner_foot_transform_t[0], lreverseinner_foot_transform_t[2], lreverseinner_foot_transform_t[2] = loc_lfootleg_t[0]*0.1, loc_lfootleg_t[1], loc_lfootleg_t[2]
            lreverseinner_foot_transform.setTranslation(lreverseinner_foot_transform_t, om2.MSpace.kTransform)

            lreverseouter_foot_transform = om2.MFnTransform(lreverseouter_foot)
            lreverseouter_foot_transform_t = lreverseouter_foot_transform.translation(om2.MSpace.kTransform)
            lreverseouter_foot_transform_t[0], lreverseouter_foot_transform_t[2], lreverseouter_foot_transform_t[2] = loc_lfootleg_t[0]*1.9, loc_lfootleg_t[1], loc_lfootleg_t[2]
            lreverseouter_foot_transform.setTranslation(lreverseouter_foot_transform_t, om2.MSpace.kTransform)

            jnt_ltoe = legjnt_grp.create("joint", "LeftToeEnd", jnt_lfoot)
            jnt_fkltoe = legjnt_grp.create("joint", "FkLeftToeEnd", jnt_fklfoot)
            jnt_ikltoe = legjnt_grp.create("joint", "IkLeftToeEnd", jnt_iklfoot)
            lreversefoot_toe = legjnt_grp.create("transform", "LeftReverseFootToeEnd", self.donttouchjnt_grp)
            lreversefoot_toe_ln = legjnt_grp.create("locator", "LeftReverseFootToeEndShape", lreversefoot_toe)
            lreversefoot_toewiggle = legjnt_grp.create("transform", "LeftReverseFootToeWiggle", lreversefoot_toe)

            leg_loc_ls.add(leg_loc[4])
            ltoe_loc_obj = leg_loc_ls.getDependNode(4)
            ltoe_loc_transform = om2.MFnTransform(ltoe_loc_obj)
            loc_ltoe_transform = ltoe_loc_transform.transformation()

            ltoeleg_loc_path_n = om2.MDagPath()
            ltoeleg_loc_path = ltoeleg_loc_path_n.getAPathTo(ltoe_loc_obj)
            loc_ltoeleg_transform = om2.MFnTransform(ltoeleg_loc_path)
            loc_ltoeleg_t = loc_ltoeleg_transform.translation(om2.MSpace.kWorld)

            jnt_ltoe_transform = om2.MFnTransform(jnt_ltoe)
            jnt_ltoe_transform.setTransformation(loc_ltoe_transform)

            jnt_fkltoe_transform = om2.MFnTransform(jnt_fkltoe)
            jnt_fkltoe_transform.setTransformation(loc_ltoe_transform)

            jnt_ikltoe_transform = om2.MFnTransform(jnt_ikltoe)
            jnt_ikltoe_transform.setTransformation(loc_ltoe_transform)

            lreversefoot_toe_transform = om2.MFnTransform(lreversefoot_toe)
            lreversefoot_toe_transform.setTranslation(loc_ltoeleg_t, om2.MSpace.kTransform)

            lfoottoewiggle_path_n = om2.MDagPath()
            lfoottoewiggle_path = lfoottoewiggle_path_n.getAPathTo(lreversefoot_toewiggle)
            lfoottoewiggle_worldtransform = om2.MFnTransform(lfoottoewiggle_path)
            lfoottoewiggle_worldtransform.setRotatePivot(om2.MPoint(loc_lfootleg_t), om2.MSpace.kWorld, False)

            grp_stretchyiklleg = legjnt_grp.create("transform", "IkStretchyLeftJointLeg_grp", self.splineik_grp)

            grp_stretchyiklleg_transform = om2.MFnTransform(grp_stretchyiklleg)
            grp_stretchyiklleg_transform.setTransformation(self.loc_root_transform)

            jnt_stretchyiklupperleg0 = legjnt_grp.create("joint", "IkSplineLeftUpperLeg0", grp_stretchyiklleg)

            jnt_stretchyiklupperleg0_transform = om2.MFnTransform(jnt_stretchyiklupperleg0)
            jnt_stretchyiklupperleg0_transform.setTransformation(loc_lupperleg_localtransform)

            jnt_stretchyikcvlupperleg0 = legjnt_grp.create("joint", "IkCvSplineLeftUpperLeg0", self.lupperlegikcluster0_grp)

            grp_stretchyikcvlupperleg_transform = om2.MFnTransform(self.lupperlegikcluster_grp)
            grp_stretchyikcvlupperleg_transform.setTranslation(loc_lupperleg_t2, om2.MSpace.kTransform)

            grp_stretchyikcvlupperleg_transform.setRotation(om2.MEulerRotation(radian_lupperleg_rx, radian_lupperleg_ry, radian_lupperleg_rz), om2.MSpace.kTransform)

            jnt_stretchyiklupperleg1 = legjnt_grp.create("joint", "IkSplineLeftUpperLeg1", jnt_stretchyiklupperleg0)

            jnt_stretchyiklupperleg1_transform = om2.MFnTransform(jnt_stretchyiklupperleg1)
            jnt_stretchyiklupperleg1_transform_t = jnt_stretchyiklupperleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperleg1_transform_t[0], jnt_stretchyiklupperleg1_transform_t[1], jnt_stretchyiklupperleg1_transform_t[2] = loc_lknee_t1[0]/4, loc_lknee_t1[1]/4, loc_lknee_t1[2]/4
            jnt_stretchyiklupperleg1_transform.setTranslation(jnt_stretchyiklupperleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperleg2 = legjnt_grp.create("joint", "IkSplineLeftUpperLeg2", jnt_stretchyiklupperleg1)

            jnt_stretchyiklupperleg2_transform = om2.MFnTransform(jnt_stretchyiklupperleg2)
            jnt_stretchyiklupperleg2_transform_t = jnt_stretchyiklupperleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperleg2_transform_t[0], jnt_stretchyiklupperleg2_transform_t[1], jnt_stretchyiklupperleg2_transform_t[2] = (loc_lknee_t1[0]/2)-jnt_stretchyiklupperleg1_transform_t[0], (loc_lknee_t1[1]/2)-jnt_stretchyiklupperleg1_transform_t[1], (loc_lknee_t1[2]/2)-jnt_stretchyiklupperleg1_transform_t[2]
            jnt_stretchyiklupperleg2_transform.setTranslation(jnt_stretchyiklupperleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvlupperleg1 = legjnt_grp.create("joint", "IkCvSplineLeftUpperLeg1", self.lupperlegikcluster1_grp)

            jnt_stretchyikcvlupperleg0_transform_t = grp_stretchyikcvlupperleg_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvlupperleg1grp_transform = om2.MFnTransform(self.lupperlegikcluster1_grp)
            jnt_stretchyikcvlupperleg1grp_transform_t = jnt_stretchyikcvlupperleg1grp_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvlupperleg1grp_transform_t[0], jnt_stretchyikcvlupperleg1grp_transform_t[1], jnt_stretchyikcvlupperleg1grp_transform_t[2] = loc_lknee_t1[0]/2, loc_lknee_t1[1]/2, loc_lknee_t1[2]/2
            jnt_stretchyikcvlupperleg1grp_transform.setTranslation(jnt_stretchyikcvlupperleg1grp_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperleg3 = legjnt_grp.create("joint", "IkSplineLeftUpperLeg3", jnt_stretchyiklupperleg2)

            jnt_stretchyiklupperleg3_transform = om2.MFnTransform(jnt_stretchyiklupperleg3)
            jnt_stretchyiklupperleg3_transform_t = jnt_stretchyiklupperleg3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperleg3_transform_t[0], jnt_stretchyiklupperleg3_transform_t[1], jnt_stretchyiklupperleg3_transform_t[2] = jnt_stretchyiklupperleg2_transform_t[0], jnt_stretchyiklupperleg2_transform_t[1], jnt_stretchyiklupperleg2_transform_t[2]
            jnt_stretchyiklupperleg3_transform.setTranslation(jnt_stretchyiklupperleg3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyiklupperleg4 = legjnt_grp.create("joint", "IkSplineLeftUpperLeg4", jnt_stretchyiklupperleg3)

            jnt_stretchyiklupperleg4_transform = om2.MFnTransform(jnt_stretchyiklupperleg4)
            jnt_stretchyiklupperleg4_transform_t = jnt_stretchyiklupperleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyiklupperleg4_transform_t[0], jnt_stretchyiklupperleg4_transform_t[1], jnt_stretchyiklupperleg4_transform_t[2] = jnt_stretchyiklupperleg3_transform_t[0], jnt_stretchyiklupperleg3_transform_t[1], jnt_stretchyiklupperleg3_transform_t[2]
            jnt_stretchyiklupperleg4_transform.setTranslation(jnt_stretchyiklupperleg4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvlupperleg2 = legjnt_grp.create("joint", "IkCvSplineLeftUpperLeg2", self.lupperlegikcluster2_grp)

            jnt_stretchyikcvlupperleg2_transform = om2.MFnTransform(self.lupperlegikcluster2_grp)
            jnt_stretchyikcvlupperleg2_transform_t = jnt_stretchyikcvlupperleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvlupperleg2_transform_t[0], jnt_stretchyikcvlupperleg2_transform_t[1], jnt_stretchyikcvlupperleg2_transform_t[2] = loc_lknee_t1[0], loc_lknee_t1[1], loc_lknee_t1[2]
            jnt_stretchyikcvlupperleg2_transform.setTranslation(jnt_stretchyikcvlupperleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerleg0 = legjnt_grp.create("joint", "IkSplineLeftLowerLeg0", grp_stretchyiklleg)

            jnt_stretchyikllowerleg0_transform = om2.MFnTransform(jnt_stretchyikllowerleg0)
            jnt_stretchyikllowerleg0_transform.setTranslation(loc_lknee_t2-grp_stretchyiklleg_transform.translation(om2.MSpace.kTransform), om2.MSpace.kTransform)

            jnt_stretchyikllowerleg0_transform.setRotation(om2.MEulerRotation(radian_lknee_rx, radian_lknee_ry, radian_lknee_rz), om2.MSpace.kTransform)

            jnt_stretchyikcvllowerleg0 = legjnt_grp.create("joint", "IkCvSplineLeftLowerLeg0", self.llowerlegikcluster0_grp)

            grp_stretchyikcvllowerleg_transform = om2.MFnTransform(self.llowerlegikcluster_grp)
            grp_stretchyikcvllowerleg_transform.setTranslation(loc_lknee_t2, om2.MSpace.kTransform)

            grp_stretchyikcvllowerleg_transform.setRotation(om2.MEulerRotation(radian_lknee_rx, radian_lknee_ry, radian_lknee_rz), om2.MSpace.kTransform)

            jnt_stretchyikllowerleg1 = legjnt_grp.create("joint", "IkSplineLeftLowerLeg1", jnt_stretchyikllowerleg0)

            jnt_stretchyikllowerleg1_transform = om2.MFnTransform(jnt_stretchyikllowerleg1)
            jnt_stretchyikllowerleg1_transform_t = jnt_stretchyikllowerleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerleg1_transform_t[0], jnt_stretchyikllowerleg1_transform_t[1], jnt_stretchyikllowerleg1_transform_t[2] = loc_lfootball_t1[0]/4, loc_lfootball_t1[1]/4, loc_lfootball_t1[2]/4
            jnt_stretchyikllowerleg1_transform.setTranslation(jnt_stretchyikllowerleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerleg2 = legjnt_grp.create("joint", "IkSplineLeftLowerLeg2", jnt_stretchyikllowerleg1)

            jnt_stretchyikllowerleg2_transform = om2.MFnTransform(jnt_stretchyikllowerleg2)
            jnt_stretchyikllowerleg2_transform_t = jnt_stretchyikllowerleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerleg2_transform_t[0], jnt_stretchyikllowerleg2_transform_t[1], jnt_stretchyikllowerleg2_transform_t[2] = (loc_lfootball_t1[0]/2)-jnt_stretchyikllowerleg1_transform_t[0], (loc_lfootball_t1[1]/2)-jnt_stretchyikllowerleg1_transform_t[1], (loc_lfootball_t1[2]/2)-jnt_stretchyikllowerleg1_transform_t[2]
            jnt_stretchyikllowerleg2_transform.setTranslation(jnt_stretchyikllowerleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvllowerleg1 = legjnt_grp.create("joint", "IkCvSplineLeftLowerLeg1", self.llowerlegikcluster1_grp)

            jnt_stretchyikcvllowerleg0_transform_t = grp_stretchyikcvllowerleg_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvllowerleg1_transform = om2.MFnTransform(self.llowerlegikcluster1_grp)
            jnt_stretchyikcvllowerleg1_transform_t = jnt_stretchyikcvllowerleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvllowerleg1_transform_t[0], jnt_stretchyikcvllowerleg1_transform_t[1], jnt_stretchyikcvllowerleg1_transform_t[2] = loc_lfootball_t1[0]/2, loc_lfootball_t1[1]/2, loc_lfootball_t1[2]/2
            jnt_stretchyikcvllowerleg1_transform.setTranslation(jnt_stretchyikcvllowerleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerleg3 = legjnt_grp.create("joint", "IkSplineLeftLowerLeg3", jnt_stretchyikllowerleg2)

            jnt_stretchyikllowerleg3_transform = om2.MFnTransform(jnt_stretchyikllowerleg3)
            jnt_stretchyikllowerleg3_transform_t = jnt_stretchyikllowerleg3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerleg3_transform_t[0], jnt_stretchyikllowerleg3_transform_t[1], jnt_stretchyikllowerleg3_transform_t[2] = jnt_stretchyikllowerleg2_transform_t[0], jnt_stretchyikllowerleg2_transform_t[1], jnt_stretchyikllowerleg2_transform_t[2]
            jnt_stretchyikllowerleg3_transform.setTranslation(jnt_stretchyikllowerleg3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikllowerleg4 = legjnt_grp.create("joint", "IkSplineLeftLowerLeg4", jnt_stretchyikllowerleg3)

            jnt_stretchyikllowerleg4_transform = om2.MFnTransform(jnt_stretchyikllowerleg4)
            jnt_stretchyikllowerleg4_transform_t = jnt_stretchyikllowerleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikllowerleg4_transform_t[0], jnt_stretchyikllowerleg4_transform_t[1], jnt_stretchyikllowerleg4_transform_t[2] = jnt_stretchyikllowerleg3_transform_t[0], jnt_stretchyikllowerleg3_transform_t[1], jnt_stretchyikllowerleg3_transform_t[2]
            jnt_stretchyikllowerleg4_transform.setTranslation(jnt_stretchyikllowerleg4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvllowerleg2 = legjnt_grp.create("joint", "IkCvSplineLeftLowerLeg2", self.llowerlegikcluster2_grp)

            jnt_stretchyikcvllowerleg4_transform = om2.MFnTransform(self.llowerlegikcluster2_grp)
            jnt_stretchyikcvllowerleg4_transform_t = jnt_stretchyikcvllowerleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvllowerleg4_transform_t[0], jnt_stretchyikcvllowerleg4_transform_t[1], jnt_stretchyikcvllowerleg4_transform_t[2] = loc_lfootball_t1[0], loc_lfootball_t1[1], loc_lfootball_t1[2]
            jnt_stretchyikcvllowerleg4_transform.setTranslation(jnt_stretchyikcvllowerleg4_transform_t, om2.MSpace.kTransform)

            self.MDG2_mod.commandToExecute('float $leftupleg_rx = `getAttr "IkLeftUpLeg.rotateX"`; $leftupleg_ry = `getAttr "IkLeftUpLeg.rotateY"`; float $leftupleg_rz = `getAttr "IkLeftUpLeg.rotateZ"`; setAttr "IkLeftUpLeg.jointOrientX" $leftupleg_rx; setAttr "IkLeftUpLeg.jointOrientY" $leftupleg_ry; setAttr "IkLeftUpLeg.jointOrientZ" $leftupleg_rz; setAttr "IkLeftUpLeg.rotateX" 0; setAttr "IkLeftUpLeg.rotateY" 0; setAttr "IkLeftUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $lefttoebase_rx = `getAttr "IkLeftToeBase.rotateX"`; $lefttoebase_ry = `getAttr "IkLeftToeBase.rotateY"`; float $lefttoebase_rz = `getAttr "IkLeftToeBase.rotateZ"`; setAttr "IkLeftToeBase.jointOrientX" $lefttoebase_rx; setAttr "IkLeftToeBase.jointOrientY" $lefttoebase_ry; setAttr "IkLeftToeBase.jointOrientZ" $lefttoebase_rz; setAttr "IkLeftToeBase.rotateX" 0; setAttr "IkLeftToeBase.rotateY" 0; setAttr "IkLeftToeBase.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $leftleg_rx = `getAttr "IkLeftLeg.rotateX"`; $leftleg_ry = `getAttr "IkLeftLeg.rotateY"`; float $leftleg_rz = `getAttr "IkLeftLeg.rotateZ"`; setAttr "IkLeftLeg.jointOrientX" $leftleg_rx; setAttr "IkLeftLeg.jointOrientY" $leftleg_ry; setAttr "IkLeftLeg.jointOrientZ" $leftleg_rz; setAttr "IkLeftLeg.rotateX" 0; setAttr "IkLeftLeg.rotateY" 0; setAttr "IkLeftLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $leftfoot_rx = `getAttr "IkLeftFoot.rotateX"`; $leftfoot_ry = `getAttr "IkLeftFoot.rotateY"`; float $leftfoot_rz = `getAttr "IkLeftFoot.rotateZ"`; setAttr "IkLeftFoot.jointOrientX" $leftfoot_rx; setAttr "IkLeftFoot.jointOrientY" $leftfoot_ry; setAttr "IkLeftFoot.jointOrientZ" $leftfoot_rz; setAttr "IkLeftFoot.rotateX" 0; setAttr "IkLeftFoot.rotateY" 0; setAttr "IkLeftFoot.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $noflipleftupleg_rx = `getAttr "IkNoFlipLeftUpLeg.rotateX"`; $noflipleftupleg_ry = `getAttr "IkNoFlipLeftUpLeg.rotateY"`; float $noflipleftupleg_rz = `getAttr "IkNoFlipLeftUpLeg.rotateZ"`; setAttr "IkNoFlipLeftUpLeg.jointOrientX" $noflipleftupleg_rx; setAttr "IkNoFlipLeftUpLeg.jointOrientY" $noflipleftupleg_ry; setAttr "IkNoFlipLeftUpLeg.jointOrientZ" $noflipleftupleg_rz; setAttr "IkNoFlipLeftUpLeg.rotateX" 0; setAttr "IkNoFlipLeftUpLeg.rotateY" 0; setAttr "IkNoFlipLeftUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $noflipleftleg_rx = `getAttr "IkNoFlipLeftLeg.rotateX"`; $noflipleftleg_ry = `getAttr "IkNoFlipLeftLeg.rotateY"`; float $noflipleftleg_rz = `getAttr "IkNoFlipLeftLeg.rotateZ"`; setAttr "IkNoFlipLeftLeg.jointOrientX" $noflipleftleg_rx; setAttr "IkNoFlipLeftLeg.jointOrientY" $noflipleftleg_ry; setAttr "IkNoFlipLeftLeg.jointOrientZ" $noflipleftleg_rz; setAttr "IkNoFlipLeftLeg.rotateX" 0; setAttr "IkNoFlipLeftLeg.rotateY" 0; setAttr "IkNoFlipLeftLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $noflipleftfoot_rx = `getAttr "IkNoFlipLeftFoot.rotateX"`; $noflipleftfoot_ry = `getAttr "IkNoFlipLeftFoot.rotateY"`; float $noflipleftfoot_rz = `getAttr "IkNoFlipLeftFoot.rotateZ"`; setAttr "IkNoFlipLeftFoot.jointOrientX" $noflipleftfoot_rx; setAttr "IkNoFlipLeftFoot.jointOrientY" $noflipleftfoot_ry; setAttr "IkNoFlipLeftFoot.jointOrientZ" $noflipleftfoot_rz; setAttr "IkNoFlipLeftFoot.rotateX" 0; setAttr "IkNoFlipLeftFoot.rotateY" 0; setAttr "IkNoFlipLeftFoot.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvleftupleg_rx = `getAttr "IkPVLeftUpLeg.rotateX"`; $pvleftupleg_ry = `getAttr "IkPVLeftUpLeg.rotateY"`; float $pvleftupleg_rz = `getAttr "IkPVLeftUpLeg.rotateZ"`; setAttr "IkPVLeftUpLeg.jointOrientX" $pvleftupleg_rx; setAttr "IkPVLeftUpLeg.jointOrientY" $pvleftupleg_ry; setAttr "IkPVLeftUpLeg.jointOrientZ" $pvleftupleg_rz; setAttr "IkPVLeftUpLeg.rotateX" 0; setAttr "IkPVLeftUpLeg.rotateY" 0; setAttr "IkPVLeftUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvleftleg_rx = `getAttr "IkPVLeftLeg.rotateX"`; $pvleftleg_ry = `getAttr "IkPVLeftLeg.rotateY"`; float $pvleftleg_rz = `getAttr "IkPVLeftLeg.rotateZ"`; setAttr "IkPVLeftLeg.jointOrientX" $pvleftleg_rx; setAttr "IkPVLeftLeg.jointOrientY" $pvleftleg_ry; setAttr "IkPVLeftLeg.jointOrientZ" $pvleftleg_rz; setAttr "IkPVLeftLeg.rotateX" 0; setAttr "IkPVLeftLeg.rotateY" 0; setAttr "IkPVLeftLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvleftfoot_rx = `getAttr "IkPVLeftFoot.rotateX"`; $pvleftfoot_ry = `getAttr "IkPVLeftFoot.rotateY"`; float $pvleftfoot_rz = `getAttr "IkPVLeftFoot.rotateZ"`; setAttr "IkPVLeftFoot.jointOrientX" $pvleftfoot_rx; setAttr "IkPVLeftFoot.jointOrientY" $pvleftfoot_ry; setAttr "IkPVLeftFoot.jointOrientZ" $pvleftfoot_rz; setAttr "IkPVLeftFoot.rotateX" 0; setAttr "IkPVLeftFoot.rotateY" 0; setAttr "IkPVLeftFoot.rotateZ" 0;')
            self.MDG2_mod.doIt()

        if side == -1:
            self.rlegik_grp = legjnt_grp.create("transform", "RightLegIk_grp", self.donttouchjnt_grp)
            self.rlegikcluster_grp = legjnt_grp.create("transform", "RightLegIkCluster_grp", self.splineik_grp)
            self.rupperlegikcluster_grp = legjnt_grp.create("transform", "RightUpperLegIkCluster_grp", self.rlegikcluster_grp)
            self.rupperlegikcluster0_grp = legjnt_grp.create("transform", "RightUpperLegIkCluster0_grp", self.rupperlegikcluster_grp)
            self.rupperlegikcluster1_grp = legjnt_grp.create("transform", "RightUpperLegIkCluster1_grp", self.rupperlegikcluster_grp)
            self.rupperlegikcluster2_grp = legjnt_grp.create("transform", "RightUpperLegIkCluster2_grp", self.rupperlegikcluster_grp)
            self.rlowerlegikcluster_grp = legjnt_grp.create("transform", "RightLowerLegIkCluster_grp", self.rlegikcluster_grp)
            self.rlowerlegikcluster0_grp = legjnt_grp.create("transform", "RightLowerLegIkCluster0_grp", self.rlowerlegikcluster_grp)
            self.rlowerlegikcluster1_grp = legjnt_grp.create("transform", "RightLowerLegIkCluster1_grp", self.rlowerlegikcluster_grp)
            self.rlowerlegikcluster2_grp = legjnt_grp.create("transform", "RightLowerLegIkCluster2_grp", self.rlowerlegikcluster_grp)

            grp_rupperleg = legjnt_grp.create("transform", "RightJointLeg_grp", self.jnt_root_tn)
            jnt_rupperleg = legjnt_grp.create("joint", "RightUpLeg", grp_rupperleg)

            grp_fkrupperleg = legjnt_grp.create("transform", "FkRightJointLeg_grp", self.jnt_root_tn)
            jnt_fkrupperleg = legjnt_grp.create("joint", "FkRightUpLeg", grp_fkrupperleg)

            grp_ikrupperleg = legjnt_grp.create("transform", "IkRightJointLeg_grp", self.jnt_root_tn)
            jnt_ikrupperleg = legjnt_grp.create("joint", "IkRightUpLeg", grp_ikrupperleg)
            jnt_iknofliprupperleg = legjnt_grp.create("joint", "IkNoFlipRightUpLeg", grp_ikrupperleg)
            jnt_ikpvrupperleg = legjnt_grp.create("joint", "IkPVRightUpLeg", grp_ikrupperleg)

            leg_loc_ls.add(leg_loc[5])
            rupperleg_loc_obj = leg_loc_ls.getDependNode(0)
            rupperleg_loc_transform1 = om2.MFnTransform(rupperleg_loc_obj)
            loc_rupperleg_localtransform = rupperleg_loc_transform1.transformation()

            rupperleg_loc_path_n = om2.MDagPath()
            rupperleg_loc_path = rupperleg_loc_path_n.getAPathTo(rupperleg_loc_obj)
            loc_rupperleg_transform2 = om2.MFnTransform(rupperleg_loc_path)
            loc_rupperleg_t2 = loc_rupperleg_transform2.translation(om2.MSpace.kWorld)

            loc_rupperleg_r = cmds.xform("loc_R_upperleg", query=True, rotation=True, worldSpace=True)
            radian_rupperleg_rx = (loc_rupperleg_r[0] / 180) * 3.1415
            radian_rupperleg_ry = (loc_rupperleg_r[1] / 180) * 3.1415
            radian_rupperleg_rz = (loc_rupperleg_r[2] / 180) * 3.1415

            jnt_rupperleg_transform = om2.MFnTransform(jnt_rupperleg)
            jnt_rupperleg_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_fkrupperleg_transform = om2.MFnTransform(jnt_fkrupperleg)
            jnt_fkrupperleg_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_ikrupperleg_transform = om2.MFnTransform(jnt_ikrupperleg)
            jnt_ikrupperleg_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_iknofliprupperleg_transform = om2.MFnTransform(jnt_iknofliprupperleg)
            jnt_iknofliprupperleg_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_ikpvrupperleg_transform = om2.MFnTransform(jnt_ikpvrupperleg)
            jnt_ikpvrupperleg_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_rknee = legjnt_grp.create("joint", "RightLeg", jnt_rupperleg)
            jnt_fkrknee = legjnt_grp.create("joint", "FkRightLeg", jnt_fkrupperleg)
            jnt_ikrknee = legjnt_grp.create("joint", "IkRightLeg", jnt_ikrupperleg)
            jnt_iknofliprknee = legjnt_grp.create("joint", "IkNoFlipRightLeg", jnt_iknofliprupperleg)
            jnt_ikpvrknee = legjnt_grp.create("joint", "IkPVRightLeg", jnt_ikpvrupperleg)

            leg_loc_ls.add(leg_loc[6])
            rknee_loc_obj = leg_loc_ls.getDependNode(1)
            rknee_loc_transform = om2.MFnTransform(rknee_loc_obj)
            loc_rknee_transform1 = rknee_loc_transform.transformation()
            loc_rknee_t1 = loc_rknee_transform1.translation(om2.MSpace.kTransform)

            rkneeleg_loc_path_n = om2.MDagPath()
            rkneeleg_loc_path = rkneeleg_loc_path_n.getAPathTo(rknee_loc_obj)
            loc_rknee_transform2 = om2.MFnTransform(rkneeleg_loc_path)
            loc_rknee_t2 = loc_rknee_transform2.translation(om2.MSpace.kWorld)

            loc_rknee_r = cmds.xform("loc_R_knee", query=True, rotation=True, worldSpace=True)
            radian_rknee_rx = (loc_rknee_r[0] / 180) * 3.1415
            radian_rknee_ry = (loc_rknee_r[1] / 180) * 3.1415
            radian_rknee_rz = (loc_rknee_r[2] / 180) * 3.1415

            jnt_rknee_transform = om2.MFnTransform(jnt_rknee)
            jnt_rknee_transform.setTransformation(loc_rknee_transform1)

            jnt_fkrknee_transform = om2.MFnTransform(jnt_fkrknee)
            jnt_fkrknee_transform.setTransformation(loc_rknee_transform1)

            jnt_ikrknee_transform = om2.MFnTransform(jnt_ikrknee)
            jnt_ikrknee_transform.setTransformation(loc_rknee_transform1)

            jnt_iknofliprknee_transform = om2.MFnTransform(jnt_iknofliprknee)
            jnt_iknofliprknee_transform.setTransformation(loc_rknee_transform1)

            jnt_ikpvrknee_transform = om2.MFnTransform(jnt_ikpvrknee)
            jnt_ikpvrknee_transform.setTransformation(loc_rknee_transform1)

            jnt_rfootball = legjnt_grp.create("joint", "RightFoot", jnt_rknee)
            jnt_fkrfootball = legjnt_grp.create("joint", "FkRightFoot", jnt_fkrknee)
            jnt_ikrfootball = legjnt_grp.create("joint", "IkRightFoot", jnt_ikrknee)
            jnt_iknofliprfootball = legjnt_grp.create("joint", "IkNoFlipRightFoot", jnt_iknofliprknee)
            jnt_ikpvrfootball = legjnt_grp.create("joint", "IkPVRightFoot", jnt_ikpvrknee)
            rreversefoot_hell = legjnt_grp.create("transform", "RightReverseFootHeel", self.donttouchjnt_grp)
            rreversefoot_hell_ln = legjnt_grp.create("locator", "RightReverseFootHeelShape", rreversefoot_hell)

            leg_loc_ls.add(leg_loc[7])
            rfootball_loc_obj = leg_loc_ls.getDependNode(2)
            rfootball_loc_transform1 = om2.MFnTransform(rfootball_loc_obj)
            loc_rfootball_localtransform = rfootball_loc_transform1.transformation()
            loc_rfootball_t1 = rfootball_loc_transform1.translation(om2.MSpace.kTransform)

            rfootball_loc_path_n = om2.MDagPath()
            rfootball_loc_path = rfootball_loc_path_n.getAPathTo(rfootball_loc_obj)
            loc_rfootball_transform2 = om2.MFnTransform(rfootball_loc_path)
            loc_rfootball_t2 = loc_rfootball_transform2.translation(om2.MSpace.kWorld)

            jnt_rfootball_transform = om2.MFnTransform(jnt_rfootball)
            jnt_rfootball_transform.setTransformation(loc_rfootball_localtransform)

            jnt_fkrfootball_transform = om2.MFnTransform(jnt_fkrfootball)
            jnt_fkrfootball_transform.setTransformation(loc_rfootball_localtransform)

            jnt_ikrfootball_transform = om2.MFnTransform(jnt_ikrfootball)
            jnt_ikrfootball_transform.setTransformation(loc_rfootball_localtransform)

            jnt_iknofliprfootball_transform = om2.MFnTransform(jnt_iknofliprfootball)
            jnt_iknofliprfootball_transform.setTransformation(loc_rfootball_localtransform)

            jnt_ikpvrfootball_transform = om2.MFnTransform(jnt_ikpvrfootball)
            jnt_ikpvrfootball_transform.setTransformation(loc_rfootball_localtransform)

            rreversefoot_hell_transform = om2.MFnTransform(rreversefoot_hell)
            rreversefoot_hell_transform_t = rreversefoot_hell_transform.translation(om2.MSpace.kTransform)
            rreversefoot_hell_transform_t[0], rreversefoot_hell_transform_t[1], rreversefoot_hell_transform_t[2] = loc_rfootball_t2[0], loc_rfootball_t2[1], -loc_rfootball_t2[2]*10
            rreversefoot_hell_transform.setTranslation(rreversefoot_hell_transform_t, om2.MSpace.kTransform)

            grp_rlegik_transform = om2.MFnTransform(self.rlegik_grp)
            grp_rlegik_transform.setTranslation(loc_rfootball_t2, om2.MSpace.kTransform)

            jnt_rfoot = legjnt_grp.create("joint", "RightToeBase", jnt_rfootball)
            jnt_fkrfoot = legjnt_grp.create("joint", "FkRightToeBase", jnt_fkrfootball)
            jnt_ikrfoot = legjnt_grp.create("joint", "IkRightToeBase", jnt_ikrfootball)
            rreversefoot_foot = legjnt_grp.create("transform", "RightReverseFootToe", self.donttouchjnt_grp)
            rreversefoot_foot_ln = legjnt_grp.create("locator", "RightReverseFootToeShape", rreversefoot_foot)
            rreverseinner_foot = legjnt_grp.create("transform", "RightReverseInnerFoot", self.donttouchjnt_grp)
            rreverseinner_foot_ln = legjnt_grp.create("locator", "RightReverseInnerFootShape", rreverseinner_foot)
            rreverseouter_foot = legjnt_grp.create("transform", "RightReverseOuterFoot", self.donttouchjnt_grp)
            rreverseouter_foot_ln = legjnt_grp.create("locator", "RightReverseOuterFootShape", rreverseouter_foot)

            leg_loc_ls.add(leg_loc[8])
            rfoot_loc_obj = leg_loc_ls.getDependNode(3)
            rfoot_loc_transform = om2.MFnTransform(rfoot_loc_obj)
            loc_rfoot_transform = rfoot_loc_transform.transformation()

            rfootleg_loc_path_n = om2.MDagPath()
            rfootleg_loc_path = rfootleg_loc_path_n.getAPathTo(rfoot_loc_obj)
            loc_rfootleg_transform = om2.MFnTransform(rfootleg_loc_path)
            loc_rfootleg_t = loc_rfootleg_transform.translation(om2.MSpace.kWorld)

            jnt_rfoot_transform = om2.MFnTransform(jnt_rfoot)
            jnt_rfoot_transform.setTransformation(loc_rfoot_transform)

            jnt_fkrfoot_transform = om2.MFnTransform(jnt_fkrfoot)
            jnt_fkrfoot_transform.setTransformation(loc_rfoot_transform)

            jnt_ikrfoot_transform = om2.MFnTransform(jnt_ikrfoot)
            jnt_ikrfoot_transform.setTransformation(loc_rfoot_transform)

            rreversefoot_foot_transform = om2.MFnTransform(rreversefoot_foot)
            rreversefoot_foot_transform.setTranslation(loc_rfootleg_t, om2.MSpace.kTransform)

            rreverseinner_foot_transform = om2.MFnTransform(rreverseinner_foot)
            rreverseinner_foot_transform_t = rreverseinner_foot_transform.translation(om2.MSpace.kTransform)
            rreverseinner_foot_transform_t[0], rreverseinner_foot_transform_t[2], rreverseinner_foot_transform_t[2] = loc_rfootleg_t[0]*0.1, loc_rfootleg_t[1], loc_rfootleg_t[2]
            rreverseinner_foot_transform.setTranslation(rreverseinner_foot_transform_t, om2.MSpace.kTransform)

            rreverseouter_foot_transform = om2.MFnTransform(rreverseouter_foot)
            rreverseouter_foot_transform_t = rreverseouter_foot_transform.translation(om2.MSpace.kTransform)
            rreverseouter_foot_transform_t[0], rreverseouter_foot_transform_t[2], rreverseouter_foot_transform_t[2] = loc_rfootleg_t[0]*1.9, loc_rfootleg_t[1], loc_rfootleg_t[2]
            rreverseouter_foot_transform.setTranslation(rreverseouter_foot_transform_t, om2.MSpace.kTransform)

            jnt_rtoe = legjnt_grp.create("joint", "RightToeEnd", jnt_rfoot)
            jnt_fkrtoe = legjnt_grp.create("joint", "FkRightToeEnd", jnt_fkrfoot)
            jnt_ikrtoe = legjnt_grp.create("joint", "IkRightToeEnd", jnt_ikrfoot)
            rreversefoot_toe = legjnt_grp.create("transform", "RightReverseFootToeEnd", self.donttouchjnt_grp)
            rreversefoot_toe_ln = legjnt_grp.create("locator", "RightReverseFootToeEndShape", rreversefoot_toe)
            rreversefoot_toewiggle = legjnt_grp.create("transform", "RightReverseFootToeWiggle", rreversefoot_toe)

            leg_loc_ls.add(leg_loc[9])
            rtoe_loc_obj = leg_loc_ls.getDependNode(4)
            rtoe_loc_transform = om2.MFnTransform(rtoe_loc_obj)
            loc_rtoe_transform = rtoe_loc_transform.transformation()

            rtoeleg_loc_path_n = om2.MDagPath()
            rtoeleg_loc_path = rtoeleg_loc_path_n.getAPathTo(rtoe_loc_obj)
            loc_rtoeleg_transform = om2.MFnTransform(rtoeleg_loc_path)
            loc_rtoeleg_t = loc_rtoeleg_transform.translation(om2.MSpace.kWorld)

            jnt_rtoe_transform = om2.MFnTransform(jnt_rtoe)
            jnt_rtoe_transform.setTransformation(loc_rtoe_transform)

            jnt_fkrtoe_transform = om2.MFnTransform(jnt_fkrtoe)
            jnt_fkrtoe_transform.setTransformation(loc_rtoe_transform)

            jnt_ikrtoe_transform = om2.MFnTransform(jnt_ikrtoe)
            jnt_ikrtoe_transform.setTransformation(loc_rtoe_transform)

            rreversefoot_toe_transform = om2.MFnTransform(rreversefoot_toe)
            rreversefoot_toe_transform.setTranslation(loc_rtoeleg_t, om2.MSpace.kTransform)

            rfoottoewiggle_path_n = om2.MDagPath()
            rfoottoewiggle_path = rfoottoewiggle_path_n.getAPathTo(rreversefoot_toewiggle)
            rfoottoewiggle_worldtransform = om2.MFnTransform(rfoottoewiggle_path)
            rfoottoewiggle_worldtransform.setRotatePivot(om2.MPoint(loc_rfootleg_t), om2.MSpace.kWorld, False)

            grp_stretchyikrleg = legjnt_grp.create("transform", "IkStretchyRightJointLeg_grp", self.splineik_grp)

            grp_stretchyikrleg_transform = om2.MFnTransform(grp_stretchyikrleg)
            grp_stretchyikrleg_transform.setTransformation(self.loc_root_transform)

            jnt_stretchyikrupperleg0 = legjnt_grp.create("joint", "IkSplineRightUpperLeg0", grp_stretchyikrleg)

            jnt_stretchyikrupperleg0_transform = om2.MFnTransform(jnt_stretchyikrupperleg0)
            jnt_stretchyikrupperleg0_transform.setTransformation(loc_rupperleg_localtransform)

            jnt_stretchyikcvrupperleg0 = legjnt_grp.create("joint", "IkCvSplineRightUpperLeg0", self.rupperlegikcluster0_grp)

            grp_stretchyikcvrupperleg_transform = om2.MFnTransform(self.rupperlegikcluster_grp)
            grp_stretchyikcvrupperleg_transform.setTranslation(loc_rupperleg_t2, om2.MSpace.kTransform)

            grp_stretchyikcvrupperleg_transform.setRotation(om2.MEulerRotation(radian_rupperleg_rx, radian_rupperleg_ry, radian_rupperleg_rz), om2.MSpace.kTransform)

            jnt_stretchyikrupperleg1 = legjnt_grp.create("joint", "IkSplineRightUpperLeg1", jnt_stretchyikrupperleg0)

            jnt_stretchyikrupperleg1_transform = om2.MFnTransform(jnt_stretchyikrupperleg1)
            jnt_stretchyikrupperleg1_transform_t = jnt_stretchyikrupperleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperleg1_transform_t[0], jnt_stretchyikrupperleg1_transform_t[1], jnt_stretchyikrupperleg1_transform_t[2] = loc_rknee_t1[0]/4, loc_rknee_t1[1]/4, loc_rknee_t1[2]/4
            jnt_stretchyikrupperleg1_transform.setTranslation(jnt_stretchyikrupperleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperleg2 = legjnt_grp.create("joint", "IkSplineRightUpperLeg2", jnt_stretchyikrupperleg1)

            jnt_stretchyikrupperleg2_transform = om2.MFnTransform(jnt_stretchyikrupperleg2)
            jnt_stretchyikrupperleg2_transform_t = jnt_stretchyikrupperleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperleg2_transform_t[0], jnt_stretchyikrupperleg2_transform_t[1], jnt_stretchyikrupperleg2_transform_t[2] = (loc_rknee_t1[0]/2)-jnt_stretchyikrupperleg1_transform_t[0], (loc_rknee_t1[1]/2)-jnt_stretchyikrupperleg1_transform_t[1], (loc_rknee_t1[2]/2)-jnt_stretchyikrupperleg1_transform_t[2]
            jnt_stretchyikrupperleg2_transform.setTranslation(jnt_stretchyikrupperleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvlupperleg1 = legjnt_grp.create("joint", "IkCvSplineRightUpperLeg1", self.rupperlegikcluster1_grp)

            jnt_stretchyikcvrupperleg0_transform_t = grp_stretchyikcvrupperleg_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvrupperleg1grp_transform = om2.MFnTransform(self.rupperlegikcluster1_grp)
            jnt_stretchyikcvrupperleg1grp_transform_t = jnt_stretchyikcvrupperleg1grp_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrupperleg1grp_transform_t[0], jnt_stretchyikcvrupperleg1grp_transform_t[1], jnt_stretchyikcvrupperleg1grp_transform_t[2] = loc_rknee_t1[0]/2, loc_rknee_t1[1]/2, loc_rknee_t1[2]/2
            jnt_stretchyikcvrupperleg1grp_transform.setTranslation(jnt_stretchyikcvrupperleg1grp_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperleg3 = legjnt_grp.create("joint", "IkSplineRightUpperLeg3", jnt_stretchyikrupperleg2)

            jnt_stretchyikrupperleg3_transform = om2.MFnTransform(jnt_stretchyikrupperleg3)
            jnt_stretchyikrupperleg3_transform_t = jnt_stretchyikrupperleg3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperleg3_transform_t[0], jnt_stretchyikrupperleg3_transform_t[1], jnt_stretchyikrupperleg3_transform_t[2] = jnt_stretchyikrupperleg2_transform_t[0], jnt_stretchyikrupperleg2_transform_t[1], jnt_stretchyikrupperleg2_transform_t[2]
            jnt_stretchyikrupperleg3_transform.setTranslation(jnt_stretchyikrupperleg3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrupperleg4 = legjnt_grp.create("joint", "IkSplineRightUpperLeg4", jnt_stretchyikrupperleg3)

            jnt_stretchyikrupperleg4_transform = om2.MFnTransform(jnt_stretchyikrupperleg4)
            jnt_stretchyikrupperleg4_transform_t = jnt_stretchyikrupperleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrupperleg4_transform_t[0], jnt_stretchyikrupperleg4_transform_t[1], jnt_stretchyikrupperleg4_transform_t[2] = jnt_stretchyikrupperleg3_transform_t[0], jnt_stretchyikrupperleg3_transform_t[1], jnt_stretchyikrupperleg3_transform_t[2]
            jnt_stretchyikrupperleg4_transform.setTranslation(jnt_stretchyikrupperleg4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikcvrupperleg2 = legjnt_grp.create("joint", "IkCvSplineRightUpperLeg2", self.rupperlegikcluster2_grp)

            jnt_stretchyikcvrupperleg2_transform = om2.MFnTransform(self.rupperlegikcluster2_grp)
            jnt_stretchyikcvrupperleg2_transform_t = jnt_stretchyikcvrupperleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrupperleg2_transform_t[0], jnt_stretchyikcvrupperleg2_transform_t[1], jnt_stretchyikcvrupperleg2_transform_t[2] = loc_rknee_t1[0], loc_rknee_t1[1], loc_rknee_t1[2]
            jnt_stretchyikcvrupperleg2_transform.setTranslation(jnt_stretchyikcvrupperleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg0 = legjnt_grp.create("joint", "IkSplineRightLowerLeg0", grp_stretchyikrleg)

            jnt_stretchyikrlowerleg0_transform = om2.MFnTransform(jnt_stretchyikrlowerleg0)
            jnt_stretchyikrlowerleg0_transform.setTranslation(loc_rknee_t2-grp_stretchyikrleg_transform.translation(om2.MSpace.kTransform), om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg0_transform.setRotation(om2.MEulerRotation(radian_rknee_rx, radian_rknee_ry, radian_rknee_rz), om2.MSpace.kTransform)

            jnt_stretchyikcvrlowerleg0 = legjnt_grp.create("joint", "IkCvSplineRightLowerLeg0", self.rlowerlegikcluster0_grp)

            grp_stretchyikcvrlowerleg_transform = om2.MFnTransform(self.rlowerlegikcluster_grp)
            grp_stretchyikcvrlowerleg_transform.setTranslation(loc_rknee_t2, om2.MSpace.kTransform)

            grp_stretchyikcvrlowerleg_transform.setRotation(om2.MEulerRotation(radian_rknee_rx, radian_rknee_ry, radian_rknee_rz), om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg1 = legjnt_grp.create("joint", "IkSplineRightLowerLeg1", jnt_stretchyikrlowerleg0)

            jnt_stretchyikrlowerleg1_transform = om2.MFnTransform(jnt_stretchyikrlowerleg1)
            jnt_stretchyikrlowerleg1_transform_t = jnt_stretchyikrlowerleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerleg1_transform_t[0], jnt_stretchyikrlowerleg1_transform_t[1], jnt_stretchyikrlowerleg1_transform_t[2] = loc_rfootball_t1[0]/4, loc_rfootball_t1[1]/4, loc_rfootball_t1[2]/4
            jnt_stretchyikrlowerleg1_transform.setTranslation(jnt_stretchyikrlowerleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg2 = legjnt_grp.create("joint", "IkSplineRightLowerLeg2", jnt_stretchyikrlowerleg1)

            jnt_stretchyikrlowerleg2_transform = om2.MFnTransform(jnt_stretchyikrlowerleg2)
            jnt_stretchyikrlowerleg2_transform_t = jnt_stretchyikrlowerleg2_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerleg2_transform_t[0], jnt_stretchyikrlowerleg2_transform_t[1], jnt_stretchyikrlowerleg2_transform_t[2] = (loc_rfootball_t1[0]/2)-jnt_stretchyikrlowerleg1_transform_t[0], (loc_rfootball_t1[1]/2)-jnt_stretchyikrlowerleg1_transform_t[1], (loc_rfootball_t1[2]/2)-jnt_stretchyikrlowerleg1_transform_t[2]
            jnt_stretchyikrlowerleg2_transform.setTranslation(jnt_stretchyikrlowerleg2_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvrlowerleg1 = legjnt_grp.create("joint", "IkCvSplineRightLowerLeg1", self.rlowerlegikcluster1_grp)

            jnt_stretchyikcvrlowerleg0_transform_t = grp_stretchyikcvrlowerleg_transform.translation(om2.MSpace.kTransform)

            jnt_stretchyikcvrlowerleg1_transform = om2.MFnTransform(self.rlowerlegikcluster1_grp)
            jnt_stretchyikcvrlowerleg1_transform_t = jnt_stretchyikcvrlowerleg1_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrlowerleg1_transform_t[0], jnt_stretchyikcvrlowerleg1_transform_t[1], jnt_stretchyikcvrlowerleg1_transform_t[2] = loc_rfootball_t1[0]/2, loc_rfootball_t1[1]/2, loc_rfootball_t1[2]/2
            jnt_stretchyikcvrlowerleg1_transform.setTranslation(jnt_stretchyikcvrlowerleg1_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg3 = legjnt_grp.create("joint", "IkSplineRightLowerLeg3", jnt_stretchyikrlowerleg2)

            jnt_stretchyikrlowerleg3_transform = om2.MFnTransform(jnt_stretchyikrlowerleg3)
            jnt_stretchyikrlowerleg3_transform_t = jnt_stretchyikrlowerleg3_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerleg3_transform_t[0], jnt_stretchyikrlowerleg3_transform_t[1], jnt_stretchyikrlowerleg3_transform_t[2] = jnt_stretchyikrlowerleg2_transform_t[0], jnt_stretchyikrlowerleg2_transform_t[1], jnt_stretchyikrlowerleg2_transform_t[2]
            jnt_stretchyikrlowerleg3_transform.setTranslation(jnt_stretchyikrlowerleg3_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikrlowerleg4 = legjnt_grp.create("joint", "IkSplineRightLowerLeg4", jnt_stretchyikrlowerleg3)

            jnt_stretchyikrlowerleg4_transform = om2.MFnTransform(jnt_stretchyikrlowerleg4)
            jnt_stretchyikrlowerleg4_transform_t = jnt_stretchyikrlowerleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikrlowerleg4_transform_t[0], jnt_stretchyikrlowerleg4_transform_t[1], jnt_stretchyikrlowerleg4_transform_t[2] = jnt_stretchyikrlowerleg3_transform_t[0], jnt_stretchyikrlowerleg3_transform_t[1], jnt_stretchyikrlowerleg3_transform_t[2]
            jnt_stretchyikrlowerleg4_transform.setTranslation(jnt_stretchyikrlowerleg4_transform_t, om2.MSpace.kTransform)

            jnt_stretchyikvcvrlowerleg2 = legjnt_grp.create("joint", "IkCvSplineRightLowerLeg2", self.rlowerlegikcluster2_grp)

            jnt_stretchyikcvrlowerleg4_transform = om2.MFnTransform(self.rlowerlegikcluster2_grp)
            jnt_stretchyikcvrlowerleg4_transform_t = jnt_stretchyikcvrlowerleg4_transform.translation(om2.MSpace.kTransform)
            jnt_stretchyikcvrlowerleg4_transform_t[0], jnt_stretchyikcvrlowerleg4_transform_t[1], jnt_stretchyikcvrlowerleg4_transform_t[2] = loc_rfootball_t1[0], loc_rfootball_t1[1], loc_rfootball_t1[2]
            jnt_stretchyikcvrlowerleg4_transform.setTranslation(jnt_stretchyikcvrlowerleg4_transform_t, om2.MSpace.kTransform)

            self.MDG2_mod.commandToExecute('float $rightupleg_rx = `getAttr "IkRightUpLeg.rotateX"`; $rightupleg_ry = `getAttr "IkRightUpLeg.rotateY"`; float $rightupleg_rz = `getAttr "IkRightUpLeg.rotateZ"`; setAttr "IkRightUpLeg.jointOrientX" $rightupleg_rx; setAttr "IkRightUpLeg.jointOrientY" $rightupleg_ry; setAttr "IkRightUpLeg.jointOrientZ" $rightupleg_rz; setAttr "IkRightUpLeg.rotateX" 0; setAttr "IkRightUpLeg.rotateY" 0; setAttr "IkRightUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $righttoebase_rx = `getAttr "IkRightToeBase.rotateX"`; $righttoebase_ry = `getAttr "IkRightToeBase.rotateY"`; float $righttoebase_rz = `getAttr "IkRightToeBase.rotateZ"`; setAttr "IkRightToeBase.jointOrientX" $righttoebase_rx; setAttr "IkRightToeBase.jointOrientY" $righttoebase_ry; setAttr "IkRightToeBase.jointOrientZ" $righttoebase_rz; setAttr "IkRightToeBase.rotateX" 0; setAttr "IkRightToeBase.rotateY" 0; setAttr "IkRightToeBase.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $rightleg_rx = `getAttr "IkRightLeg.rotateX"`; $rightleg_ry = `getAttr "IkRightLeg.rotateY"`; float $rightleg_rz = `getAttr "IkRightLeg.rotateZ"`; setAttr "IkRightLeg.jointOrientX" $rightleg_rx; setAttr "IkRightLeg.jointOrientY" $rightleg_ry; setAttr "IkRightLeg.jointOrientZ" $rightleg_rz; setAttr "IkRightLeg.rotateX" 0; setAttr "IkRightLeg.rotateY" 0; setAttr "IkRightLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $rightfoot_rx = `getAttr "IkRightFoot.rotateX"`; $rightfoot_ry = `getAttr "IkRightFoot.rotateY"`; float $rightfoot_rz = `getAttr "IkRightFoot.rotateZ"`; setAttr "IkRightFoot.jointOrientX" $rightfoot_rx; setAttr "IkRightFoot.jointOrientY" $rightfoot_ry; setAttr "IkRightFoot.jointOrientZ" $rightfoot_rz; setAttr "IkRightFoot.rotateX" 0; setAttr "IkRightFoot.rotateY" 0; setAttr "IkRightFoot.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprightupleg_rx = `getAttr "IkNoFlipRightUpLeg.rotateX"`; $nofliprightupleg_ry = `getAttr "IkNoFlipRightUpLeg.rotateY"`; float $nofliprightupleg_rz = `getAttr "IkNoFlipRightUpLeg.rotateZ"`; setAttr "IkNoFlipRightUpLeg.jointOrientX" $nofliprightupleg_rx; setAttr "IkNoFlipRightUpLeg.jointOrientY" $nofliprightupleg_ry; setAttr "IkNoFlipRightUpLeg.jointOrientZ" $nofliprightupleg_rz; setAttr "IkNoFlipRightUpLeg.rotateX" 0; setAttr "IkNoFlipRightUpLeg.rotateY" 0; setAttr "IkNoFlipRightUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprightleg_rx = `getAttr "IkNoFlipRightLeg.rotateX"`; $nofliprightleg_ry = `getAttr "IkNoFlipRightLeg.rotateY"`; float $nofliprightleg_rz = `getAttr "IkNoFlipRightLeg.rotateZ"`; setAttr "IkNoFlipRightLeg.jointOrientX" $nofliprightleg_rx; setAttr "IkNoFlipRightLeg.jointOrientY" $nofliprightleg_ry; setAttr "IkNoFlipRightLeg.jointOrientZ" $nofliprightleg_rz; setAttr "IkNoFlipRightLeg.rotateX" 0; setAttr "IkNoFlipRightLeg.rotateY" 0; setAttr "IkNoFlipRightLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $nofliprightfoot_rx = `getAttr "IkNoFlipRightFoot.rotateX"`; $nofliprightfoot_ry = `getAttr "IkNoFlipRightFoot.rotateY"`; float $nofliprightfoot_rz = `getAttr "IkNoFlipRightFoot.rotateZ"`; setAttr "IkNoFlipRightFoot.jointOrientX" $nofliprightfoot_rx; setAttr "IkNoFlipRightFoot.jointOrientY" $nofliprightfoot_ry; setAttr "IkNoFlipRightFoot.jointOrientZ" $nofliprightfoot_rz; setAttr "IkNoFlipRightFoot.rotateX" 0; setAttr "IkNoFlipRightFoot.rotateY" 0; setAttr "IkNoFlipRightFoot.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrightupleg_rx = `getAttr "IkPVRightUpLeg.rotateX"`; $pvrightupleg_ry = `getAttr "IkPVRightUpLeg.rotateY"`; float $pvrightupleg_rz = `getAttr "IkPVRightUpLeg.rotateZ"`; setAttr "IkPVRightUpLeg.jointOrientX" $pvrightupleg_rx; setAttr "IkPVRightUpLeg.jointOrientY" $pvrightupleg_ry; setAttr "IkPVRightUpLeg.jointOrientZ" $pvrightupleg_rz; setAttr "IkPVRightUpLeg.rotateX" 0; setAttr "IkPVRightUpLeg.rotateY" 0; setAttr "IkPVRightUpLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrightleg_rx = `getAttr "IkPVRightLeg.rotateX"`; $pvrightleg_ry = `getAttr "IkPVRightLeg.rotateY"`; float $pvrightleg_rz = `getAttr "IkPVRightLeg.rotateZ"`; setAttr "IkPVRightLeg.jointOrientX" $pvrightleg_rx; setAttr "IkPVRightLeg.jointOrientY" $pvrightleg_ry; setAttr "IkPVRightLeg.jointOrientZ" $pvrightleg_rz; setAttr "IkPVRightLeg.rotateX" 0; setAttr "IkPVRightLeg.rotateY" 0; setAttr "IkPVRightLeg.rotateZ" 0;')
            self.MDG2_mod.commandToExecute('float $pvrightfoot_rx = `getAttr "IkPVRightFoot.rotateX"`; $pvrightfoot_ry = `getAttr "IkPVRightFoot.rotateY"`; float $pvrightfoot_rz = `getAttr "IkPVRightFoot.rotateZ"`; setAttr "IkPVRightFoot.jointOrientX" $pvrightfoot_rx; setAttr "IkPVRightFoot.jointOrientY" $pvrightfoot_ry; setAttr "IkPVRightFoot.jointOrientZ" $pvrightfoot_rz; setAttr "IkPVRightFoot.rotateX" 0; setAttr "IkPVRightFoot.rotateY" 0; setAttr "IkPVRightFoot.rotateZ" 0;')
            self.MDG2_mod.doIt()


    # def setJointOrientation(self):

        # hipjoint_sl_lst = om2.MSelectionList()
        # hipjoint_sl_lst.add("Root")
        #
        # ikspinejoint_sl_lst = om2.MSelectionList()
        # ikspinejoint_sl_lst.add("IkSpine*")
        #
        # armupperikjoint_sl_lst = om2.MSelectionList()
        # armupperikjoint_sl_lst.add("IkSplineLeftUpperArm*")
        # armupperikjoint_sl_lst.add("IkSplineRightUpperArm*")
        #
        # armlowerikjoint_sl_lst = om2.MSelectionList()
        # armlowerikjoint_sl_lst.add("IkSplineLeftLowerArm*")
        # armlowerikjoint_sl_lst.add("IkSplineRightLowerArm*")
        #
        # legupperikjoint_sl_lst = om2.MSelectionList()
        # legupperikjoint_sl_lst.add("IkSplineLeftUpperLeg*")
        # legupperikjoint_sl_lst.add("IkSplineRightUpperLeg*")
        #
        # leglowerikjoint_sl_lst = om2.MSelectionList()
        # leglowerikjoint_sl_lst.add("IkSplineLeftLowerLeg*")
        # leglowerikjoint_sl_lst.add("IkSplineRightLowerLeg*")
        #
        # spineikjoint_sl_lst = om2.MSelectionList()
        # spineikjoint_sl_lst.add("IkCvHip")
        # spineikjoint_sl_lst.add("IkCvSpine")
        #
        # for index in range(armupperikjoint_sl_lst.length()):
        #     jnt_active_obj = armupperikjoint_sl_lst.getDependNode(index)
        #     if jnt_active_obj.hasFn(om2.MFn.kJoint):
        #         jnt_active_string = armupperikjoint_sl_lst.getSelectionStrings(index)
        #         self.MDG2_mod.commandToExecute('joint -e -orientJoint yzx -secondaryAxisOrient ydown -zeroScaleOrient {0}'.format(str(jnt_active_string)[3:][:-3]))
        #
        # for index in range(armlowerikjoint_sl_lst.length()):
        #     jnt_active_obj = armlowerikjoint_sl_lst.getDependNode(index)
        #     if jnt_active_obj.hasFn(om2.MFn.kJoint):
        #         jnt_active_string = armlowerikjoint_sl_lst.getSelectionStrings(index)
        #         self.MDG2_mod.commandToExecute('joint -e -orientJoint yzx -secondaryAxisOrient ydown -zeroScaleOrient {0}'.format(str(jnt_active_string)[3:][:-3]))
        #
        # for index in range(legupperikjoint_sl_lst.length()):
        #     jnt_active_obj = legupperikjoint_sl_lst.getDependNode(index)
        #     if jnt_active_obj.hasFn(om2.MFn.kJoint):
        #         jnt_active_string = legupperikjoint_sl_lst.getSelectionStrings(index)
        #         self.MDG2_mod.commandToExecute('joint -e -orientJoint yzx -secondaryAxisOrient yup -zeroScaleOrient {0}'.format(str(jnt_active_string)[3:][:-3]))
        #
        # for index in range(leglowerikjoint_sl_lst.length()):
        #     jnt_active_obj = leglowerikjoint_sl_lst.getDependNode(index)
        #     if jnt_active_obj.hasFn(om2.MFn.kJoint):
        #         jnt_active_string = leglowerikjoint_sl_lst.getSelectionStrings(index)
        #         self.MDG2_mod.commandToExecute('joint -e -orientJoint yzx -secondaryAxisOrient ydown -zeroScaleOrient {0}'.format(str(jnt_active_string)[3:][:-3]))
        #
        # leftshoulder_r = cmds.xform("LeftShoulder", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("IkSplineLeftUpperArm0", world=True)
        #     cmds.parent("IkSplineLeftLowerArm0", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("IkStretchyLeftJointArm_grp.rotateX", leftshoulder_r[0])
        # cmds.setAttr("IkStretchyLeftJointArm_grp.rotateY", leftshoulder_r[1])
        # cmds.setAttr("IkStretchyLeftJointArm_grp.rotateZ", leftshoulder_r[2])
        #
        # try:
        #     cmds.parent("IkSplineLeftUpperArm0", "IkStretchyLeftJointArm_grp")
        #     cmds.parent("IkSplineLeftLowerArm0", "IkStretchyLeftJointArm_grp")
        # except:
        #     pass
        #
        # leftarm_r = cmds.xform("LeftArm", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("LeftUpperArmIkCluster1_grp", world=True)
        #     cmds.parent("LeftUpperArmIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("LeftUpperArmIkCluster_grp.rotateX", leftarm_r[0])
        # cmds.setAttr("LeftUpperArmIkCluster_grp.rotateY", leftarm_r[1])
        # cmds.setAttr("LeftUpperArmIkCluster_grp.rotateZ", leftarm_r[2])
        #
        # try:
        #     cmds.parent("LeftUpperArmIkCluster1_grp", "LeftUpperArmIkCluster_grp")
        #     cmds.parent("LeftUpperArmIkCluster2_grp", "LeftUpperArmIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("LeftUpperArmIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("LeftUpperArmIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("LeftUpperArmIkCluster1_grp.rotateZ", 0)
        #
        # leftforearm_rx = cmds.getAttr("LeftForeArm.jointOrientX")
        # leftforearm_ry = cmds.getAttr("LeftForeArm.jointOrientY")
        # leftforearm_rz = cmds.getAttr("LeftForeArm.jointOrientZ")
        # cmds.setAttr("LeftUpperArmIkCluster2_grp.rotateX", leftforearm_rx)
        # cmds.setAttr("LeftUpperArmIkCluster2_grp.rotateY", leftforearm_ry)
        # cmds.setAttr("LeftUpperArmIkCluster2_grp.rotateZ", leftforearm_rz)
        # cmds.setAttr("IkSplineLeftUpperArm4.jointOrientX", 0)
        # cmds.setAttr("IkSplineLeftUpperArm4.jointOrientY", 0)
        # cmds.setAttr("IkSplineLeftUpperArm4.jointOrientZ", 0)
        #
        # leftforearm_r = cmds.xform("LeftForeArm", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("LeftLowerArmIkCluster1_grp", world=True)
        #     cmds.parent("LeftLowerArmIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("LeftLowerArmIkCluster_grp.rotateX", leftforearm_r[0])
        # cmds.setAttr("LeftLowerArmIkCluster_grp.rotateY", leftforearm_r[1])
        # cmds.setAttr("LeftLowerArmIkCluster_grp.rotateZ", leftforearm_r[2])
        #
        # try:
        #     cmds.parent("LeftLowerArmIkCluster1_grp", "LeftLowerArmIkCluster_grp")
        #     cmds.parent("LeftLowerArmIkCluster2_grp", "LeftLowerArmIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("LeftLowerArmIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("LeftLowerArmIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("LeftLowerArmIkCluster1_grp.rotateZ", 0)
        #
        # lefthand_rx = cmds.getAttr("LeftHand.jointOrientX")
        # lefthand_ry = cmds.getAttr("LeftHand.jointOrientY")
        # lefthand_rz = cmds.getAttr("LeftHand.jointOrientZ")
        # cmds.setAttr("LeftLowerArmIkCluster2_grp.rotateX", lefthand_rx)
        # cmds.setAttr("LeftLowerArmIkCluster2_grp.rotateY", lefthand_ry)
        # cmds.setAttr("LeftLowerArmIkCluster2_grp.rotateZ", lefthand_rz)
        # cmds.setAttr("IkNoFlipLeftHand.jointOrientX", lefthand_rx)
        # cmds.setAttr("IkNoFlipLeftHand.jointOrientY", lefthand_ry)
        # cmds.setAttr("IkNoFlipLeftHand.jointOrientZ", lefthand_rz)
        # cmds.setAttr("IkPVLeftHand.jointOrientX", lefthand_rx)
        # cmds.setAttr("IkPVLeftHand.jointOrientY", lefthand_ry)
        # cmds.setAttr("IkPVLeftHand.jointOrientZ", lefthand_rz)
        # cmds.setAttr("IkSplineLeftLowerArm4.jointOrientX", 0)
        # cmds.setAttr("IkSplineLeftLowerArm4.jointOrientY", 0)
        # cmds.setAttr("IkSplineLeftLowerArm4.jointOrientZ", 0)
        #
        # leftupperlegikcluster_r = cmds.xform("LeftUpLeg", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("LeftUpperLegIkCluster1_grp", world=True)
        #     cmds.parent("LeftUpperLegIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("LeftUpperLegIkCluster_grp.rotateX", leftupperlegikcluster_r[0])
        # cmds.setAttr("LeftUpperLegIkCluster_grp.rotateY", leftupperlegikcluster_r[1])
        # cmds.setAttr("LeftUpperLegIkCluster_grp.rotateZ", leftupperlegikcluster_r[2])
        #
        # try:
        #     cmds.parent("LeftUpperLegIkCluster1_grp", "LeftUpperLegIkCluster_grp")
        #     cmds.parent("LeftUpperLegIkCluster2_grp", "LeftUpperLegIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("LeftUpperLegIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("LeftUpperLegIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("LeftUpperLegIkCluster1_grp.rotateZ", 0)
        #
        # ikcvsplineleftupperleg2_rx = cmds.getAttr("LeftLeg.jointOrientX")
        # ikcvsplineleftupperleg2_ry = cmds.getAttr("LeftLeg.jointOrientY")
        # ikcvsplineleftupperleg2_rz = cmds.getAttr("LeftLeg.jointOrientZ")
        # cmds.setAttr("LeftUpperLegIkCluster2_grp.rotateX", ikcvsplineleftupperleg2_rx)
        # cmds.setAttr("LeftUpperLegIkCluster2_grp.rotateY", ikcvsplineleftupperleg2_ry)
        # cmds.setAttr("LeftUpperLegIkCluster2_grp.rotateZ", ikcvsplineleftupperleg2_rz)
        # cmds.setAttr("IkSplineLeftUpperLeg4.jointOrientX", 0)
        # cmds.setAttr("IkSplineLeftUpperLeg4.jointOrientY", 0)
        # cmds.setAttr("IkSplineLeftUpperLeg4.jointOrientZ", 0)
        #
        # leftlowerlegikcluster_r = cmds.xform("LeftLeg", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("LeftLowerLegIkCluster1_grp", world=True)
        #     cmds.parent("LeftLowerLegIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("LeftLowerLegIkCluster_grp.rotateX", leftlowerlegikcluster_r[0])
        # cmds.setAttr("LeftLowerLegIkCluster_grp.rotateY", leftlowerlegikcluster_r[1])
        # cmds.setAttr("LeftLowerLegIkCluster_grp.rotateZ", leftlowerlegikcluster_r[2])
        #
        # try:
        #     cmds.parent("LeftLowerLegIkCluster1_grp", "LeftLowerLegIkCluster_grp")
        #     cmds.parent("LeftLowerLegIkCluster2_grp", "LeftLowerLegIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("LeftLowerLegIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("LeftLowerLegIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("LeftLowerLegIkCluster1_grp.rotateZ", 0)
        #
        # ikcvsplineleftlowerleg2_rx = cmds.getAttr("LeftFoot.jointOrientX")
        # ikcvsplineleftlowerleg2_ry = cmds.getAttr("LeftFoot.jointOrientY")
        # ikcvsplineleftlowerleg2_rz = cmds.getAttr("LeftFoot.jointOrientZ")
        # cmds.setAttr("LeftLowerLegIkCluster2_grp.rotateX", ikcvsplineleftlowerleg2_rx)
        # cmds.setAttr("LeftLowerLegIkCluster2_grp.rotateY", ikcvsplineleftlowerleg2_ry)
        # cmds.setAttr("LeftLowerLegIkCluster2_grp.rotateZ", ikcvsplineleftlowerleg2_rz)
        # cmds.setAttr("IkNoFlipLeftFoot.jointOrientX", ikcvsplineleftlowerleg2_rx)
        # cmds.setAttr("IkNoFlipLeftFoot.jointOrientY", ikcvsplineleftlowerleg2_ry)
        # cmds.setAttr("IkNoFlipLeftFoot.jointOrientZ", ikcvsplineleftlowerleg2_rz)
        # cmds.setAttr("IkPVLeftFoot.jointOrientX", ikcvsplineleftlowerleg2_rx)
        # cmds.setAttr("IkPVLeftFoot.jointOrientY", ikcvsplineleftlowerleg2_ry)
        # cmds.setAttr("IkPVLeftFoot.jointOrientZ", ikcvsplineleftlowerleg2_rz)
        # cmds.setAttr("IkSplineLeftLowerLeg4.jointOrientX", 0)
        # cmds.setAttr("IkSplineLeftLowerLeg4.jointOrientY", 0)
        # cmds.setAttr("IkSplineLeftLowerLeg4.jointOrientZ", 0)
        #
        # rightshoulder_r = cmds.xform("RightShoulder", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("IkSplineRightUpperArm0", world=True)
        #     cmds.parent("IkSplineRightLowerArm0", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("IkStretchyRightJointArm_grp.rotateX", rightshoulder_r[0])
        # cmds.setAttr("IkStretchyRightJointArm_grp.rotateY", rightshoulder_r[1])
        # cmds.setAttr("IkStretchyRightJointArm_grp.rotateZ", rightshoulder_r[2])
        #
        # try:
        #     cmds.parent("IkSplineRightUpperArm0", "IkStretchyRightJointArm_grp")
        #     cmds.parent("IkSplineRightLowerArm0", "IkStretchyRightJointArm_grp")
        # except:
        #     pass
        #
        # rightarm_r = cmds.xform("RightArm", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("RightUpperArmIkCluster1_grp", world=True)
        #     cmds.parent("RightUpperArmIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("RightUpperArmIkCluster_grp.rotateX", rightarm_r[0])
        # cmds.setAttr("RightUpperArmIkCluster_grp.rotateY", rightarm_r[1])
        # cmds.setAttr("RightUpperArmIkCluster_grp.rotateZ", rightarm_r[2])
        #
        # try:
        #     cmds.parent("RightUpperArmIkCluster1_grp", "RightUpperArmIkCluster_grp")
        #     cmds.parent("RightUpperArmIkCluster2_grp", "RightUpperArmIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("RightUpperArmIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("RightUpperArmIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("RightUpperArmIkCluster1_grp.rotateZ", 0)
        #
        # rightforearm_rx = cmds.getAttr("RightForeArm.jointOrientX")
        # rightforearm_ry = cmds.getAttr("RightForeArm.jointOrientY")
        # rightforearm_rz = cmds.getAttr("RightForeArm.jointOrientZ")
        # cmds.setAttr("RightUpperArmIkCluster2_grp.rotateX", rightforearm_rx)
        # cmds.setAttr("RightUpperArmIkCluster2_grp.rotateY", rightforearm_ry)
        # cmds.setAttr("RightUpperArmIkCluster2_grp.rotateZ", rightforearm_rz)
        # cmds.setAttr("IkSplineRightUpperArm4.jointOrientX", 0)
        # cmds.setAttr("IkSplineRightUpperArm4.jointOrientY", 0)
        # cmds.setAttr("IkSplineRightUpperArm4.jointOrientZ", 0)
        #
        # rightforearm_r = cmds.xform("RightForeArm", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("RightLowerArmIkCluster1_grp", world=True)
        #     cmds.parent("RightLowerArmIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("RightLowerArmIkCluster_grp.rotateX", rightforearm_r[0])
        # cmds.setAttr("RightLowerArmIkCluster_grp.rotateY", rightforearm_r[1])
        # cmds.setAttr("RightLowerArmIkCluster_grp.rotateZ", rightforearm_r[2])
        #
        # try:
        #     cmds.parent("RightLowerArmIkCluster1_grp", "RightLowerArmIkCluster_grp")
        #     cmds.parent("RightLowerArmIkCluster2_grp", "RightLowerArmIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("RightLowerArmIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("RightLowerArmIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("RightLowerArmIkCluster1_grp.rotateZ", 0)
        #
        # righthand_rx = cmds.getAttr("RightHand.jointOrientX")
        # righthand_ry = cmds.getAttr("RightHand.jointOrientY")
        # righthand_rz = cmds.getAttr("RightHand.jointOrientZ")
        # cmds.setAttr("RightLowerArmIkCluster2_grp.rotateX", righthand_rx)
        # cmds.setAttr("RightLowerArmIkCluster2_grp.rotateY", righthand_ry)
        # cmds.setAttr("RightLowerArmIkCluster2_grp.rotateZ", righthand_rz)
        # cmds.setAttr("IkNoFlipRightHand.jointOrientX", righthand_rx)
        # cmds.setAttr("IkNoFlipRightHand.jointOrientY", righthand_ry)
        # cmds.setAttr("IkNoFlipRightHand.jointOrientZ", righthand_rz)
        # cmds.setAttr("IkPVRightHand.jointOrientX", righthand_rx)
        # cmds.setAttr("IkPVRightHand.jointOrientY", righthand_ry)
        # cmds.setAttr("IkPVRightHand.jointOrientZ", righthand_rz)
        # cmds.setAttr("IkSplineRightLowerArm4.jointOrientX", 0)
        # cmds.setAttr("IkSplineRightLowerArm4.jointOrientY", 0)
        # cmds.setAttr("IkSplineRightLowerArm4.jointOrientZ", 0)
        #
        # rightupperlegikcluster_r = cmds.xform("RightUpLeg", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("RightUpperLegIkCluster1_grp", world=True)
        #     cmds.parent("RightUpperLegIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("RightUpperLegIkCluster_grp.rotateX", rightupperlegikcluster_r[0])
        # cmds.setAttr("RightUpperLegIkCluster_grp.rotateY", rightupperlegikcluster_r[1])
        # cmds.setAttr("RightUpperLegIkCluster_grp.rotateZ", rightupperlegikcluster_r[2])
        #
        # try:
        #     cmds.parent("RightUpperLegIkCluster1_grp", "RightUpperLegIkCluster_grp")
        #     cmds.parent("RightUpperLegIkCluster2_grp", "RightUpperLegIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("RightUpperLegIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("RightUpperLegIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("RightUpperLegIkCluster1_grp.rotateZ", 0)
        #
        # ikcvsplinerightupperleg2_rx = cmds.getAttr("RightLeg.jointOrientX")
        # ikcvsplinerightupperleg2_ry = cmds.getAttr("RightLeg.jointOrientY")
        # ikcvsplinerightupperleg2_rz = cmds.getAttr("RightLeg.jointOrientZ")
        # cmds.setAttr("RightUpperLegIkCluster2_grp.rotateX", ikcvsplinerightupperleg2_rx)
        # cmds.setAttr("RightUpperLegIkCluster2_grp.rotateY", ikcvsplinerightupperleg2_ry)
        # cmds.setAttr("RightUpperLegIkCluster2_grp.rotateZ", ikcvsplinerightupperleg2_rz)
        # cmds.setAttr("IkSplineRightUpperLeg4.jointOrientX", 0)
        # cmds.setAttr("IkSplineRightUpperLeg4.jointOrientY", 0)
        # cmds.setAttr("IkSplineRightUpperLeg4.jointOrientZ", 0)
        #
        # rightlowerlegikcluster_r = cmds.xform("RightLeg", query=True, rotation=True, worldSpace=True)
        #
        # try:
        #     cmds.parent("RightLowerLegIkCluster1_grp", world=True)
        #     cmds.parent("RightLowerLegIkCluster2_grp", world=True)
        # except:
        #     pass
        #
        # cmds.setAttr("RightLowerLegIkCluster_grp.rotateX", rightlowerlegikcluster_r[0])
        # cmds.setAttr("RightLowerLegIkCluster_grp.rotateY", rightlowerlegikcluster_r[1])
        # cmds.setAttr("RightLowerLegIkCluster_grp.rotateZ", rightlowerlegikcluster_r[2])
        #
        # try:
        #     cmds.parent("RightLowerLegIkCluster1_grp", "RightLowerLegIkCluster_grp")
        #     cmds.parent("RightLowerLegIkCluster2_grp", "RightLowerLegIkCluster_grp")
        # except:
        #     pass
        #
        # cmds.setAttr("RightLowerLegIkCluster1_grp.rotateX", 0)
        # cmds.setAttr("RightLowerLegIkCluster1_grp.rotateY", 0)
        # cmds.setAttr("RightLowerLegIkCluster1_grp.rotateZ", 0)
        #
        # ikcvsplinerightlowerleg2_rx = cmds.getAttr("RightFoot.jointOrientX")
        # ikcvsplinerightlowerleg2_ry = cmds.getAttr("RightFoot.jointOrientY")
        # ikcvsplinerightlowerleg2_rz = cmds.getAttr("RightFoot.jointOrientZ")
        # cmds.setAttr("RightLowerLegIkCluster2_grp.rotateX", ikcvsplinerightlowerleg2_rx)
        # cmds.setAttr("RightLowerLegIkCluster2_grp.rotateY", ikcvsplinerightlowerleg2_ry)
        # cmds.setAttr("RightLowerLegIkCluster2_grp.rotateZ", ikcvsplinerightlowerleg2_rz)
        # cmds.setAttr("IkNoFlipRightFoot.jointOrientX", ikcvsplinerightlowerleg2_rx)
        # cmds.setAttr("IkNoFlipRightFoot.jointOrientY", ikcvsplinerightlowerleg2_ry)
        # cmds.setAttr("IkNoFlipRightFoot.jointOrientZ", ikcvsplinerightlowerleg2_rz)
        # cmds.setAttr("IkPVRightFoot.jointOrientX", ikcvsplinerightlowerleg2_rx)
        # cmds.setAttr("IkPVRightFoot.jointOrientY", ikcvsplinerightlowerleg2_ry)
        # cmds.setAttr("IkPVRightFoot.jointOrientZ", ikcvsplinerightlowerleg2_rz)
        # cmds.setAttr("IkSplineRightLowerLeg4.jointOrientX", 0)
        # cmds.setAttr("IkSplineRightLowerLeg4.jointOrientY", 0)
        # cmds.setAttr("IkSplineRightLowerLeg4.jointOrientZ", 0)

    def insertJoint(self):
        jnt_extra_n = om2.MFnDagNode()
        jnt_active_sl_ls = om2.MGlobal.getActiveSelectionList()

        for index in range(jnt_active_sl_ls.length()):
            jnt_active_obj = jnt_active_sl_ls.getDependNode(index)
            jnt_active_string = jnt_active_sl_ls.getSelectionStrings(index)

            jnt_sl = om2.MFnDagNode(jnt_active_obj)
            jnt_child = jnt_sl.child(0)

            jnt_extra_tn = jnt_extra_n.create("joint", str(jnt_active_string)[2:][:-3]+"Extras"+str(index), jnt_active_obj)

            jnt_child_transform = om2.MFnTransform(jnt_child)
            jnt_child_transform_t = jnt_child_transform.translation(om2.MSpace.kTransform)

            jnt_extra_transform = om2.MFnTransform(jnt_extra_tn)
            jnt_extra_transform_t = jnt_extra_transform.translation(om2.MSpace.kTransform)
            jnt_extra_transform_t[0], jnt_extra_transform_t[1], jnt_extra_transform_t[2] = jnt_child_transform_t[0]/2, jnt_child_transform_t[1]/2, jnt_child_transform_t[2]/2
            jnt_extra_transform.setTranslation(jnt_extra_transform_t, om2.MSpace.kTransform)

            jnt_child_transform_t[0], jnt_child_transform_t[1], jnt_child_transform_t[2] = jnt_child_transform_t[0]-jnt_extra_transform_t[0], jnt_child_transform_t[1]-jnt_extra_transform_t[1], jnt_child_transform_t[2]-jnt_extra_transform_t[2]
            jnt_child_transform.setTranslation(jnt_child_transform_t, om2.MSpace.kTransform)

            jnt_parentextra_n = om2.MFnDagNode(jnt_extra_tn)
            jnt_parentextra_n.addChild(jnt_child)

    def deleteJoints(self):
        if cmds.objExists("Biped_jnt_grp"):
            self.MDG2_mod.commandToExecute('delete "Biped_jnt_grp"')
            self.MDG2_mod.doIt()
        else:
            print("Yo! There's no approproaite Joint Group Exist.")

    def createLHandIK(self, index):
         if cmds.objExists("IkNoFlipLeftArm") and cmds.objExists("IkPVLeftArm"):
            try:
                if cmds.objExists("NoFlipLeftHand_Ik") and cmds.objExists("NoFlipLeftHand_effector"):

                    cmds.delete("NoFlipLeftHand_Ik")
                    cmds.delete("PVLeftHand_Ik")
            except:
                pass

            if index == 0:
                try:
                    cmds.delete("NoFlipLeftHand_effector")
                    cmds.delete("PVLeftHand_effector")
                except:
                    pass

                print("All Ik Removed")

            elif index == 1:

                try:
                    self.IKSolver1_lst.add("ikRPsolver*")
                except:
                    cmds.createNode("ikRPsolver")

                self.MDG2_mod.commandToExecute('ikHandle -name "NoFlipLeftHand_Ik" -startJoint "IkNoFlipLeftArm" -endEffector "IkNoFlipLeftHand" -solver "ikRPsolver"')
                self.MDG2_mod.commandToExecute('rename effector1 NoFlipLeftHand_effector')
                self.MDG2_mod.commandToExecute('ikHandle -name "PVLeftHand_Ik" -startJoint "IkPVLeftArm" -endEffector "IkPVLeftHand" -solver "ikRPsolver"')
                self.MDG2_mod.commandToExecute('rename effector1 PVLeftHand_effector')
                self.MDG2_mod.commandToExecute('parent NoFlipLeftHand_Ik DoNotTouch')
                self.MDG2_mod.commandToExecute('parent PVLeftHand_Ik DoNotTouch')
                self.MDG2_mod.doIt()
         else:
             print(":( No approproaite Joint-Chain Exist")

    def createRHandIK(self, index):
        if cmds.objExists("IkNoFlipRightArm") and cmds.objExists("IkPVRightArm"):
            try:
                if cmds.objExists("RightHand_Ik") and cmds.objExists("RightHand_effector"):

                    cmds.delete("NoFlipRightHand_Ik")
                    cmds.delete("PVRightHand_Ik")
            except:
                pass

            if index == 0:

                try:
                    cmds.delete("NoFlipRightHand_effector")
                    cmds.delete("PVRightHand_effector")
                except:
                    pass

                print("All Ik Removed")

            elif index == 1:

                try:
                    self.IKSolver1_lst.add("ikRPsolver*")
                except:
                    cmds.createNode("ikRPsolver")

                self.MDG2_mod.commandToExecute('ikHandle -name "NoFlipRightHand_Ik" -startJoint "IkNoFlipRightArm" -endEffector "IkNoFlipRightHand" -solver "ikRPsolver"')
                self.MDG2_mod.commandToExecute('rename effector1 NoFlipRightHand_effector')
                self.MDG2_mod.commandToExecute('ikHandle -name "PVRightHand_Ik" -startJoint "IkPVRightArm" -endEffector "IkPVRightHand" -solver "ikRPsolver"')
                self.MDG2_mod.commandToExecute('rename effector1 PVRightHand_effector')
                self.MDG2_mod.commandToExecute('parent NoFlipRightHand_Ik DoNotTouch')
                self.MDG2_mod.commandToExecute('parent PVRightHand_Ik DoNotTouch')
                self.MDG2_mod.doIt()
        else:
            print(":( No approproaite Joint-Chain Exist")

    def createLlegIk(self, index):
        if cmds.objExists("IkNoFlipLeftUpLeg") and cmds.objExists("IkPVLeftUpLeg"):

            try:
                if cmds.objExists("NoFlipLeftLeg_Ik") and cmds.objExists("NoFlipLeftLeg_effector"):

                    cmds.delete("NoFlipLeftLeg_Ik")
                    cmds.delete("PVLeftLeg_Ik")
                    cmds.delete("LeftLegFoot_Ik")
                    cmds.delete("LeftLegToe_Ik")
            except:
                pass

            if index == 0:
                try:
                    cmds.delete("NoFlipLeftLeg_effector")
                    cmds.delete("PVLeftLeg_effector")
                except:
                    pass

                self.MDG1_mod.commandToExecute('parent LeftReverseFootToe DoNotTouch')
                self.MDG1_mod.commandToExecute('parent LeftReverseFootToeEnd DoNotTouch')
                self.MDG1_mod.commandToExecute('parent LeftReverseInnerFoot DoNotTouch')
                self.MDG1_mod.commandToExecute('parent LeftReverseOuterFoot DoNotTouch')
                self.MDG1_mod.doIt()

                print("All Ik Removed")

            elif index == 1:
                try:
                    self.IKSolver1_lst.add("ikRPsolver*")
                except:
                    cmds.createNode("ikRPsolver")

                self.MDG1_mod.commandToExecute('ikHandle -name "PVLeftLeg_Ik" -startJoint "IkPVLeftUpLeg" -endEffector "IkPVLeftFoot" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 PVLeftLeg_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "NoFlipLeftLeg_Ik" -startJoint "IkNoFlipLeftUpLeg" -endEffector "IkNoFlipLeftFoot" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 NoFlipLeftLeg_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "LeftLegFoot_Ik" -startJoint "IkLeftFoot" -endEffector "IkLeftToeBase" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 LeftFoot_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "LeftLegToe_Ik" -startJoint "IkLeftToeBase" -endEffector "IkLeftToeEnd" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 LeftToe_effector')
                self.MDG1_mod.commandToExecute('parent LeftReverseFootToe LeftReverseFootToeEnd')
                self.MDG1_mod.commandToExecute('parent LeftReverseFootToeEnd LeftReverseInnerFoot')
                self.MDG1_mod.commandToExecute('parent LeftReverseInnerFoot LeftReverseOuterFoot')
                self.MDG1_mod.commandToExecute('parent LeftReverseOuterFoot LeftReverseFootHeel')
                self.MDG1_mod.commandToExecute('parent PVLeftLeg_Ik LeftReverseFootToe')
                self.MDG1_mod.commandToExecute('parent NoFlipLeftLeg_Ik LeftReverseFootToe')
                self.MDG1_mod.commandToExecute('parent LeftLegFoot_Ik LeftReverseFootToe')
                self.MDG1_mod.commandToExecute('parent LeftLegToe_Ik LeftReverseFootToeWiggle')
                self.MDG1_mod.doIt()
        else:
            print(":( No approproaite Joint-Chain Exist")

    def createRlegIk(self, index):
        if cmds.objExists("IkNoFlipRightUpLeg") and cmds.objExists("IkPVRightUpLeg"):

            try:
                if cmds.objExists("NoFlipRightLeg_Ik") and cmds.objExists("NoFlipRightLeg_effector"):

                    cmds.delete("NoFlipRightLeg_Ik")
                    cmds.delete("PVRightLeg_Ik")
                    cmds.delete("RightLegFoot_Ik")
                    cmds.delete("RightLegToe_Ik")

            except:
                pass

            if index == 0:
                try:
                    cmds.delete("NoFlipRightLeg_effector")
                    cmds.delete("PVRightLeg_effector")
                except:
                    pass

                self.MDG1_mod.commandToExecute('parent RightReverseFootToe DoNotTouch')
                self.MDG1_mod.commandToExecute('parent RightReverseFootToeEnd DoNotTouch')
                self.MDG1_mod.commandToExecute('parent RightReverseInnerFoot DoNotTouch')
                self.MDG1_mod.commandToExecute('parent RightReverseOuterFoot DoNotTouch')
                self.MDG1_mod.doIt()

                print("All Ik Removed")

            elif index == 1:
                try:
                    self.IKSolver1_lst.add("ikRPsolver*")
                except:
                    cmds.createNode("ikRPsolver")

                self.MDG1_mod.commandToExecute('ikHandle -name "PVRightLeg_Ik" -startJoint "IkPVRightUpLeg" -endEffector "IkPVRightFoot" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 PVRightLeg_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "NoFlipRightLeg_Ik" -startJoint "IkNoFlipRightUpLeg" -endEffector "IkNoFlipRightFoot" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 NoFlipRightLeg_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "RightLegFoot_Ik" -startJoint "IkRightFoot" -endEffector "IkRightToeBase" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 RightFoot_effector')
                self.MDG1_mod.commandToExecute('ikHandle -name "RightLegToe_Ik" -startJoint "IkRightToeBase" -endEffector "IkRightToeEnd" -solver "ikRPsolver"')
                self.MDG1_mod.commandToExecute('rename effector1 RightToe_effector')
                self.MDG1_mod.commandToExecute('parent RightReverseFootToe RightReverseFootToeEnd')
                self.MDG1_mod.commandToExecute('parent RightReverseFootToeEnd RightReverseInnerFoot')
                self.MDG1_mod.commandToExecute('parent RightReverseInnerFoot RightReverseOuterFoot')
                self.MDG1_mod.commandToExecute('parent RightReverseOuterFoot RightReverseFootHeel')
                self.MDG1_mod.commandToExecute('parent PVRightLeg_Ik RightReverseFootToe')
                self.MDG1_mod.commandToExecute('parent NoFlipRightLeg_Ik RightReverseFootToe')
                self.MDG1_mod.commandToExecute('parent RightLegFoot_Ik RightReverseFootToe')
                self.MDG1_mod.commandToExecute('parent RightLegToe_Ik RightReverseFootToeWiggle')
                self.MDG1_mod.doIt()
        else:
            print(":( No approproaite Joint-Chain Exist")

    def createBoundingBox(self):

        if cmds.objExists("boundingBox"):
            print("BoundingBox already Exist")
        else:
            box_tn = om2.MFnDagNode()
            self.boundingbox_tn = box_tn.create("transform", "boundingBox")

            box_sn = om2.MFnDagNode()
            box_sn.create("mesh", "boundingboxShape", self.boundingbox_tn)

            box_objtype_n = om2.MFnDependencyNode()
            box_objtype_n.create("polyCube")

            boundingbox_otp_plug = box_objtype_n.findPlug("output", False)
            boundingbox_inp_plug = box_sn.findPlug("inMesh", False)

            box_mod_n = om2.MDGModifier()
            box_mod_n.connect(boundingbox_otp_plug, boundingbox_inp_plug)
            box_mod_n.doIt()

    def rigChar(self):
        if cmds.objExists("boundingBox") and cmds.objExists("mesh_*") and cmds.objExists("blendshape_*") and cmds.objExists("Biped_jnt_grp"):
            obj_lst = om2.MSelectionList()
            obj_lst.add("boundingBox")
            box_obj = obj_lst.getDependNode(0)

            self.box_transform = om2.MFnTransform(box_obj)
            box_transform_s = self.box_transform.scale()

            if not cmds.objExists("Biped_mesh_grp"):
                meshgrp_tn = self.MDag2_node.create("transform", "Biped_mesh_grp")
                mesh_tn = self.MDag2_node.create("transform", "Mesh", meshgrp_tn)
                blendshape_tn = self.MDag2_node.create("transform", "BlendShapes", meshgrp_tn)

            else:
                meshgrp_tn = om2.MSelectionList()
                meshgrp_tn.add("Mesh")
                meshgrp_tn.add("BlendShapes")

                mesh_tn = meshgrp_tn.getDependNode(0)
                blendshape_tn = meshgrp_tn.getDependNode(1)

            polygrp_lst = om2.MSelectionList()
            polygrp_lst.add("mesh_*")
            polygrp_lst.add("blendshape_*")

            meshgrp_n = om2.MFnDagNode(mesh_tn)
            blendshapegrp_n = om2.MFnDagNode(blendshape_tn)

            for index in range(polygrp_lst.length()):
                 polystr = polygrp_lst.getSelectionStrings(index)
                 polyobj = polygrp_lst.getDependNode(index)
                 if str(polystr)[3:][:5] == "mesh_" and polyobj.hasFn(om2.MFn.kTransform) and meshgrp_n.hasChild(polyobj) == False:
                     meshgrp_n.addChild(polyobj)
                 elif str(polystr)[3:][:11] == "blendshape_" and polyobj.hasFn(om2.MFn.kTransform) and blendshapegrp_n.hasChild(polyobj) == False:
                     blendshapegrp_n.addChild(polyobj)

            self.globalctrl_tn =  self.MDag2_node.create("transform", "Biped_ctrl_grp")

            ctrl_world_circle_points = [om2.MPoint(0.75, 0.0, 0.25), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(0.75, 0.0, -0.25), om2.MPoint(0.75, 0.0, 0.25)]

            self.worldctrl_tn = self.MDag2_node.create("transform", "Biped_World_ctrl", self.globalctrl_tn)
            ctrl_global_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_world_circle_points, 1, 1, False, True, True, self.worldctrl_tn)

            worldctrl_transform = om2.MFnTransform(self.worldctrl_tn)
            worldctrl_transform_s = worldctrl_transform.findPlug("scale", False)

            if worldctrl_transform_s.isCompound:
                for i in range(worldctrl_transform_s.numChildren()):
                    child_plug = worldctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[2]*2)

            worldctrl_transform_r = worldctrl_transform.rotation(om2.MSpace.kTransform)
            worldctrl_transform_r[1] = 1.57079
            worldctrl_transform.setRotation(worldctrl_transform_r, om2.MSpace.kTransform)

            self.MDG2_mod.renameNode(ctrl_global_comb_cv, "World_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 0.5 1 0 "Biped_World_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_World_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_ctrl_grp.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_World_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_World_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_World_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            ctrl_master_circle_points = [om2.MPoint(0.75, 0.0, 0.25), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(0.75, 0.0, -0.25)]
            ctrl_master_arrow_points = [om2.MPoint(0.75, 0.0, -0.25), om2.MPoint(1.50, 0.0, -0.50), om2.MPoint(1.50, 0.0, -0.65), om2.MPoint(2.0, 0.0, 0.0), om2.MPoint(1.50, 0.0, 0.65), om2.MPoint(1.50, 0.0, 0.50), om2.MPoint(0.75, 0.0, 0.25)]
            
            self.draw_global_tn = self.MDag2_node.create("transform", "Draw_global_ctrl")
            crv_ctrl_master_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 3, 1, False, True, True, self.draw_global_tn)
            crv_ctrl_master_arrow = self.MNurbs2_cv.createWithEditPoints(ctrl_master_arrow_points, 1, 1, False, True, True, self.draw_global_tn)
            
            self.masterctrl_tn = self.MDag2_node.create("transform", "Biped_Master_ctrl", self.worldctrl_tn)
            ctrl_global_comb_cv = self.MNurbs2_cv.create([crv_ctrl_master_circle, crv_ctrl_master_arrow], self.masterctrl_tn)

            masctrl_transform = om2.MFnTransform(self.masterctrl_tn)
            masctrl_transform_s = masctrl_transform.findPlug("scale", False)

            if masctrl_transform_s.isCompound:
                for i in range(masctrl_transform_s.numChildren()):
                    child_plug = masctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[2]/1.3)

            masctrl_transform_r = masctrl_transform.rotation(om2.MSpace.kTransform)
            masctrl_transform_r[1] = -1.57079
            masctrl_transform.setRotation(masctrl_transform_r, om2.MSpace.kTransform)

            self.MDG2_mod.commandToExecute('delete "Draw_global_ctrl"')
            self.MDG2_mod.renameNode(ctrl_global_comb_cv, "Master_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 0.5 1 0 "Biped_Master_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Master_ctrl"')
            self.MDG2_mod.commandToExecute('addAttr -longName "globalscale" -niceName "Global Scale" -attributeType double -keyable true -defaultValue 1 Biped_Master_ctrl')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.globalscale Biped_Master_ctrl.scaleX')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.globalscale Biped_Master_ctrl.scaleY')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.globalscale Biped_Master_ctrl.scaleZ')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Master_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Master_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Master_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            ctrl_root_points = [om2.MPoint(0.75, 0.2, 0.0), om2.MPoint(0.75, 0.0, 0.50), om2.MPoint(0.0, 1, 1), om2.MPoint(-0.75, 0.0, 0.50), om2.MPoint(-0.75, 0.2, 0.0), om2.MPoint(-0.75, 0.0, -0.50), om2.MPoint(0.0, 1, -1), om2.MPoint(0.75, 0.0, -0.50), om2.MPoint(0.75, 0.2, 0.0)]

            self.rootnull_tn = self.MDag2_node.create("transform", "Biped_Root_null", self.masterctrl_tn)
            self.rootctrl_tn = self.MDag2_node.create("transform", "Biped_Root_ctrl", self.rootnull_tn)
            crv_ctrl_root = self.MNurbs2_cv.createWithEditPoints(ctrl_root_points, 3, 1, False, True, True, self.rootctrl_tn)

            ctrl_hip_line_points = [om2.MPoint(0.75, 0.00, -0.75), om2.MPoint(0.75, 0.00, 0.75), om2.MPoint(0.75, 0.00, 0.00), om2.MPoint(-0.75, 0.00), om2.MPoint(-0.75, 0.00, 0.75), om2.MPoint(-0.75, 0.00, -0.75)]
            ctrl_hip_arcback_points = [om2.MPoint(0.75, 0.00, -0.75), om2.MPoint(1, 0.5, 0.00), om2.MPoint(0.75, 0.00, 0.75)]
            ctrl_hip_linefront_points = [om2.MPoint(-0.75, 0.00, -0.75), om2.MPoint(-1, 0.5, 0.00), om2.MPoint(-0.75, 0.00, 0.75)]

            obj_lst.add("Root")
            root_obj = obj_lst.getDependNode(1)
            jnt_root_transform = om2.MFnTransform(root_obj)
            jnt_root_trans = jnt_root_transform.transformation()

            rootnull_transform = om2.MFnTransform(self.rootnull_tn)
            rootnull_transform.transformation()
            rootnull_transform.setTransformation(jnt_root_trans)

            rootctrl_transform = om2.MFnTransform(self.rootctrl_tn)
            rootctrl_transform_s = rootctrl_transform.findPlug("scale", False)

            if rootctrl_transform_s.isCompound:
                for i in range(rootctrl_transform_s.numChildren()):
                    child_plug = rootctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[0]/2)

            rootctrl_transform_r = rootctrl_transform.rotation(om2.MSpace.kTransform)
            rootctrl_transform_r[0], rootctrl_transform_r[1] = 3.1415, -1.57079
            rootctrl_transform.setRotation(rootctrl_transform_r, om2.MSpace.kTransform)

            self.MDG2_mod.renameNode(crv_ctrl_root, "Root_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_Root_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Root_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_null.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Root_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            if self.hipjnt.currentIndex() == 1:
                self.hipctrl_tn = self.MDag2_node.create("transform", "Biped_Hip_ctrl", self.rootctrl_tn)
                crv_ctrl_hip_line = self.MNurbs2_cv.createWithEditPoints(ctrl_hip_line_points, 1, 1, False, True, True, self.hipctrl_tn)
                crv_ctrl_hip_arcback = self.MNurbs2_cv.createWithEditPoints(ctrl_hip_arcback_points, 3, 1, False, True, True, self.hipctrl_tn)
                crv_ctrl_hip_linefront = self.MNurbs2_cv.createWithEditPoints(ctrl_hip_linefront_points, 3, 1, False, True, True, self.hipctrl_tn)

                hipctrl_transform = om2.MFnTransform(self.hipctrl_tn)
                hipctrl_transform_r = hipctrl_transform.rotation(om2.MSpace.kTransform)
                hipctrl_transform_r[0] = 3.1415
                hipctrl_transform.setRotation(hipctrl_transform_r, om2.MSpace.kTransform)

                hipctrl_transform_s = hipctrl_transform.findPlug("scale", False)
                if hipctrl_transform_s.isCompound:
                    for i in range(hipctrl_transform_s.numChildren()):
                        child_plug = hipctrl_transform_s.child(i)
                        attr_value = child_plug.setDouble(box_transform_s[0] / 2)

                self.MDG2_mod.renameNode(crv_ctrl_hip_line, "HipLine_shape")
                self.MDG2_mod.renameNode(crv_ctrl_hip_arcback, "HipArcRight_shape")
                self.MDG2_mod.renameNode(crv_ctrl_hip_linefront, "HipArcLeft_shape")
                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_Hip_ctrl"')
                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Hip_ctrl"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.translateX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.translateY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.translateZ"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.scaleX"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.scaleY"')
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Hip_ctrl.scaleZ"')
                self.MDG2_mod.doIt()

            if cmds.objExists("blendshape*"):
                mesh_obj = om1.MObject()
                polygrp_lst1 = om1.MSelectionList()
                polygrp_lst1.add("mesh_*")
                polygrp_lst1.add("blendshape_*")

                polygrp_lst2 = om2.MSelectionList()
                polygrp_lst2.add("mesh_*")
                polygrp_lst2.add("blendshape_*")

                for index in range(polygrp_lst1.length()):
                    mesh_str = polygrp_lst2.getSelectionStrings(index)
                    polygrp_lst1.getDependNode(index, mesh_obj)
                    if mesh_obj.hasFn(om1.MFn.kTransform):
                        if str(mesh_str)[3:][:-3] == "mesh_Body" and not cmds.objExists("mesh_Face"):
                            bs_facial = self.BlendShape.create(mesh_obj, 1)
                            self.MDG1_mod.commandToExecute('rename blendShape1 facialBlendShape')
                        elif str(mesh_str)[3:][:-3] == "mesh_Face":
                            bs_facial = self.BlendShape.create(mesh_obj, 1)
                            self.MDG1_mod.commandToExecute('rename blendShape1 facialBlendShape')
                        elif str(mesh_str)[3:][:-3] == "mesh_Tongue":
                            bs_tongue = self.BlendShape.create(mesh_obj, 1)
                            self.MDG1_mod.commandToExecute('rename blendShape2 tongueBlendShape')
                        elif str(mesh_str)[3:][:11] == "blendshape_" and not cmds.objExists("mesh_Face") and not str(mesh_str)[3:][:17] == "blendshape_Tongue":
                            self.MDG1_mod.commandToExecute('blendShape -edit -target mesh_Body {0} {1} 1.0 facialBlendShape'.format(index+1, str(mesh_str)[3:][:-3]))
                        elif str(mesh_str)[3:][:17] == "blendshape_Tongue":
                            self.MDG1_mod.commandToExecute('blendShape -edit -target mesh_Tongue {0} {1} 1.0 tongueBlendShape'.format(index+1, str(mesh_str)[3:][:-3]))
                        self.MDG1_mod.doIt()

            if self.hipjnt.currentIndex() == 1 and self.autostretch.currentIndex() == 0:
                jnt_hip = self.MDag2_node.create("joint", "Hip", root_obj)
                self.MDG2_mod.doIt()

                self.MDG2_mod.commandToExecute('parent LeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent FkLeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent IkLeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent RightJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent FkRightJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent IkRightJointLeg_grp Hip')

                meshObj = cmds.ls("mesh*", type="transform")

                for index, mesh in enumerate(meshObj):
                    cmds.skinCluster(mesh, "Hip", "Spine*", "Head", "Neck", "Left*", "Right*", tsb=True, bm=3, sm=2, dr=0.1, pr=True, name="skinBind" + str(index + 1))

                cmds.geomBind("skinBind*", bm=3, gvp=[256, 1])

            elif self.hipjnt.currentIndex() == 0 and self.autostretch.currentIndex() == 0:
                meshObj = cmds.ls("mesh*", type="transform")

                for index, mesh in enumerate(meshObj):
                    cmds.skinCluster(mesh, "Root", "Spine*", "Head", "Neck", "Left*", "Right*", tsb=True, bm=3, sm=2, dr=0.1, pr=True, name="skinBind" + str(index + 1))

                cmds.geomBind("skinBind*", bm=3, gvp=[256, 1])

            elif self.hipjnt.currentIndex() == 1 and self.autostretch.currentIndex() == 1:
                jnt_hip = self.MDag2_node.create("joint", "Hip", root_obj)
                self.MDG2_mod.doIt()

                self.MDG2_mod.commandToExecute('parent LeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent FkLeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent IkLeftJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent RightJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent FkRightJointLeg_grp Hip')
                self.MDG2_mod.commandToExecute('parent IkRightJointLeg_grp Hip')

                meshObj = cmds.ls("mesh*", type="transform")

                for index, mesh in enumerate(meshObj):
                    cmds.skinCluster(mesh, "Hip", "IkSpine*", "IkNeck0", "IkNeck1", "IkNeck2", "Head", "IkSplineLeftUpperArm*", "IkSplineLeftLowerArm*", "LeftFinger*", "IkSplineRightUpperArm*", "IkSplineRightLowerArm*", "RightFinger*", "IkSplineLeftUpperLeg*", "IkSplineLeftLowerLeg*", "LeftFoot", "LeftToeBase", "IkSplineRightUpperLeg*", "IkSplineRightLowerLeg*", "RightFoot", "RightToeBase", tsb=True, bm=3, sm=2, dr=0.1, pr=True, name="skinBind" + str(index + 1))

                cmds.geomBind("skinBind*", bm=3, gvp=[256, 1])

            elif self.hipjnt.currentIndex() == 0 and self.autostretch.currentIndex() == 1:
                meshObj = cmds.ls("mesh*", type="transform")

                for index, mesh in enumerate(meshObj):
                    cmds.skinCluster(mesh, "Root", "IkSpine*", "IkNeck0", "IkNeck1", "IkNeck2", "Head", "IkSplineLeftUpperArm*", "IkSplineLeftLowerArm*", "LeftFinger*", "IkSplineRightUpperArm*", "IkSplineRightLowerArm*", "RightFinger*", "IkSplineLeftUpperLeg*", "IkSplineLeftLowerLeg*", "LeftFoot", "LeftToeBase", "IkSplineRightUpperLeg*", "IkSplineRightLowerLeg*", "RightFoot", "RightToeBase", tsb=True, bm=3, sm=2, dr=0.1, pr=True, name="skinBind" + str(index + 1))

                cmds.geomBind("skinBind*", bm=3, gvp=[256, 1])

            spine_sl_lst = om2.MSelectionList()
            spine_sl_lst.add("Spine*")

            ctrl_spine_line_l_points = [om2.MPoint(0.50, 0.00, 0.25), om2.MPoint(0.50, 0.05, 0.25), om2.MPoint(0.50, 0.00, 0.20), om2.MPoint(-0.50, 0.00, 0.20), om2.MPoint(-0.50, 0.05, 0.25), om2.MPoint(-0.50, 0.00, 0.25)]
            ctrl_spine_line_r_points = [om2.MPoint(-0.50, 0.00, -0.25), om2.MPoint(-0.50, 0.05, -0.25), om2.MPoint(-0.50, 0.00, -0.20), om2.MPoint(0.50, 0.00, -0.20), om2.MPoint(0.50, 0.05, -0.25), om2.MPoint(0.50, 0.00, -0.25) ]
            ctrl_spine_curve_fl_points = [om2.MPoint(0.50, -0.15, 0.00), om2.MPoint(0.50, -0.06, 0.10), om2.MPoint(0.50, 0.00, 0.25)]
            ctrl_spine_curve_fr_points = [om2.MPoint(0.50, 0.00, -0.25), om2.MPoint(0.50, -0.06, -0.10), om2.MPoint(0.50, -0.15, 0.00)]
            ctrl_spine_curve_b_points = [om2.MPoint(-0.50, 0.00, 0.25), om2.MPoint(-0.50, -0.06, 0.10), om2.MPoint(-0.50, -0.15, 0.00), om2.MPoint(-0.50, -0.06, -0.10),  om2.MPoint(-0.50, 0.00, -0.25)]

            self.draw_spine_tn = self.MDag2_node.create("transform", "Draw_Spine_ctrl")
            crv_ctrl_spine_line_l = self.MNurbs2_cv.createWithEditPoints(ctrl_spine_line_l_points, 1, 1, False, True, True, self.draw_spine_tn)
            crv_ctrl_spine_line_r = self.MNurbs2_cv.createWithEditPoints(ctrl_spine_line_r_points, 1, 1, False, True, True, self.draw_spine_tn)
            crv_ctrl_spine_curve_fl = self.MNurbs2_cv.createWithEditPoints(ctrl_spine_curve_fl_points, 3, 1, False, True, True, self.draw_spine_tn)
            crv_ctrl_spine_curve_fr = self.MNurbs2_cv.createWithEditPoints(ctrl_spine_curve_fr_points, 3, 1, False, True, True, self.draw_spine_tn)
            crv_ctrl_spine_curve_b = self.MNurbs2_cv.createWithEditPoints(ctrl_spine_curve_b_points, 3, 1, False, True, True, self.draw_spine_tn)

            ctrl_stretchyspine_circle_points = [om2.MPoint(0.70, 0.00, 0.00), om2.MPoint(0.00, -0.20, 0.70), om2.MPoint(-0.70, 0.00, 0.00), om2.MPoint(0.00, -0.20, -0.70), om2.MPoint(0.70, 0.00, 0.00)]

            for index in range(spine_sl_lst.length()):
                if index == 0:
                    self.spinenull_tn = self.MDag2_node.create("transform", "Biped_Spine"+str(index)+"_null", self.rootctrl_tn)
                    self.spinectrl_tn = self.MDag2_node.create("transform", "Biped_Spine"+str(index)+"_ctrl", self.spinenull_tn)
                    ctrl_spine_comb_cv = self.MNurbs2_cv.create([crv_ctrl_spine_curve_fl, crv_ctrl_spine_line_l, crv_ctrl_spine_curve_b, crv_ctrl_spine_line_r, crv_ctrl_spine_curve_fr], self.spinectrl_tn)

                else:
                    self.spinenull_tn = self.MDag2_node.create("transform", "Biped_Spine"+str(index)+"_null")
                    self.spinectrl_tn = self.MDag2_node.create("transform", "Biped_Spine"+str(index)+"_ctrl", self.spinenull_tn)
                    ctrl_spine_comb_cv = self.MNurbs2_cv.create([crv_ctrl_spine_curve_fl, crv_ctrl_spine_line_l, crv_ctrl_spine_curve_b, crv_ctrl_spine_line_r, crv_ctrl_spine_curve_fr], self.spinectrl_tn)

                if index == spine_sl_lst.length()-1:
                    self.stretchyspine_tn = self.MDag2_node.create("transform", "Biped_StretchySpine_ctrl", self.spinectrl_tn)
                    crv_ctrl_stretchyspine = self.MNurbs2_cv.createWithEditPoints(ctrl_stretchyspine_circle_points, 3, 1, False, True, True, self.stretchyspine_tn)

                    self.MDG2_mod.renameNode(crv_ctrl_stretchyspine, "StretchySpine_shape")

                jnt_spine_obj = spine_sl_lst.getDependNode(index)
                spine_path_n = om2.MDagPath()
                spine_path = spine_path_n.getAPathTo(jnt_spine_obj)
                jnt_spine_transform = om2.MFnTransform(spine_path)
                jnt_spine_t = jnt_spine_transform.translation(om2.MSpace.kWorld)

                spinenull_transform = om2.MFnTransform(self.spinenull_tn)
                spinenull_transform.setRotatePivotTranslation(jnt_spine_t, om2.MSpace.kTransform)

                spinectrl_transform = om2.MFnTransform(self.spinectrl_tn)
                spinectrl_transform_s = spinectrl_transform.findPlug("scale", False)

                if spinectrl_transform_s.isCompound:
                    for i in range(spinectrl_transform_s.numChildren()):
                        child_plug = spinectrl_transform_s.child(i)
                        attr_value = child_plug.setDouble(box_transform_s[0]/1.3)

                spinectrl_transform_align = spinectrl_transform.rotation(om2.MSpace.kTransform)
                spinectrl_transform_align[1] = -1.57079
                spinectrl_transform.setRotation(spinectrl_transform_align, om2.MSpace.kTransform)
                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Spine{0}_ctrl"'.format(index))
                self.MDG2_mod.doIt()

                jnt_spine_r = cmds.xform("Spine{0}".format(index), query=True, rotation=True, worldSpace=True)

                radian_spine_x = (jnt_spine_r[0]/180)*3.1415
                radian_spine_y = (jnt_spine_r[1]/180)*3.1415
                radian_spine_z = (jnt_spine_r[2]/180)*3.1415

                spinenull_transform_r = spinenull_transform.rotation(om2.MSpace.kTransform)
                spinenull_transform_r[0], spinenull_transform_r[1], spinenull_transform_r[2] = radian_spine_x, radian_spine_y, radian_spine_z
                spinenull_transform.setRotation(spinenull_transform_r, om2.MSpace.kTransform)

                if index == 0:

                    rootctrl_transform_matrix = rootnull_transform.transformation()
                    rootctrl_transform_worldmatrix = rootctrl_transform_matrix.asMatrixInverse()

                    spinenull_childtransform_trans = spinenull_transform.transformation()
                    spinenull_childtransform_worldmatrix = spinenull_childtransform_trans.asMatrix()

                    spinenull_childtransform_localmatrix = spinenull_childtransform_worldmatrix * rootctrl_transform_worldmatrix

                    spinenull_transform.setTransformation(om2.MTransformationMatrix(spinenull_childtransform_localmatrix))

                else:
                    parent_index = index - 1

                    spinectrl_sl_lst = om2.MSelectionList()
                    spinectrl_sl_lst.add("Biped_Spine*_ctrl")
                    spinectrl_obj = spinectrl_sl_lst.getDependNode(parent_index)

                    spinenull_sl_lst = om2.MSelectionList()
                    spinenull_sl_lst.add("Biped_Root_null")
                    spinenull_sl_lst.add("Biped_Spine*_null")

                    spine_tr_n = om2.MFnDagNode(spinectrl_obj)
                    spine_tr_n.addChild(self.spinenull_tn)

                    spinenull_parentinvtransform_matrix = om2.MMatrix()
                    for i in range(spinenull_sl_lst.length()-1):
                        parentobj = spinenull_sl_lst.getDependNode(i)
                        parentinvtransform = om2.MFnTransform(parentobj)
                        parentinvtransform_trans = parentinvtransform.transformation()
                        null_Matrix = parentinvtransform_trans.asMatrixInverse()

                        spinenull_parentinvtransform_matrix = spinenull_parentinvtransform_matrix * null_Matrix

                    spinenull_childtransform_trans = spinenull_transform.transformation()
                    spinenull_childtransform_worldmatrix = spinenull_childtransform_trans.asMatrix()

                    spinenull_childtransform_localmatrix = spinenull_childtransform_worldmatrix * spinenull_parentinvtransform_matrix

                    spinenull_transform.setTransformation(om2.MTransformationMatrix(spinenull_childtransform_localmatrix))

                self.MDG2_mod.renameNode(ctrl_spine_comb_cv, "Spine" + str(index) + "_shape")
                self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_Spine{0}_ctrl"'.format(index))
                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Spine{0}_ctrl"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.translateX"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.translateY"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.translateZ"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.rotateX"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.rotateY"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.rotateZ"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.scaleX"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.scaleY"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.scaleZ"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_null.visibility"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_ctrl.scaleX"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_ctrl.scaleY"'.format(index))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Spine{0}_ctrl.scaleZ"'.format(index))

            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_StretchySpine_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchySpine_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchySpine_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchySpine_ctrl.scaleZ"')
            self.MDG2_mod.commandToExecute('delete "Draw_Spine_ctrl"')
            self.MDG2_mod.doIt()

            head_sl_ls = om2.MSelectionList()
            head_sl_ls.add("Neck")
            head_sl_ls.add("Head")
            head_sl_ls.add("HeadTopEnd")

            ctrl_neck_line_up_points = [om2.MPoint(0.00, 0.05, 0.02), om2.MPoint(0.60, 0.05, 0.02)]
            ctrl_neck_star_up_points = [om2.MPoint(0.60, 0.05, 0.02), om2.MPoint(0.70, 0.15, 0.20), om2.MPoint(0.70, 0.09, 0.20), om2.MPoint(0.70, 0.06, 0.13), om2.MPoint(0.60, 0.00, 0.00), om2.MPoint(0.70, 0.05, -0.13), om2.MPoint(0.70, 0.09, -0.20), om2.MPoint(0.70, 0.15, -0.20), om2.MPoint(0.60, 0.05, -0.02)]
            ctrl_neck_line_down_points = [om2.MPoint(0.60, 0.05, -0.02), om2.MPoint(0.00, 0.05, -0.02)]

            self.draw_neck_tn = self.MDag2_node.create("transform", "Draw_neck_ctrl")
            crv_ctrl_neck_line_up = self.MNurbs2_cv.createWithEditPoints(ctrl_neck_line_up_points, 1, 1, False, True, True, self.draw_neck_tn)
            crv_ctrl_neck_star = self.MNurbs2_cv.createWithEditPoints(ctrl_neck_star_up_points, 1, 1, False, True, True, self.draw_neck_tn)
            crv_ctrl_neck_line_down = self.MNurbs2_cv.createWithEditPoints(ctrl_neck_line_down_points, 1, 1, False, True, True, self.draw_neck_tn)

            if self.autostretch.currentIndex() == 1:
                self.necknull_tn = self.MDag2_node.create("transform", "Biped_Neck_null", self.stretchyspine_tn)
            else:
                self.necknull_tn = self.MDag2_node.create("transform", "Biped_Neck_null", self.spinectrl_tn)

            self.neckctrl_tn = self.MDag2_node.create("transform", "Biped_Neck_ctrl", self.necknull_tn)
            ctrl_neck_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.neckctrl_tn)

            jnt_neck_obj = head_sl_ls.getDependNode(0)
            neck_path_n = om2.MDagPath()
            neck_path = neck_path_n.getAPathTo(jnt_neck_obj)
            jnt_neck_transform = om2.MFnTransform(neck_path)
            jnt_neck_t = jnt_neck_transform.translation(om2.MSpace.kWorld)

            necknull_transform = om2.MFnTransform(self.necknull_tn)
            necknull_transform.rotatePivotTranslation(om2.MSpace.kTransform)
            necknull_transform.setRotatePivotTranslation(jnt_neck_t, om2.MSpace.kTransform)

            neckctrl_transform = om2.MFnTransform(self.neckctrl_tn)
            neckctrl_transform_s = neckctrl_transform.findPlug("scale", False)

            if neckctrl_transform_s.isCompound:
                for i in range(neckctrl_transform_s.numChildren()):
                    child_plug = neckctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[0]/1.2)

            neckctrl_transform_align = neckctrl_transform.rotation(om2.MSpace.kTransform)
            neckctrl_transform_align[1] = +1.57079
            neckctrl_transform.setRotation(neckctrl_transform_align, om2.MSpace.kTransform)

            jnt_neck_r = cmds.xform("Neck", query=True, rotation=True, worldSpace=True)

            radian_neck_x = (jnt_neck_r[0]/180)*3.1415
            radian_neck_y = (jnt_neck_r[1]/180)*3.1415
            radian_neck_z = (jnt_neck_r[2]/180)*3.1415

            necknull_transform_r = necknull_transform.rotation(om2.MSpace.kTransform)
            necknull_transform_r[0], necknull_transform_r[1], necknull_transform_r[2] = radian_neck_x, radian_neck_y, radian_neck_z
            necknull_transform.setRotation(necknull_transform_r, om2.MSpace.kTransform)

            necknull_transform_trans = necknull_transform.transformation()
            necknull_transform_worldmatrix = necknull_transform_trans.asMatrix()

            necknull_transform_localmatrix = necknull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse()

            necknull_transform.setTransformation(om2.MTransformationMatrix(necknull_transform_localmatrix))

            self.MDG2_mod.renameNode(ctrl_neck_comb_cv, "Neck_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_Neck_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Neck_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_null.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Neck_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            ctrl_head_arcl_points = [om2.MPoint(-0.70, -0.1), om2.MPoint(-0.65, -0.03, 0.04), om2.MPoint(-0.50, 0.00, 0.1)]
            ctrl_head_sq_points = [om2.MPoint(-0.50, 0.00, 0.1), om2.MPoint(-0.30, 0.00, 0.25),  om2.MPoint(0.10, 0.00, 0.25),  om2.MPoint(0.20, 0.00, 0.05), om2.MPoint(0.20, 0.00, -0.05), om2.MPoint(0.10, 0.00, -0.25), om2.MPoint(-0.30, 0.00, -0.25), om2.MPoint(-0.50, 0.00, -0.1)]
            ctrl_head_arcr_points = [om2.MPoint(-0.50, 0.00, -0.1), om2.MPoint(-0.65, -0.03, -0.04), om2.MPoint(-0.70, -0.1)]

            self.draw_head_tn = self.MDag2_node.create("transform", "Draw_head_ctrl")
            crv_ctrl_head_line_l = self.MNurbs2_cv.createWithEditPoints(ctrl_head_sq_points, 1, 1, False, True, True, self.draw_head_tn)
            crv_ctrl_arc_l = self.MNurbs2_cv.createWithEditPoints(ctrl_head_arcl_points, 3, 1, False, True, True, self.draw_head_tn)
            crv_ctrl_arc_r = self.MNurbs2_cv.createWithEditPoints(ctrl_head_arcr_points, 3, 1, False, True, True, self.draw_head_tn)

            self.headnull_tn = self.MDag2_node.create("transform", "Biped_Head_null", self.neckctrl_tn)
            self.headrot_tn = self.MDag2_node.create("transform", "Biped_HeadRot_null", self.headnull_tn)
            self.headctrl_tn = self.MDag2_node.create("transform", "Biped_Head_ctrl", self.headrot_tn)
            self.facialnull_tn = self.MDag2_node.create("transform", "Biped_Facial_null", self.headctrl_tn)

            ctrl_head_comb_cv = self.MNurbs2_cv.create([crv_ctrl_head_line_l, crv_ctrl_arc_l, crv_ctrl_arc_r], self.headctrl_tn)

            ctrl_stretchyspine_circle_points = [om2.MPoint(0.30, 0.00, 0.00), om2.MPoint(0.00, 0.20, 0.30), om2.MPoint(-0.30, 0.00, 0.00), om2.MPoint(0.00, 0.20, -0.30), om2.MPoint(0.30, 0.00, 0.00)]

            self.stretchyheadctrl_tn = self.MDag2_node.create("transform", "Biped_StretchyNeck_ctrl", self.headctrl_tn)
            crv_ctrl_stretchyhead = self.MNurbs2_cv.createWithEditPoints(ctrl_stretchyspine_circle_points, 3, 1, False, True, True, self.stretchyheadctrl_tn)

            jnt_head_obj = head_sl_ls.getDependNode(1)
            head_path_n = om2.MDagPath()
            head_path = head_path_n.getAPathTo(jnt_head_obj)
            jnt_head_transform = om2.MFnTransform(head_path)
            jnt_head_t = jnt_head_transform.translation(om2.MSpace.kWorld)

            jnt_headtop_obj = head_sl_ls.getDependNode(2)
            jnt_headtop_transform = om2.MFnTransform(jnt_headtop_obj)
            jnt_headtop_t = jnt_headtop_transform.translation(om2.MSpace.kTransform)

            headtopnull_transform = om2.MFnTransform(self.headnull_tn)
            headtopnull_transform.setTranslation(jnt_head_t, om2.MSpace.kTransform)

            headtopctrl_transform = om2.MFnTransform(self.headctrl_tn)

            headtopctrl_transform_t = headtopctrl_transform.rotatePivotTranslation(om2.MSpace.kTransform)
            headtopctrl_transform_t[1] = jnt_headtop_t[1]+1
            headtopctrl_transform.setRotatePivotTranslation(headtopctrl_transform_t, om2.MSpace.kTransform)

            headtopctrl_transform_s = headtopctrl_transform.findPlug("scale", False)

            if headtopctrl_transform_s.isCompound:
                for i in range(headtopctrl_transform_s.numChildren()):
                    child_plug = headtopctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[0]/1.7)

            headtopctrl_transform_align = headtopctrl_transform.rotation(om2.MSpace.kTransform)
            headtopctrl_transform_align[1] = +1.57079
            headtopctrl_transform.setRotation(headtopctrl_transform_align, om2.MSpace.kTransform)

            jnt_head_r = cmds.xform("Head", query=True, rotation=True, worldSpace=True)

            radian_head_x = (jnt_head_r[0]/180)*3.1415
            radian_head_y = (jnt_head_r[1]/180)*3.1415
            radian_head_z = (jnt_head_r[2]/180)*3.1415

            headnull_transform_r = headtopnull_transform.rotation(om2.MSpace.kTransform)
            headnull_transform_r[0], headnull_transform_r[1], headnull_transform_r[2] = radian_head_x, radian_head_y, radian_head_z
            headtopnull_transform.setRotation(headnull_transform_r, om2.MSpace.kTransform)

            headtopnull_transform_trans = headtopnull_transform.transformation()
            headtopnull_transform_worldmatrix = headtopnull_transform_trans.asMatrix()

            headtopnull_transform_localmatrix = headtopnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * necknull_transform_localmatrix.inverse()

            headtopnull_transform.setTransformation(om2.MTransformationMatrix(headtopnull_transform_localmatrix))

            headtopctrl_path_n = om2.MDagPath()
            headtopctrl_path = headtopctrl_path_n.getAPathTo(self.headctrl_tn)
            headtopctrl_worldtransform = om2.MFnTransform(headtopctrl_path)

            headtopctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_head_t), om2.MSpace.kWorld, False)

            stretchyheadctrl_path = headtopctrl_path_n.getAPathTo(self.stretchyheadctrl_tn)
            stretchyheadctrl_worldtransform = om2.MFnTransform(stretchyheadctrl_path)

            stretchyheadctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_head_t), om2.MSpace.kWorld, False)

            self.MDG2_mod.commandToExecute('delete "Draw_head_ctrl"')
            self.MDG2_mod.renameNode(ctrl_head_comb_cv, "Head_shape")
            self.MDG2_mod.renameNode(crv_ctrl_stretchyhead, "StretchyNeck_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_Head_ctrl"')
            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_StretchyNeck_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Head_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_null.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Head_ctrl.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchyNeck_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchyNeck_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_StretchyNeck_ctrl.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Facial_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_Facial_null.visibility"')
            self.MDG2_mod.doIt()

            if cmds.objExists("loc_facial*"):
                facialloc_sl_ls = om2.MSelectionList()

                if cmds.objExists("loc_facialeye"):
                    facialloc_sl_ls.add("loc_facialeye")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "loc_facialeye":

                            ctrl_facial_square_points = [om2.MPoint(1.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0, -1.0), om2.MPoint(1.0, 0.0, -1.0), om2.MPoint(1.0, 0.0, 1.0)]

                            self.eyenull_tn = self.MDag2_node.create("transform", "Biped_Eye_null", self.facialnull_tn)
                            self.eyectrl_tn = self.MDag2_node.create("transform", "Biped_Eye_ctrl", self.eyenull_tn)
                            crv_ctrl_facial_square = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_square_points, 1, 2, False, True, True, self.eyectrl_tn)

                            loc_eye_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eye_transform = om2.MFnTransform(loc_eye_obj)
                            loc_eye_t = loc_eye_transform.translation(om2.MSpace.kTransform)

                            eyenull_transform = om2.MFnTransform(self.eyenull_tn)
                            eyenull_transform.setTranslation(loc_eye_t, om2.MSpace.kTransform)

                            eyectrl_transform = om2.MFnTransform(self.eyectrl_tn)

                            eyectrl_transform_r = eyectrl_transform.rotation(om2.MSpace.kTransform)
                            eyectrl_transform_r[0] = 1.5707
                            eyectrl_transform.setRotation(eyectrl_transform_r, om2.MSpace.kTransform)

                            eyectrl_transform_s = eyectrl_transform.scale()
                            eyectrl_transform_s[0], eyectrl_transform_s[2] = box_transform_s[0]/10, box_transform_s[0]/19
                            eyectrl_transform.setScale(eyectrl_transform_s)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_square, "Eye_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_Eye_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Eye_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_facialeyeblink"):
                    facialloc_sl_ls.add("loc_facialeyeblink")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "loc_facialeyeblink":

                            ctrl_eyeblink_curve1_points = [om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, 0.5), om2.MPoint(1.0, 0.0)]
                            ctrl_eyeblink_line1_points = [om2.MPoint(1.0, 0.0), om2.MPoint(0.9, 0.0, 0.05), om2.MPoint(0.8, 0.0, 0.02)]
                            ctrl_eyeblink_curve2_points = [om2.MPoint(0.8, 0.0, 0.02), om2.MPoint(0.0, 0.0, -0.5), om2.MPoint(-0.8, 0.0, 0.02)]
                            ctrl_eyeblink_line2_points = [om2.MPoint(-0.8, 0.0, 0.02), om2.MPoint(-0.9, 0.0, 0.05), om2.MPoint(-1.0, 0.0)]

                            self.draw_eyeblink_tn = self.MDag2_node.create("transform", "Draw_eyeblink_ctrl")
                            crv_ctrl_eyeblink_up1 = self.MNurbs2_cv.createWithEditPoints(ctrl_eyeblink_curve1_points, 3, 1, False, True, True, self.draw_eyeblink_tn)
                            crv_ctrl_eyeblink_up2 = self.MNurbs2_cv.createWithEditPoints(ctrl_eyeblink_line1_points, 3, 1, False, True, True, self.draw_eyeblink_tn)
                            crv_ctrl_eyeblink_down1 = self.MNurbs2_cv.createWithEditPoints(ctrl_eyeblink_curve2_points, 3, 1, False, True, True, self.draw_eyeblink_tn)
                            crv_ctrl_eyeblink_down2 = self.MNurbs2_cv.createWithEditPoints(ctrl_eyeblink_line2_points, 3, 1, False, True, True, self.draw_eyeblink_tn)

                            self.eyeblinknull_tn = self.MDag2_node.create("transform", "Biped_EyeBlink_null", self.eyectrl_tn)
                            self.eyeblinkctrl_tn = self.MDag2_node.create("transform", "Biped_EyeBlink_ctrl", self.eyeblinknull_tn)
                            crv_ctrl_facial_square = self.MNurbs2_cv.create([crv_ctrl_eyeblink_up1, crv_ctrl_eyeblink_up2, crv_ctrl_eyeblink_down1, crv_ctrl_eyeblink_down2], self.eyeblinkctrl_tn)

                            eyeblinkctrl_transform = om2.MFnTransform(self.eyeblinkctrl_tn)

                            eyeblinkctrl_transform_r = eyeblinkctrl_transform.rotation(om2.MSpace.kTransform)
                            eyeblinkctrl_transform_r[0] = -1.5707
                            eyeblinkctrl_transform.setRotation(eyeblinkctrl_transform_r, om2.MSpace.kTransform)

                            eyeblinkctrl_transform_s = eyeblinkctrl_transform.findPlug("scale", False)

                            if eyeblinkctrl_transform_s.isCompound:
                                for i in range(eyeblinkctrl_transform_s.numChildren()):
                                    child_plug = eyeblinkctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/65)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_square, "Eye_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 0.5 1 0.2 "Biped_EyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_EyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Eye_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_EyeBlink_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_facialeyeball") or cmds.objExists("loc_R_facialeyeball"):
                    facialloc_sl_ls.add("loc_L_facialeyeball")
                    facialloc_sl_ls.add("loc_R_facialeyeball")

                    if not cmds.objExists("grp_L_Eye"):
                        for index in range(facialloc_sl_ls.length()):
                            ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                            if str(ctrl_str)[3:][:-3] == "loc_L_facialeyeball":

                                self.leyegrp_tn = self.MDag2_node.create("transform", "grp_L_Eye", mesh_tn)

                                loc_leyeball_obj = facialloc_sl_ls.getDependNode(index)
                                loc_leyeball_transform1 = om2.MFnTransform(loc_leyeball_obj)
                                loc_leyeball_r = loc_leyeball_transform1.rotation(om2.MSpace.kTransform)

                                leyeball_loc_path_n = om2.MDagPath()
                                leyeball_loc_path = leyeball_loc_path_n.getAPathTo(loc_leyeball_obj)
                                loc_leyeball_transform2 = om2.MFnTransform(leyeball_loc_path)
                                loc_leyeball_t2 = loc_leyeball_transform2.translation(om2.MSpace.kWorld)

                                leyeball_transform = om2.MFnTransform(self.leyegrp_tn)
                                leyeball_transform.setTranslation(loc_leyeball_t2, om2.MSpace.kTransform)
                                leyeball_transform.setRotation(loc_leyeball_r, om2.MSpace.kTransform)

                    if not cmds.objExists("grp_R_Eye"):
                        for index in range(facialloc_sl_ls.length()):
                            ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                            if str(ctrl_str)[3:][:-3] == "loc_R_facialeyeball":

                                self.reyegrp_tn = self.MDag2_node.create("transform", "grp_R_Eye", mesh_tn)

                                loc_reyeball_obj = facialloc_sl_ls.getDependNode(index)
                                loc_reyeball_transform1 = om2.MFnTransform(loc_reyeball_obj)
                                loc_reyeball_r = loc_reyeball_transform1.rotation(om2.MSpace.kTransform)

                                reyeball_loc_path_n = om2.MDagPath()
                                reyeball_loc_path = reyeball_loc_path_n.getAPathTo(loc_reyeball_obj)
                                loc_reyeball_transform2 = om2.MFnTransform(reyeball_loc_path)
                                loc_reyeball_t2 = loc_reyeball_transform2.translation(om2.MSpace.kWorld)

                                reyeball_transform = om2.MFnTransform(self.reyegrp_tn)
                                reyeball_transform.setTranslation(loc_reyeball_t2, om2.MSpace.kTransform)
                                reyeball_transform.setRotation(loc_reyeball_r, om2.MSpace.kTransform)

                ctrl_facial_circle1_points = [om2.MPoint(1.0, 0.0), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(1.0, 0.0)]
                ctrl_leyeblink_circle_points = [om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, 0.5), om2.MPoint(1.0, 0.0), om2.MPoint(0.0, 0.0, -0.5), om2.MPoint(-0.7, 0.0), om2.MPoint(-1.0, 0.0)]

                if cmds.objExists("loc_L_facialeye"):
                    facialloc_sl_ls.add("loc_L_facialeye")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "loc_L_facialeye":

                            self.leyenull_tn = self.MDag2_node.create("transform", "Biped_LeftEye_null", self.eyectrl_tn)
                            self.leyectrl_tn = self.MDag2_node.create("transform", "Biped_LeftEye_ctrl", self.leyenull_tn)
                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.leyectrl_tn)

                            loc_leye_obj = facialloc_sl_ls.getDependNode(index)
                            loc_leye_transform = om2.MFnTransform(loc_leye_obj)
                            loc_leye_t = loc_leye_transform.translation(om2.MSpace.kTransform)

                            leyenull_transform = om2.MFnTransform(self.leyenull_tn)
                            leyenull_transform.setTranslation(loc_leye_t, om2.MSpace.kTransform)

                            leyectrl_transform = om2.MFnTransform(self.leyectrl_tn)

                            leyectrl_transform_r = leyectrl_transform.rotation(om2.MSpace.kTransform)
                            leyectrl_transform_r[0] = 1.5707
                            leyectrl_transform.setRotation(leyectrl_transform_r, om2.MSpace.kTransform)

                            leyectrl_transform_s = leyectrl_transform.findPlug("scale", False)

                            if leyectrl_transform_s.isCompound:
                                for i in range(leyectrl_transform_s.numChildren()):
                                    child_plug = leyectrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/28)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftEye_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_LeftEye_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftEye_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEye_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                            self.leyeblinknull_tn = self.MDag2_node.create("transform", "Biped_LeftEyeBlink_null", self.leyectrl_tn)
                            self.leyeblinkctrl_tn = self.MDag2_node.create("transform", "Biped_LeftEyeBlink_ctrl", self.leyeblinknull_tn)
                            crv_ctrl_leyeblink_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_leyeblink_circle_points, 3, 2, False, True, True, self.leyeblinkctrl_tn)

                            leyeblinkctrl_transform = om2.MFnTransform(self.leyeblinkctrl_tn)

                            leyeblinkctrl_transform_r = leyeblinkctrl_transform.rotation(om2.MSpace.kTransform)
                            leyeblinkctrl_transform_r[0] = -1.5707
                            leyeblinkctrl_transform.setRotation(leyeblinkctrl_transform_r, om2.MSpace.kTransform)

                            leyeblinkctrl_transform_s = leyeblinkctrl_transform.findPlug("scale", False)

                            if leyeblinkctrl_transform_s.isCompound:
                                for i in range(leyeblinkctrl_transform_s.numChildren()):
                                    child_plug = leyeblinkctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/60)

                            self.MDG2_mod.renameNode(crv_ctrl_leyeblink_circle, "LeftEyeBlink_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0.5 0 "Biped_LeftEyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftEyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeBlink_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                ctrl_reyeblink_circle_points = [om2.MPoint(1.0, 0.0), om2.MPoint(0.0, 0.0, 0.5), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -0.5), om2.MPoint(0.7, 0.0), om2.MPoint(1.0, 0.0)]

                if cmds.objExists("loc_R_facialeye"):
                    facialloc_sl_ls.add("loc_R_facialeye")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "loc_R_facialeye":

                            self.reyenull_tn = self.MDag2_node.create("transform", "Biped_RightEye_null", self.eyectrl_tn)
                            self.reyectrl_tn = self.MDag2_node.create("transform", "Biped_RightEye_ctrl", self.reyenull_tn)
                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.reyectrl_tn)

                            loc_reye_obj = facialloc_sl_ls.getDependNode(index)
                            loc_reye_transform = om2.MFnTransform(loc_reye_obj)
                            loc_reye_t = loc_reye_transform.translation(om2.MSpace.kTransform)

                            reyenull_transform = om2.MFnTransform(self.reyenull_tn)
                            reyenull_transform.setTranslation(loc_reye_t, om2.MSpace.kTransform)

                            reyectrl_transform = om2.MFnTransform(self.reyectrl_tn)

                            reyectrl_transform_r = reyectrl_transform.rotation(om2.MSpace.kTransform)
                            reyectrl_transform_r[0] = 1.5707
                            reyectrl_transform.setRotation(reyectrl_transform_r, om2.MSpace.kTransform)

                            reyectrl_transform_s = reyectrl_transform.findPlug("scale", False)

                            if reyectrl_transform_s.isCompound:
                                for i in range(reyectrl_transform_s.numChildren()):
                                    child_plug = reyectrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/28)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightEye_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_RightEye_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightEye_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEye_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                            self.reyeblinknull_tn = self.MDag2_node.create("transform", "Biped_RightEyeBlink_null", self.reyectrl_tn)
                            self.reyeblinkctrl_tn = self.MDag2_node.create("transform", "Biped_RightEyeBlink_ctrl", self.reyeblinknull_tn)
                            crv_ctrl_reyeblink_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_reyeblink_circle_points, 3, 2, False, True, True, self.reyeblinkctrl_tn)

                            reyeblinkctrl_transform = om2.MFnTransform(self.reyeblinkctrl_tn)

                            reyeblinkctrl_transform_r = reyeblinkctrl_transform.rotation(om2.MSpace.kTransform)
                            reyeblinkctrl_transform_r[0] = -1.5707
                            reyeblinkctrl_transform.setRotation(reyeblinkctrl_transform_r, om2.MSpace.kTransform)

                            reyeblinkctrl_transform_s = reyeblinkctrl_transform.findPlug("scale", False)

                            if reyeblinkctrl_transform_s.isCompound:
                                for i in range(reyeblinkctrl_transform_s.numChildren()):
                                    child_plug = reyeblinkctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/60)

                            self.MDG2_mod.renameNode(crv_ctrl_reyeblink_circle, "RightEyeBlink_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0.5 0 "Biped_RightEyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightEyeBlink_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeBlink_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_facialeyebrow") and cmds.objExists("loc_R_facialeyebrow"):
                    facialloc_sl_ls.add("loc_L_facialeyebrow")
                    facialloc_sl_ls.add("loc_R_facialeyebrow")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-16:][:-3] == "facialeyebrow":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_LeftEyebrow_null", self.facialnull_tn)
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_LeftEyebrow_ctrl", self.eyebrownull_tn)

                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_RightEyebrow_null", self.facialnull_tn)
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_RightEyebrow_ctrl", self.eyebrownull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.eyebrowctrl_tn)

                            loc_eyebrow_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eyebrow_transform = om2.MFnTransform(loc_eyebrow_obj)
                            loc_eyebrow_t = loc_eyebrow_transform.translation(om2.MSpace.kTransform)
                            loc_eyebrow_r = loc_eyebrow_transform.rotation(om2.MSpace.kTransform)

                            eyebrownull_transform = om2.MFnTransform(self.eyebrownull_tn)
                            eyebrownull_transform.setTranslation(loc_eyebrow_t, om2.MSpace.kTransform)

                            eyebrownull_transform.setRotation(loc_eyebrow_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform = om2.MFnTransform(self.eyebrowctrl_tn)

                            eyebrowctrl_transform_r = eyebrowctrl_transform.rotation(om2.MSpace.kTransform)
                            eyebrowctrl_transform_r[0] = 1.5707
                            eyebrowctrl_transform.setRotation(eyebrowctrl_transform_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform_s = eyebrowctrl_transform.findPlug("scale", False)

                            if eyebrowctrl_transform_s.isCompound:
                                for i in range(eyebrowctrl_transform_s.numChildren()):
                                    child_plug = eyebrowctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/60)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_LeftEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyebrow_ctrl.scaleZ"')
                                self.MDG2_mod.doIt()

                                eyebrow_sl_ls = om2.MSelectionList()
                                eyebrow_sl_ls.add("Biped_LeftEyebrow_ctrl")

                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_RightEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyebrow_ctrl.scaleZ"')
                                self.MDG2_mod.doIt()

                                eyebrow_sl_ls.add("Biped_RightEyebrow_ctrl")

                if cmds.objExists("loc_L_facialmiddleeyebrow") and cmds.objExists("loc_R_facialmiddleeyebrow"):
                    facialloc_sl_ls.add("loc_L_facialmiddleeyebrow")
                    facialloc_sl_ls.add("loc_R_facialmiddleeyebrow")
                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-16:][:-3] == "middleeyebrow":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_LeftMiddleEyebrow_null", eyebrow_sl_ls.getDependNode(0))
                                self.eyebrowoffset_tn = self.MDag2_node.create("transform", "Biped_LeftMiddleEyebrowOffset_null", self.eyebrownull_tn)
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_LeftMiddleEyebrow_ctrl", self.eyebrowoffset_tn)
                            else:
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_RightMiddleEyebrow_null", eyebrow_sl_ls.getDependNode(1))
                                self.eyebrowoffset_tn = self.MDag2_node.create("transform", "Biped_RightMiddleEyebrowOffset_null", self.eyebrownull_tn)
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_RightMiddleEyebrow_ctrl", self.eyebrowoffset_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.eyebrowctrl_tn)

                            loc_eyebrow_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eyebrow_transform = om2.MFnTransform(loc_eyebrow_obj)
                            loc_eyebrow_t = loc_eyebrow_transform.translation(om2.MSpace.kTransform)
                            loc_eyebrow_r = loc_eyebrow_transform.rotation(om2.MSpace.kTransform)

                            eyebrownull_transform = om2.MFnTransform(self.eyebrownull_tn)
                            eyebrownull_transform.setTranslation(loc_eyebrow_t, om2.MSpace.kTransform)
                            eyebrownull_transform.setRotation(loc_eyebrow_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform = om2.MFnTransform(self.eyebrowctrl_tn)
                            eyebrowctrl_transform_r = eyebrowctrl_transform.rotation(om2.MSpace.kTransform)
                            eyebrowctrl_transform_r[0] = 1.5707
                            eyebrowctrl_transform.setRotation(eyebrowctrl_transform_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform_s = eyebrowctrl_transform.findPlug("scale", False)

                            if eyebrowctrl_transform_s.isCompound:
                                for i in range(eyebrowctrl_transform_s.numChildren()):
                                    child_plug = eyebrowctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0] / 80)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftMiddleEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftMiddleEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftMiddleEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrowOffset_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleEyebrow_ctrl.scaleZ"')
                            else:
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightMiddleEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightMiddleEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightMiddleEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrowOffset_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleEyebrow_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_facialoutereyebrow") and cmds.objExists("loc_R_facialoutereyebrow"):
                    facialloc_sl_ls.add("loc_L_facialoutereyebrow")
                    facialloc_sl_ls.add("loc_R_facialoutereyebrow")
                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-15:][:-3] == "outereyebrow":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_LeftOuterEyebrow_null", eyebrow_sl_ls.getDependNode(0))
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_LeftOuterEyebrow_ctrl", self.eyebrownull_tn)
                            else:
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_RightOuterEyebrow_null", eyebrow_sl_ls.getDependNode(1))
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_RightOuterEyebrow_ctrl", self.eyebrownull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.eyebrowctrl_tn)

                            loc_eyebrow_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eyebrow_transform = om2.MFnTransform(loc_eyebrow_obj)
                            loc_eyebrow_t = loc_eyebrow_transform.translation(om2.MSpace.kTransform)
                            loc_eyebrow_r = loc_eyebrow_transform.rotation(om2.MSpace.kTransform)

                            eyebrownull_transform = om2.MFnTransform(self.eyebrownull_tn)
                            eyebrownull_transform.setTranslation(loc_eyebrow_t, om2.MSpace.kTransform)
                            eyebrownull_transform.setRotation(loc_eyebrow_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform = om2.MFnTransform(self.eyebrowctrl_tn)
                            eyebrowctrl_transform_r = eyebrowctrl_transform.rotation(om2.MSpace.kTransform)
                            eyebrowctrl_transform_r[0] = 1.5707
                            eyebrowctrl_transform.setRotation(eyebrowctrl_transform_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform_s = eyebrowctrl_transform.findPlug("scale", False)

                            if eyebrowctrl_transform_s.isCompound:
                                for i in range(eyebrowctrl_transform_s.numChildren()):
                                    child_plug = eyebrowctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0] / 80)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftOuterEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftOuterEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftOuterEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftOuterEyebrow_ctrl.scaleZ"')
                            else:
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightOuterEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightOuterEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightOuterEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightOuterEyebrow_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_facialinnereyebrow") and cmds.objExists("loc_R_facialinnereyebrow"):
                    facialloc_sl_ls.add("loc_L_facialinnereyebrow")
                    facialloc_sl_ls.add("loc_R_facialinnereyebrow")
                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-15:][:-3] == "innereyebrow":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_LeftInnerEyebrow_null", eyebrow_sl_ls.getDependNode(0))
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_LeftInnerEyebrow_ctrl", self.eyebrownull_tn)
                            else:
                                self.eyebrownull_tn = self.MDag2_node.create("transform", "Biped_RightInnerEyebrow_null", eyebrow_sl_ls.getDependNode(1))
                                self.eyebrowctrl_tn = self.MDag2_node.create("transform", "Biped_RightInnerEyebrow_ctrl", self.eyebrownull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.eyebrowctrl_tn)

                            loc_eyebrow_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eyebrow_transform = om2.MFnTransform(loc_eyebrow_obj)
                            loc_eyebrow_t = loc_eyebrow_transform.translation(om2.MSpace.kTransform)
                            loc_eyebrow_r = loc_eyebrow_transform.rotation(om2.MSpace.kTransform)

                            eyebrownull_transform = om2.MFnTransform(self.eyebrownull_tn)
                            eyebrownull_transform.setTranslation(loc_eyebrow_t, om2.MSpace.kTransform)
                            eyebrownull_transform.setRotation(loc_eyebrow_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform = om2.MFnTransform(self.eyebrowctrl_tn)
                            eyebrowctrl_transform_r = eyebrowctrl_transform.rotation(om2.MSpace.kTransform)
                            eyebrowctrl_transform_r[0] = 1.5707
                            eyebrowctrl_transform.setRotation(eyebrowctrl_transform_r, om2.MSpace.kTransform)

                            eyebrowctrl_transform_s = eyebrowctrl_transform.findPlug("scale", False)

                            if eyebrowctrl_transform_s.isCompound:
                                for i in range(eyebrowctrl_transform_s.numChildren()):
                                    child_plug = eyebrowctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/80)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftInnerEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftInnerEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftInnerEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftInnerEyebrow_ctrl.scaleZ"')
                            else:
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightInnerEyebrow_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightInnerEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightInnerEyebrow_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightInnerEyebrow_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                ctrl_facial_oval_points = [om2.MPoint(2.0, 0.0), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-2.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(2.0, 0.0)]

                if cmds.objExists("loc_L_facialear") and cmds.objExists("loc_R_facialear"):
                    facialloc_sl_ls.add("loc_L_facialear")
                    facialloc_sl_ls.add("loc_R_facialear")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-6:][:-3] == "ear":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.earnull_tn = self.MDag2_node.create("transform", "Biped_LeftEar_null", self.facialnull_tn)
                                self.earctrl_tn = self.MDag2_node.create("transform", "Biped_LeftEar_ctrl", self.earnull_tn)
                            else:
                                self.earnull_tn = self.MDag2_node.create("transform", "Biped_RightEar_null", self.facialnull_tn)
                                self.earctrl_tn = self.MDag2_node.create("transform", "Biped_RightEar_ctrl", self.earnull_tn)

                            crv_ctrl_facial_oval = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_oval_points, 1, 2, False, True, True, self.earctrl_tn)

                            loc_ear_obj = facialloc_sl_ls.getDependNode(index)
                            loc_ear_transform = om2.MFnTransform(loc_ear_obj)
                            loc_ear_t = loc_ear_transform.translation(om2.MSpace.kTransform)

                            earnull_transform = om2.MFnTransform(self.earnull_tn)
                            earnull_transform.setTranslation(loc_ear_t, om2.MSpace.kTransform)

                            earctrl_transform = om2.MFnTransform(self.earctrl_tn)

                            earctrl_transform_r = earctrl_transform.rotation(om2.MSpace.kTransform)
                            earctrl_transform_r[2] = 1.5707
                            earctrl_transform.setRotation(earctrl_transform_r, om2.MSpace.kTransform)

                            earctrl_transform_s = earctrl_transform.findPlug("scale", False)

                            if earctrl_transform_s.isCompound:
                                for i in range(earctrl_transform_s.numChildren()):
                                    child_plug = earctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/30)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_oval, "LeftEar_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_LeftEar_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftEar_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEar_ctrl.scaleZ"')
                            else:
                                self.MDG2_mod.renameNode(crv_ctrl_facial_oval, "RightEar_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_RightEar_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightEar_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEar_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                ctrl_facial_hexagon1_points = [om2.MPoint(1.0, 0.0), om2.MPoint(0.1, 0.0, 1.0), om2.MPoint(-0.1, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -0.3), om2.MPoint(1.0, 0.0)]

                if cmds.objExists("loc_L_facialeyesquint") and cmds.objExists("loc_R_facialeyesquint"):
                    facialloc_sl_ls.add("loc_L_facialeyesquint")
                    facialloc_sl_ls.add("loc_R_facialeyesquint")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-12:][:-3] == "eyesquint":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.eyesquintnull_tn = self.MDag2_node.create("transform", "Biped_LeftEyeSquint_null", self.facialnull_tn)
                                self.eyesquintctrl_tn = self.MDag2_node.create("transform", "Biped_LeftEyeSquint_ctrl", self.eyesquintnull_tn)
                            else:
                                self.eyesquintnull_tn = self.MDag2_node.create("transform", "Biped_RightEyeSquint_null", self.facialnull_tn)
                                self.eyesquintctrl_tn = self.MDag2_node.create("transform", "Biped_RightEyeSquint_ctrl", self.eyesquintnull_tn)

                            crv_ctrl_facial_hexagon1 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon1_points, 1, 2, False, True, True, self.eyesquintctrl_tn)

                            loc_eyesquint_obj = facialloc_sl_ls.getDependNode(index)
                            loc_eyesquint_transform = om2.MFnTransform(loc_eyesquint_obj)
                            loc_eyesquint_t = loc_eyesquint_transform.translation(om2.MSpace.kTransform)
                            loc_eyesquint_r = loc_eyesquint_transform.rotation(om2.MSpace.kTransform)

                            eyesquintnull_transform = om2.MFnTransform(self.eyesquintnull_tn)
                            eyesquintnull_transform.setTranslation(loc_eyesquint_t, om2.MSpace.kTransform)
                            eyesquintnull_transform.setRotation(loc_eyesquint_r, om2.MSpace.kTransform)

                            eyesquintctrl_transform = om2.MFnTransform(self.eyesquintctrl_tn)

                            eyesquintctrl_transform_r = eyesquintctrl_transform.rotation(om2.MSpace.kTransform)
                            eyesquintctrl_transform_r[0] = -1.5707
                            eyesquintctrl_transform.setRotation(eyesquintctrl_transform_r, om2.MSpace.kTransform)

                            eyesquintctrl_transform_s = eyesquintctrl_transform.findPlug("scale", False)

                            if eyesquintctrl_transform_s.isCompound:
                                for i in range(eyesquintctrl_transform_s.numChildren()):
                                    child_plug = eyesquintctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/100)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon1, "LeftEyeSquint_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_LeftEyeSquint_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftEyeSquint_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftEyeSquint_ctrl.scaleZ"')
                            else:
                                self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon1, "RightEyeSquint_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_RightEyeSquint_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightEyeSquint_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightEyeSquint_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_facialnosescrunch"):
                    facialloc_sl_ls.add("loc_facialnosescrunch")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "loc_facialnosescrunch":
                            self.nosescrunchnull_tn = self.MDag2_node.create("transform", "Biped_NoseScrunch_null", self.facialnull_tn)
                            self.nosescrunchctrl_tn = self.MDag2_node.create("transform", "Biped_NoseScrunch_ctrl", self.nosescrunchnull_tn)

                            crv_ctrl_facial_hexagon1 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon1_points, 1, 2, False, True, True, self.nosescrunchctrl_tn)

                            loc_nosescrunch_obj = facialloc_sl_ls.getDependNode(index)
                            loc_nosescrunch_transform = om2.MFnTransform(loc_nosescrunch_obj)
                            loc_nosescrunch_t = loc_nosescrunch_transform.translation(om2.MSpace.kTransform)

                            nosescrunchnull_transform = om2.MFnTransform(self.nosescrunchnull_tn)
                            nosescrunchnull_transform.setTranslation(loc_nosescrunch_t, om2.MSpace.kTransform)

                            nosescrunchctrl_transform = om2.MFnTransform(self.nosescrunchctrl_tn)

                            nosescrunchctrl_transform_r = nosescrunchctrl_transform.rotation(om2.MSpace.kTransform)
                            nosescrunchctrl_transform_r[0] = -1.5707
                            nosescrunchctrl_transform.setRotation(nosescrunchctrl_transform_r, om2.MSpace.kTransform)

                            nosescrunchctrl_transform_s = nosescrunchctrl_transform.findPlug("scale", False)

                            if nosescrunchctrl_transform_s.isCompound:
                                for i in range(nosescrunchctrl_transform_s.numChildren()):
                                    child_plug = nosescrunchctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/25)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon1, "NoseScrunch_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_NoseScrunch_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_NoseScrunch_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoseScrunch_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                nosescrunch_sl_ls = om2.MSelectionList()
                nosescrunch_sl_ls.add("Biped_NoseScrunch_ctrl")

                if cmds.objExists("loc_M_facialnosescrunch") and cmds.objExists("loc_L_facialnosescrunch") and cmds.objExists("loc_R_facialnosescrunch"):
                    facialloc_sl_ls.add("loc_M_facialnosescrunch")
                    facialloc_sl_ls.add("loc_L_facialnosescrunch")
                    facialloc_sl_ls.add("loc_R_facialnosescrunch")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-22:][:-3] == "M_facialnosescrunch" or str(ctrl_str)[-22:][:-3] == "L_facialnosescrunch" or str(ctrl_str)[-22:][:-3] == "R_facialnosescrunch":
                            if str(ctrl_str)[3:][:6] == "loc_M_":
                                self.nosescrunchnull_tn = self.MDag2_node.create("transform", "Biped_MiddleNoseScrunch_null", nosescrunch_sl_ls.getDependNode(0))
                                self.nosescrunchctrl_tn = self.MDag2_node.create("transform", "Biped_MiddleNoseScrunch_ctrl", self.nosescrunchnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.nosescrunchnull_tn = self.MDag2_node.create("transform", "Biped_LeftNoseScrunch_null", nosescrunch_sl_ls.getDependNode(0))
                                self.nosescrunchctrl_tn = self.MDag2_node.create("transform", "Biped_LeftNoseScrunch_ctrl", self.nosescrunchnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.nosescrunchnull_tn = self.MDag2_node.create("transform", "Biped_RightNoseScrunch_null", nosescrunch_sl_ls.getDependNode(0))
                                self.nosescrunchctrl_tn = self.MDag2_node.create("transform", "Biped_RightNoseScrunch_ctrl", self.nosescrunchnull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.nosescrunchctrl_tn)

                            loc_nosescrunch_obj = facialloc_sl_ls.getDependNode(index)
                            loc_nosescrunch_transform = om2.MFnTransform(loc_nosescrunch_obj)
                            loc_nosescrunch_t = loc_nosescrunch_transform.translation(om2.MSpace.kTransform)
                            loc_nosescrunch_r = loc_nosescrunch_transform.rotation(om2.MSpace.kTransform)

                            nosescrunchnull_transform = om2.MFnTransform(self.nosescrunchnull_tn)
                            nosescrunchnull_transform.setTranslation(loc_nosescrunch_t, om2.MSpace.kTransform)
                            nosescrunchnull_transform.setRotation(loc_nosescrunch_r, om2.MSpace.kTransform)

                            nosescrunchctrl_transform = om2.MFnTransform(self.nosescrunchctrl_tn)

                            if str(ctrl_str)[3:][:6] == "loc_M_":
                                nosescrunchctrl_transform_r = nosescrunchctrl_transform.rotation(om2.MSpace.kTransform)
                                nosescrunchctrl_transform_r[0] = -1.5707
                                nosescrunchctrl_transform.setRotation(nosescrunchctrl_transform_r, om2.MSpace.kTransform)
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                nosescrunchctrl_transform_r = nosescrunchctrl_transform.rotation(om2.MSpace.kTransform)
                                nosescrunchctrl_transform_r[0], nosescrunchctrl_transform_r[1] = 1.5707, 0.7853
                                nosescrunchctrl_transform.setRotation(nosescrunchctrl_transform_r, om2.MSpace.kTransform)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                nosescrunchctrl_transform_r = nosescrunchctrl_transform.rotation(om2.MSpace.kTransform)
                                nosescrunchctrl_transform_r[0], nosescrunchctrl_transform_r[1] = 1.5707, -0.7853
                                nosescrunchctrl_transform.setRotation(nosescrunchctrl_transform_r, om2.MSpace.kTransform)

                            nosescrunchctrl_transform_s = nosescrunchctrl_transform.findPlug("scale", False)

                            if nosescrunchctrl_transform_s.isCompound:
                                for i in range(nosescrunchctrl_transform_s.numChildren()):
                                    child_plug = nosescrunchctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/100)

                            if str(ctrl_str)[3:][:6] == "loc_M_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "MiddleNoseScrunch_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_MiddleNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_MiddleNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_MiddleNoseScrunch_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftNoseScrunch_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftNoseScrunch_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightNoseScrunch_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightNoseScrunch_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightNoseScrunch_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_facialcheek") and cmds.objExists("loc_R_facialcheek"):
                    facialloc_sl_ls.add("loc_L_facialcheek")
                    facialloc_sl_ls.add("loc_R_facialcheek")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-14:][:-3] == "facialcheek":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.facialcheeknull_tn = self.MDag2_node.create("transform", "Biped_LeftCheek_null", self.facialnull_tn)
                                self.facialcheekctrl_tn = self.MDag2_node.create("transform", "Biped_LeftCheek_ctrl", self.facialcheeknull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.facialcheeknull_tn = self.MDag2_node.create("transform", "Biped_RightCheek_null", self.facialnull_tn)
                                self.facialcheekctrl_tn = self.MDag2_node.create("transform", "Biped_RightCheek_ctrl", self.facialcheeknull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.facialcheekctrl_tn)

                            loc_facialcheek_obj = facialloc_sl_ls.getDependNode(index)
                            loc_facialcheek_transform = om2.MFnTransform(loc_facialcheek_obj)
                            loc_facialcheek_t = loc_facialcheek_transform.translation(om2.MSpace.kTransform)
                            loc_facialcheek_r = loc_facialcheek_transform.rotation(om2.MSpace.kTransform)

                            facialcheeknull_transform = om2.MFnTransform(self.facialcheeknull_tn)
                            facialcheeknull_transform.setTranslation(loc_facialcheek_t, om2.MSpace.kTransform)
                            facialcheeknull_transform.setRotation(loc_facialcheek_r, om2.MSpace.kTransform)

                            facialcheekctrl_transform = om2.MFnTransform(self.facialcheekctrl_tn)

                            facialcheekctrl_transform_r = facialcheekctrl_transform.rotation(om2.MSpace.kTransform)
                            facialcheekctrl_transform_r[0] = -1.5707
                            facialcheekctrl_transform.setRotation(facialcheekctrl_transform_r, om2.MSpace.kTransform)

                            facialcheekctrl_transform_s = facialcheekctrl_transform.findPlug("scale", False)

                            if facialcheekctrl_transform_s.isCompound:
                                for i in range(facialcheekctrl_transform_s.numChildren()):
                                    child_plug = facialcheekctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/50)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftCheek_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_LeftCheek_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftCheek_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftCheek_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightCheek_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_RightCheek_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightCheek_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightCheek_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                ctrl_facial_hexagon2_points = [om2.MPoint(2.50, 0.0, 0.3), om2.MPoint(0.2, 0.0, 1.25), om2.MPoint(-0.2, 0.0, 1.25), om2.MPoint(-2.50, 0.0, 0.3), om2.MPoint(-2.50, 0.0, -0.3), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(2.50, 0.0, -0.3), om2.MPoint(2.50, 0.0, 0.3)]
                ctrl_facial_hexagon3_points = [om2.MPoint(2.0, 0.0, 0.2), om2.MPoint(0.1, 0.0, 1.0), om2.MPoint(-0.1, 0.0, 1.0), om2.MPoint(-2.0, 0.0, 0.2), om2.MPoint(-2.0, 0.0, -0.2), om2.MPoint(0.0, 0.0, -0.8), om2.MPoint(2.0, 0.0, -0.2), om2.MPoint(2.0, 0.0, 0.2)]

                if cmds.objExists("loc_facialmouth"):
                    facialloc_sl_ls.add("loc_facialmouth")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-8:][:-3] == "mouth":
                            self.facialmouthnull_tn = self.MDag2_node.create("transform", "Biped_Mouth_null", self.facialnull_tn)
                            self.facialmouthctrl_tn = self.MDag2_node.create("transform", "Biped_Mouth_ctrl", self.facialmouthnull_tn)
                            crv_ctrl_facial_hexagon1 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon2_points, 1, 2, False, True, True, self.facialmouthctrl_tn)

                            self.faciallipnull_tn = self.MDag2_node.create("transform", "Biped_Lip_null", self.facialmouthctrl_tn)
                            self.faciallipctrl_tn = self.MDag2_node.create("transform", "Biped_Lip_ctrl", self.faciallipnull_tn)
                            crv_ctrl_facial_hexagon2 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon3_points, 1, 2, False, True, True, self.faciallipctrl_tn)

                            loc_facialmouth_obj = facialloc_sl_ls.getDependNode(index)
                            loc_facialmouth_transform = om2.MFnTransform(loc_facialmouth_obj)
                            loc_facialmouth_t = loc_facialmouth_transform.translation(om2.MSpace.kTransform)
                            loc_facialmouth_r = loc_facialmouth_transform.rotation(om2.MSpace.kTransform)

                            facialmouthnull_transform = om2.MFnTransform(self.facialmouthnull_tn)
                            facialmouthnull_transform.setTranslation(loc_facialmouth_t, om2.MSpace.kTransform)
                            facialmouthnull_transform.setRotation(loc_facialmouth_r, om2.MSpace.kTransform)

                            facialmouthctrl_transform = om2.MFnTransform(self.facialmouthctrl_tn)

                            facialmouthctrl_transform_r = facialmouthctrl_transform.rotation(om2.MSpace.kTransform)
                            facialmouthctrl_transform_r[0] = -1.5707
                            facialmouthctrl_transform.setRotation(facialmouthctrl_transform_r, om2.MSpace.kTransform)

                            facialmouthctrl_transform_s = facialmouthctrl_transform.findPlug("scale", False)

                            if facialmouthctrl_transform_s.isCompound:
                                for i in range(facialmouthctrl_transform_s.numChildren()):
                                    child_plug = facialmouthctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/40)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon1, "Mouth_shape")
                            self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon2, "Lip_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_Mouth_ctrl"')
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_Lip_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Mouth_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Mouth_ctrl.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Lip_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_facialupperlip") and cmds.objExists("loc_L_facialupperlip") and cmds.objExists("loc_R_facialupperlip"):
                    facialloc_sl_ls.add("loc_facialupperlip")
                    facialloc_sl_ls.add("loc_L_facialupperlip")
                    facialloc_sl_ls.add("loc_R_facialupperlip")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-17:][:-3] == "facialupperlip":
                            if str(ctrl_str)[3:][:18] == "loc_facialupperlip":
                                self.upperlipnull_tn = self.MDag2_node.create("transform", "Biped_UpperLip_null", self.faciallipctrl_tn)
                                self.upperlipctrl_tn = self.MDag2_node.create("transform", "Biped_UpperLip_ctrl", self.upperlipnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.upperlipnull_tn = self.MDag2_node.create("transform", "Biped_LeftUpperLip_null", self.faciallipctrl_tn)
                                self.upperlipctrl_tn = self.MDag2_node.create("transform", "Biped_LeftUpperLip_ctrl", self.upperlipnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.upperlipnull_tn = self.MDag2_node.create("transform", "Biped_RightUpperLip_null", self.faciallipctrl_tn)
                                self.upperlipctrl_tn = self.MDag2_node.create("transform", "Biped_RightUpperLip_ctrl", self.upperlipnull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.upperlipctrl_tn)

                            loc_upperlip_obj = facialloc_sl_ls.getDependNode(index)
                            loc_upperlip_transform = om2.MFnTransform(loc_upperlip_obj)
                            loc_upperlip_t = loc_upperlip_transform.translation(om2.MSpace.kTransform)
                            loc_upperlip_r = loc_upperlip_transform.rotation(om2.MSpace.kTransform)

                            upperlipnull_transform = om2.MFnTransform(self.upperlipnull_tn)
                            upperlipnull_transform.setTranslation(loc_upperlip_t, om2.MSpace.kTransform)
                            upperlipnull_transform.setRotation(loc_upperlip_r, om2.MSpace.kTransform)

                            upperlipctrl_transform = om2.MFnTransform(self.upperlipctrl_tn)

                            upperlipctrl_transform_r = upperlipctrl_transform.rotation(om2.MSpace.kTransform)
                            upperlipctrl_transform_r[0] = -1.5707
                            upperlipctrl_transform.setRotation(upperlipctrl_transform_r, om2.MSpace.kTransform)

                            upperlipctrl_transform_s = upperlipctrl_transform.findPlug("scale", False)

                            if upperlipctrl_transform_s.isCompound:
                                for i in range(upperlipctrl_transform_s.numChildren()):
                                    child_plug = upperlipctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/120)

                            if str(ctrl_str)[3:][:18] == "loc_facialupperlip":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "UpperLip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_UpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_UpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_UpperLip_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftUpperlip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftUpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftUpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftUpperLip_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightUpperLip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightUpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightUpperLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightUpperLip_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_faciallowerlip") and cmds.objExists("loc_L_faciallowerlip") and cmds.objExists("loc_R_faciallowerlip"):
                    facialloc_sl_ls.add("loc_faciallowerlip")
                    facialloc_sl_ls.add("loc_L_faciallowerlip")
                    facialloc_sl_ls.add("loc_R_faciallowerlip")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-17:][:-3] == "faciallowerlip":
                            if str(ctrl_str)[3:][:18] == "loc_faciallowerlip":
                                self.lowerlipnull_tn = self.MDag2_node.create("transform", "Biped_LowerLip_null", self.faciallipctrl_tn)
                                self.lowerlipctrl_tn = self.MDag2_node.create("transform", "Biped_LowerLip_ctrl", self.lowerlipnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.lowerlipnull_tn = self.MDag2_node.create("transform", "Biped_LeftLowerLip_null", self.faciallipctrl_tn)
                                self.lowerlipctrl_tn = self.MDag2_node.create("transform", "Biped_LeftLowerLip_ctrl", self.lowerlipnull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.lowerlipnull_tn = self.MDag2_node.create("transform", "Biped_RightLowerLip_null", self.faciallipctrl_tn)
                                self.lowerlipctrl_tn = self.MDag2_node.create("transform", "Biped_RightLowerLip_ctrl", self.lowerlipnull_tn)

                            crv_ctrl_facial_circle = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_circle1_points, 1, 2, False, True, True, self.lowerlipctrl_tn)

                            loc_lowerlip_obj = facialloc_sl_ls.getDependNode(index)
                            loc_lowerlip_transform = om2.MFnTransform(loc_lowerlip_obj)
                            loc_lowerlip_t = loc_lowerlip_transform.translation(om2.MSpace.kTransform)
                            loc_lowerlip_r = loc_lowerlip_transform.rotation(om2.MSpace.kTransform)

                            lowerlipnull_transform = om2.MFnTransform(self.lowerlipnull_tn)
                            lowerlipnull_transform.setTranslation(loc_lowerlip_t, om2.MSpace.kTransform)
                            lowerlipnull_transform.setRotation(loc_lowerlip_r, om2.MSpace.kTransform)

                            lowerlipctrl_transform = om2.MFnTransform(self.lowerlipctrl_tn)

                            lowerlipctrl_transform_r = lowerlipctrl_transform.rotation(om2.MSpace.kTransform)
                            lowerlipctrl_transform_r[0] = -1.5707
                            lowerlipctrl_transform.setRotation(lowerlipctrl_transform_r, om2.MSpace.kTransform)

                            lowerlipctrl_transform_s = lowerlipctrl_transform.findPlug("scale", False)

                            if lowerlipctrl_transform_s.isCompound:
                                for i in range(lowerlipctrl_transform_s.numChildren()):
                                    child_plug = lowerlipctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/120)

                            if str(ctrl_str)[3:][:18] == "loc_faciallowerlip":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LowerLip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LowerLip_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftLowerLip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftLowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftLowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLowerLip_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightLowerLip_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightLowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightLowerLip_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLowerLip_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                if cmds.objExists("loc_L_faciallipcorner") and cmds.objExists("loc_R_faciallipcorner"):
                    facialloc_sl_ls.add("loc_L_faciallipcorner")
                    facialloc_sl_ls.add("loc_R_faciallipcorner")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-18:][:-3] == "faciallipcorner":
                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.faciallipcornernull_tn = self.MDag2_node.create("transform", "Biped_LeftLipCorner_null", self.faciallipctrl_tn)
                                self.faciallipcornerctrl_tn = self.MDag2_node.create("transform", "Biped_LeftLipCorner_ctrl", self.faciallipcornernull_tn)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.faciallipcornernull_tn = self.MDag2_node.create("transform", "Biped_RightLipCorner_null", self.faciallipctrl_tn)
                                self.faciallipcornerctrl_tn = self.MDag2_node.create("transform", "Biped_RightLipCorner_ctrl", self.faciallipcornernull_tn)

                            crv_ctrl_facial_hexagon1 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon1_points, 1, 2, False, True, True, self.faciallipcornerctrl_tn)

                            loc_faciallipcorner_obj = facialloc_sl_ls.getDependNode(index)
                            loc_faciallipcorner_transform = om2.MFnTransform(loc_faciallipcorner_obj)
                            loc_faciallipcorner_t = loc_faciallipcorner_transform.translation(om2.MSpace.kTransform)
                            loc_faciallipcorner_r = loc_faciallipcorner_transform.rotation(om2.MSpace.kTransform)

                            faciallipcornernull_transform = om2.MFnTransform(self.faciallipcornernull_tn)
                            faciallipcornernull_transform.setTranslation(loc_faciallipcorner_t, om2.MSpace.kTransform)
                            faciallipcornernull_transform.setRotation(loc_faciallipcorner_r, om2.MSpace.kTransform)

                            faciallipcornerctrl_transform = om2.MFnTransform(self.faciallipcornerctrl_tn)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                faciallipcornerctrl_transform_r = faciallipcornerctrl_transform.rotation(om2.MSpace.kTransform)
                                faciallipcornerctrl_transform_r[0], faciallipcornerctrl_transform_r[2] = -1.5707, 1.5707
                                faciallipcornerctrl_transform.setRotation(faciallipcornerctrl_transform_r, om2.MSpace.kTransform)
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                faciallipcornerctrl_transform_r = faciallipcornerctrl_transform.rotation(om2.MSpace.kTransform)
                                faciallipcornerctrl_transform_r[0], faciallipcornerctrl_transform_r[2] = 1.5707, -1.5707
                                faciallipcornerctrl_transform.setRotation(faciallipcornerctrl_transform_r, om2.MSpace.kTransform)

                            faciallipcornerctrl_transform_s = faciallipcornerctrl_transform.findPlug("scale", False)

                            if faciallipcornerctrl_transform_s.isCompound:
                                for i in range(faciallipcornerctrl_transform_s.numChildren()):
                                    child_plug = faciallipcornerctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/70)

                            if str(ctrl_str)[3:][:6] == "loc_L_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "LeftLipCorner_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_LeftLipCorner_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftLipCorner_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftLipCorner_ctrl.scaleZ"')
                            elif str(ctrl_str)[3:][:6] == "loc_R_":
                                self.MDG2_mod.renameNode(crv_ctrl_facial_circle, "RightLipCorner_shape")
                                self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_RightLipCorner_ctrl"')
                                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightLipCorner_ctrl"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.translateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.translateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.scaleZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_null.visibility"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.translateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.rotateX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.rotateY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.rotateZ"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.scaleX"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.scaleY"')
                                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightLipCorner_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                ctrl_facial_hexagon3_points = [om2.MPoint(2.0, 0.0, 0.2), om2.MPoint(0.3, -1.0, 1.0), om2.MPoint(-0.3, -1.0, 1.0), om2.MPoint(-2.0, 0.0, 0.2), om2.MPoint(-2.0, 0.0, -0.2), om2.MPoint(0.0, 2.0, -0.4),  om2.MPoint(2.0, 0.0, -0.2), om2.MPoint(2.0, 0.0, 0.2)]

                if cmds.objExists("loc_facialjaw"):
                    facialloc_sl_ls.add("loc_facialjaw")

                    for index in range(facialloc_sl_ls.length()):
                        ctrl_str = facialloc_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[-6:][:-3] == "jaw":
                            self.facialjawnull_tn = self.MDag2_node.create("transform", "Biped_Jaw_null", self.facialnull_tn)
                            self.facialjawctrl_tn = self.MDag2_node.create("transform", "Biped_Jaw_ctrl", self.facialjawnull_tn)

                            crv_ctrl_facial_hexagon1 = self.MNurbs2_cv.createWithEditPoints(ctrl_facial_hexagon3_points, 1, 2, False, True, True, self.facialjawctrl_tn)

                            loc_facialjaw_obj = facialloc_sl_ls.getDependNode(index)
                            loc_facialjaw_transform = om2.MFnTransform(loc_facialjaw_obj)
                            loc_facialjaw_t = loc_facialjaw_transform.translation(om2.MSpace.kTransform)
                            loc_facialjaw_r = loc_facialjaw_transform.rotation(om2.MSpace.kTransform)

                            facialjawnull_transform = om2.MFnTransform(self.facialjawnull_tn)
                            facialjawnull_transform.setTranslation(loc_facialjaw_t, om2.MSpace.kTransform)
                            facialjawnull_transform.setRotation(loc_facialjaw_r, om2.MSpace.kTransform)

                            facialjawctrl_transform = om2.MFnTransform(self.facialjawctrl_tn)

                            facialjawctrl_transform_r = facialjawctrl_transform.rotation(om2.MSpace.kTransform)
                            facialjawctrl_transform_r[0] = -1.5707
                            facialjawctrl_transform.setRotation(facialjawctrl_transform_r, om2.MSpace.kTransform)

                            facialjawctrl_transform_s = facialjawctrl_transform.findPlug("scale", False)

                            if facialjawctrl_transform_s.isCompound:
                                for i in range(facialjawctrl_transform_s.numChildren()):
                                    child_plug = facialjawctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0] / 40)

                            self.MDG2_mod.renameNode(crv_ctrl_facial_hexagon1, "Jaw_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_Jaw_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_Jaw_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_Jaw_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

            larm_sl_ls = om2.MSelectionList()
            larm_sl_ls.add("LeftArm")
            larm_sl_ls.add("LeftForeArm")
            larm_sl_ls.add("LeftHand")

            fklarm_sl_ls = om2.MSelectionList()
            fklarm_sl_ls.add("LeftShoulder")
            fklarm_sl_ls.add("FkLeftArm")
            fklarm_sl_ls.add("FkLeftForeArm")
            fklarm_sl_ls.add("FkLeftHand")

            ctrl_shoulder_arc_l = [om2.MPoint(1.20, 0.15), om2.MPoint(1.10, 0.28, 0.10), om2.MPoint(0.90, 0.35, 0.25)]
            ctrl_shoulder_line = [om2.MPoint(0.90, 0.35, 0.25), om2.MPoint(0.30, 0.50, 0.25), om2.MPoint(0.25, 0.55, 0.20), om2.MPoint(0.25, 0.55, -0.20), om2.MPoint(0.30, 0.50, -0.25), om2.MPoint(0.90, 0.35, -0.25)]
            ctrl_shoulder_arc_r = [om2.MPoint(0.90, 0.35, -0.25), om2.MPoint(1.10, 0.28, -0.10), om2.MPoint(1.20, 0.15)]

            self.draw_shoulder_tn = self.MDag2_node.create("transform", "Draw_shoulder_ctrl")
            crv_ctrl_shoulder_arc_l = self.MNurbs2_cv.createWithEditPoints(ctrl_shoulder_arc_l, 3, 1, False, True, True, self.draw_shoulder_tn)
            crv_ctrl_shoulder_line = self.MNurbs2_cv.createWithEditPoints(ctrl_shoulder_line, 1, 1, False, True, True, self.draw_shoulder_tn)
            crv_ctrl_shoulder_arc_r = self.MNurbs2_cv.createWithEditPoints(ctrl_shoulder_arc_r, 3, 1, False, True, True, self.draw_shoulder_tn)

            if self.autostretch.currentIndex() == 1:
                self.lshouldernull_tn = self.MDag2_node.create("transform", "Biped_LeftShoulder_null", self.stretchyspine_tn)
            else:
                self.lshouldernull_tn = self.MDag2_node.create("transform", "Biped_LeftShoulder_null", self.spinectrl_tn)

            self.lshoulderctrl_tn = self.MDag2_node.create("transform", "Biped_LeftShoulder_ctrl", self.lshouldernull_tn)
            ctrl_shoulder_comb_cv = self.MNurbs2_cv.create([crv_ctrl_shoulder_arc_l, crv_ctrl_shoulder_line, crv_ctrl_shoulder_arc_r], self.lshoulderctrl_tn)

            jnt_lshoulder_obj = fklarm_sl_ls.getDependNode(0)
            lshoulder_path_n = om2.MDagPath()
            lshoulder_path = lshoulder_path_n.getAPathTo(jnt_lshoulder_obj)
            jnt_lshoulder_transform = om2.MFnTransform(lshoulder_path)
            jnt_lshoulder_t = jnt_lshoulder_transform.translation(om2.MSpace.kWorld)

            lshouldernull_transform = om2.MFnTransform(self.lshouldernull_tn)
            lshouldernull_transform.setRotatePivotTranslation(jnt_lshoulder_t, om2.MSpace.kTransform)

            jnt_lshoulder_r = cmds.xform("LeftShoulder", query=True, rotation=True, worldSpace=True)

            radian_lshoulder_x = (jnt_lshoulder_r[0]/180)*3.1415
            radian_lshoulder_y = (jnt_lshoulder_r[1]/180)*3.1415
            radian_lshoulder_z = (jnt_lshoulder_r[2]/180)*3.1415

            lshouldernull_transform_r = lshouldernull_transform.rotation(om2.MSpace.kTransform)
            lshouldernull_transform_r[0], lshouldernull_transform_r[1], lshouldernull_transform_r[2] = radian_lshoulder_x, radian_lshoulder_y, radian_lshoulder_z
            lshouldernull_transform.setRotation(lshouldernull_transform_r, om2.MSpace.kTransform)

            lshoulderctrl_transform = om2.MFnTransform(self.lshoulderctrl_tn)
            lshoulderctrl_transform_r = lshoulderctrl_transform.rotation(om2.MSpace.kTransform)
            lshoulderctrl_transform_r[0], lshoulderctrl_transform_r[1], lshoulderctrl_transform_r[2] = +1.57079, 2.5307, -1.57079
            lshoulderctrl_transform.setRotation(lshoulderctrl_transform_r, om2.MSpace.kTransform)

            lshoulderctrl_transform_s = lshoulderctrl_transform.findPlug("scale", False)

            if lshoulderctrl_transform_s.isCompound:
                for i in range(lshoulderctrl_transform_s.numChildren()):
                    child_plug = lshoulderctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[0]/3)

            lshouldernullnull_transform_trans = lshouldernull_transform.transformation()
            lshouldernullnull_transform_worldmatrix = lshouldernullnull_transform_trans.asMatrix()

            lshouldernullnull_transform_localmatrix = lshouldernullnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse()

            lshouldernull_transform.setTransformation(om2.MTransformationMatrix(lshouldernullnull_transform_localmatrix))

            lshoulderctrl_path_n = om2.MDagPath()
            lshoulderctrl_path = lshoulderctrl_path_n.getAPathTo(self.lshoulderctrl_tn)
            lshoulderctrl_worldtransform = om2.MFnTransform(lshoulderctrl_path)

            lshoulderctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_lshoulder_t), om2.MSpace.kWorld, False)

            self.MDG2_mod.commandToExecute('delete "Draw_shoulder_ctrl"')
            self.MDG2_mod.renameNode(ctrl_shoulder_comb_cv, "LeftShoulder_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_LeftShoulder_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftShoulder_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_null.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftShoulder_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            for index in range(fklarm_sl_ls.length()):
               jnt_lhand_obj = fklarm_sl_ls.getDependNode(index)
               lhand_path_n = om2.MDagPath()
               lhand_path = lhand_path_n.getAPathTo(jnt_lhand_obj)
               jnt_lhand_transform = om2.MFnTransform(lhand_path)
               jnt_lhand_t = jnt_lhand_transform.translation(om2.MSpace.kWorld)

               if index == 1:
                   self.larmnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftArm_null", self.lshoulderctrl_tn)
                   self.larmctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftArm_ctrl", self.larmnull_tn )
                   ctrl_larm_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.larmctrl_tn)

                   larmnull_transform = om2.MFnTransform(self.larmnull_tn)
                   larmnull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                   jnt_larm_r = cmds.xform("LeftArm", query=True, rotation=True, worldSpace=True)

                   radian_larm_x = (jnt_larm_r[0]/180)*3.1415
                   radian_larm_y = (jnt_larm_r[1]/180)*3.1415
                   radian_larm_z = (jnt_larm_r[2]/180)*3.1415

                   larmnull_transform_r = larmnull_transform.rotation(om2.MSpace.kTransform)
                   larmnull_transform_r[0], larmnull_transform_r[1], larmnull_transform_r[2] = radian_larm_x, radian_larm_y, radian_larm_z
                   larmnull_transform.setRotation(larmnull_transform_r, om2.MSpace.kTransform)

                   larmctrl_transform = om2.MFnTransform(self.larmctrl_tn)

                   larmctrl_transform_s = larmctrl_transform.findPlug("scale", False)
                   if larmctrl_transform_s.isCompound:
                       for i in range(larmctrl_transform_s.numChildren()):
                           child_plug = larmctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/2)

                   larmnull_transform_trans = larmnull_transform.transformation()
                   larmnull_transform_worldmatrix = larmnull_transform_trans.asMatrix()

                   larmnull_transform_localmatrix = larmnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * lshouldernullnull_transform_localmatrix.inverse()

                   larmnull_transform.setTransformation(om2.MTransformationMatrix(larmnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_larm_comb_cv, "FkLeftArm_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftArm_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftArm_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftArm_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

               elif index == 2:
                   self.lforearmnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftForeArm_null", self.larmctrl_tn)
                   self.lstretchyforearmnull_tn = self.MDag2_node.create("transform", "Biped_StretchyLeftForeArm_null", self.lforearmnull_tn)
                   self.lforearmctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftForeArm_ctrl", self.lstretchyforearmnull_tn )
                   ctrl_lforearm_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lforearmctrl_tn)

                   ctrl_elbow_triangle_points = [om2.MPoint(1.0, 0.0), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(1.0, 0.0)]
                   ctrl_elbow_arrow_points = [om2.MPoint(0.0, 0.0), om2.MPoint(0.0, 1.0), om2.MPoint(0.0, 0.8, 0.1), om2.MPoint(0.0, 1.0), om2.MPoint(-0.1, 0.8), om2.MPoint(0.0, 1.0), om2.MPoint(0.0, 0.8, -0.1), om2.MPoint(0.0, 1.0), om2.MPoint(0.1, 0.8)]

                   lforearmnull_transform = om2.MFnTransform(self.lforearmnull_tn)
                   lforearmnull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                   jnt_lforearm_r = cmds.xform("LeftForeArm", query=True, rotation=True, worldSpace=True)

                   radian_lforearm_x = (jnt_lforearm_r[0]/180)*3.1415
                   radian_lforearm_y = (jnt_lforearm_r[1]/180)*3.1415
                   radian_lforearm_z = (jnt_lforearm_r[2]/180)*3.1415

                   lforearmnull_transform_r = lforearmnull_transform.rotation(om2.MSpace.kTransform)
                   lforearmnull_transform_r[0], lforearmnull_transform_r[1], lforearmnull_transform_r[2] = radian_lforearm_x, radian_lforearm_y, radian_lforearm_z
                   lforearmnull_transform.setRotation(lforearmnull_transform_r, om2.MSpace.kTransform)

                   lforearmctrl_transform = om2.MFnTransform(self.lforearmctrl_tn)

                   lforearmctrl_transform_s = lforearmctrl_transform.findPlug("scale", False)
                   if lforearmctrl_transform_s.isCompound:
                       for i in range(lforearmctrl_transform_s.numChildren()):
                           child_plug = lforearmctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/2)

                   lforearmnull_transform_trans = lforearmnull_transform.transformation()
                   lforearmnull_transform_worldmatrix = lforearmnull_transform_trans.asMatrix()

                   lforearmnull_transform_localmatrix = lforearmnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * lshouldernullnull_transform_localmatrix.inverse() * larmnull_transform_localmatrix.inverse()

                   lforearmnull_transform.setTransformation(om2.MTransformationMatrix(lforearmnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_lforearm_comb_cv, "FkLeftForeArm_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftForeArm_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftForeArm_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftForeArm_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

                   if cmds.objExists("NoFlipLeftHand_Ik") and cmds.objExists("PVLeftHand_Ik"):

                       self.pvlelbownull_tn = self.MDag2_node.create("transform", "Biped_PVLeftElbow_null", self.masterctrl_tn)
                       self.pvlelbowctrl_tn = self.MDag2_node.create("transform", "Biped_PVLeftElbow_ctrl", self.pvlelbownull_tn)
                       crv_ctrl_elbow_triangle_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_triangle_points, 1, 1, False, True, True, self.pvlelbowctrl_tn)
                       crv_ctrl_elbow_arrow_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_arrow_points, 1, 1, False, True, True, self.pvlelbowctrl_tn)

                       pvlelbownull_transform = om2.MFnTransform(self.pvlelbownull_tn)
                       pvlelbownull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                       pvlelbowctrl_transform = om2.MFnTransform(self.pvlelbowctrl_tn)

                       pvlelbownull_transform_t = pvlelbownull_transform.translation(om2.MSpace.kTransform)
                       pvlelbownull_transform_t[2] = pvlelbownull_transform_t[2] * 4
                       pvlelbownull_transform.setTranslation(pvlelbownull_transform_t, om2.MSpace.kTransform)

                       pvlelbowctrl_transform_r = pvlelbowctrl_transform.rotation(om2.MSpace.kTransform)
                       pvlelbowctrl_transform_r[0] = -1.57079
                       pvlelbowctrl_transform.setRotation(pvlelbowctrl_transform_r, om2.MSpace.kTransform)

                       pvlelbowctrl_transform_s = pvlelbowctrl_transform.findPlug("scale", False)
                       if pvlelbowctrl_transform_s.isCompound:
                           for i in range(pvlelbowctrl_transform_s.numChildren()):
                               child_plug = pvlelbowctrl_transform_s.child(i)
                               attr_value = child_plug.setDouble(box_transform_s[0]/8)

                       self.MDG2_mod.renameNode(crv_ctrl_elbow_triangle_l, "PVLeftElbow_shape1")
                       self.MDG2_mod.renameNode(crv_ctrl_elbow_arrow_l, "PVLeftElbow_shape2")
                       self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_PVLeftElbow_ctrl"')
                       self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_PVLeftElbow_ctrl"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.translateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.translateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.translateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.scaleZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_null.visibility"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftElbow_ctrl.scaleZ"')
                       self.MDG2_mod.doIt()

               elif index == 3:
                   ctrl_lhand_line_up_points = [om2.MPoint(0.00, 0.05, 0.02), om2.MPoint(-0.60, 0.05, 0.02)]
                   ctrl_lhand_star_up_points = [om2.MPoint(-0.60, 0.05, 0.02), om2.MPoint(-0.70, 0.15, 0.20), om2.MPoint(-0.70, 0.09, 0.20), om2.MPoint(-0.70, 0.06, 0.13), om2.MPoint(-0.60, 0.00, 0.00), om2.MPoint(-0.70, 0.05, -0.13), om2.MPoint(-0.70, 0.09, -0.20), om2.MPoint(-0.70, 0.15, -0.20), om2.MPoint(-0.60, 0.05, -0.02)]
                   ctrl_lhand_line_down_points = [om2.MPoint(-0.60, 0.05, -0.02), om2.MPoint(-0.00, 0.05, -0.02)]

                   self.draw_lhand_tn = self.MDag2_node.create("transform", "Draw_lefthand_ctrl")
                   crv_ctrl_lhand_line_up = self.MNurbs2_cv.createWithEditPoints(ctrl_lhand_line_up_points, 1, 1, False, True, True, self.draw_lhand_tn)
                   crv_ctrl_lhand_star = self.MNurbs2_cv.createWithEditPoints(ctrl_lhand_star_up_points, 1, 1, False, True, True, self.draw_lhand_tn)
                   crv_ctrl_lhand_line_down = self.MNurbs2_cv.createWithEditPoints(ctrl_lhand_line_down_points, 1, 1, False, True, True, self.draw_lhand_tn)

                   self.lhandnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftHand_null", self.lforearmctrl_tn)
                   self.stretchylhandnull_tn = self.MDag2_node.create("transform", "Biped_StretchyLeftHand_null", self.lhandnull_tn)
                   self.lhandctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftHand_ctrl", self.stretchylhandnull_tn )
                   ctrl_lhandpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandctrl_tn)
                   ctrl_lhandnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandctrl_tn)

                   ctrl_lhandoption_line = [om2.MPoint(1.00, 0.00), om2.MPoint(0.00, 0.00, 1.50), om2.MPoint(-1.00, 0.00, 0.00), om2.MPoint(1.00, 0.00)]

                   self.lfingernull_tn = self.MDag2_node.create("transform", "Biped_LeftFingers_null", self.masterctrl_tn)

                   lhandnull_transform = om2.MFnTransform(self.lhandnull_tn)
                   lhandnull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                   lfingernull_transform = om2.MFnTransform(self.lfingernull_tn)
                   lfingernull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                   jnt_lhand_r = cmds.xform("LeftHand", query=True, rotation=True, worldSpace=True)

                   radian_lhand_x = (jnt_lhand_r[0]/180)*3.1415
                   radian_lhand_y = (jnt_lhand_r[1]/180)*3.1415
                   radian_lhand_z = (jnt_lhand_r[2]/180)*3.1415

                   lhandnull_transform_r = lhandnull_transform.rotation(om2.MSpace.kTransform)
                   lhandnull_transform_r[0], lhandnull_transform_r[1], lhandnull_transform_r[2] = radian_lhand_x, radian_lhand_y, radian_lhand_z
                   lhandnull_transform.setRotation(lhandnull_transform_r, om2.MSpace.kTransform)

                   lfingernull_transform_r = lfingernull_transform.rotation(om2.MSpace.kTransform)
                   lfingernull_transform_r[0], lfingernull_transform_r[1], lfingernull_transform_r[2] = radian_lhand_x, radian_lhand_y, radian_lhand_z
                   lfingernull_transform.setRotation(lfingernull_transform_r, om2.MSpace.kTransform)

                   lhandctrl_transform = om2.MFnTransform(self.lhandctrl_tn)

                   lhandctrl_transform_r = lhandctrl_transform.rotation(om2.MSpace.kTransform)
                   lhandctrl_transform_r[1] = 1.57079
                   lhandctrl_transform.setRotation(lhandctrl_transform_r, om2.MSpace.kTransform)

                   lhandctrl_transform_s = lhandctrl_transform.findPlug("scale", False)
                   if lhandctrl_transform_s.isCompound:
                       for i in range(lhandctrl_transform_s.numChildren()):
                           child_plug = lhandctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/4)

                   lhandnull_transform_trans = lhandnull_transform.transformation()
                   lhandnull_transform_worldmatrix = lhandnull_transform_trans.asMatrix()

                   lhandnull_transform_localmatrix = lhandnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * lshouldernullnull_transform_localmatrix.inverse() * larmnull_transform_localmatrix.inverse() * lforearmnull_transform_localmatrix.inverse()

                   lhandnull_transform.setTransformation(om2.MTransformationMatrix(lhandnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_lhandpositive_comb_cv, "FkLeftHand_shape1")
                   self.MDG2_mod.renameNode(ctrl_lhandnegative_comb_cv, "FkLeftHand_shape2")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftHand_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftHand_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftHand_ctrl.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingers_null.visibility"')

                   if cmds.objExists("NoFlipLeftHand_Ik") or self.autostretch.currentIndex() == 1:

                       self.lhandoption_tn = self.MDag2_node.create("transform", "Biped_LeftHandOptions_ctrl", larm_sl_ls.getDependNode(2))
                       ctrl_lhandoption_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_lhandoption_line, 1, 1, False, True, True, self.lhandoption_tn)

                       lhandoptionctrl_transform = om2.MFnTransform(self.lhandoption_tn)
                       lhandoptionctrl_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                       lhandoptionctrl_transform_t = lhandoptionctrl_transform.translation(om2.MSpace.kTransform)
                       lhandoptionctrl_transform_t[2] = jnt_lhand_t[2] - 20
                       lhandoptionctrl_transform.setTranslation(lhandoptionctrl_transform_t, om2.MSpace.kTransform)

                       lhandoptionctrl_transform_r = lhandoptionctrl_transform.rotation(om2.MSpace.kTransform)
                       lhandoptionctrl_transform_r[0], lhandoptionctrl_transform_r[1], lhandoptionctrl_transform_r[2] = radian_lhand_x - 1.57079, radian_lhand_y, radian_lhand_z
                       lhandoptionctrl_transform.setRotation(lhandoptionctrl_transform_r, om2.MSpace.kTransform)

                       lhandoptionctrl_transform_s = lhandoptionctrl_transform.findPlug("scale", False)
                       if lhandoptionctrl_transform_s.isCompound:
                           for i in range(lhandoptionctrl_transform_s.numChildren()):
                               child_plug = lhandoptionctrl_transform_s.child(i)
                               attr_value = child_plug.setDouble(box_transform_s[0]/12)

                       lhandoptionctrl_transform_trans = lhandoptionctrl_transform.transformation()
                       lhandoptionctrl_transform_worldmatrix = lhandoptionctrl_transform_trans.asMatrix()

                       lhandoptionctrl_transform_localmatrix = lhandoptionctrl_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * lshouldernullnull_transform_localmatrix.inverse() * larmnull_transform_localmatrix.inverse() * lforearmnull_transform_localmatrix.inverse() * lhandnull_transform_localmatrix.inverse()

                       lhandoptionctrl_transform.setTransformation(om2.MTransformationMatrix(lhandoptionctrl_transform_localmatrix))

                       self.MDG2_mod.renameNode(ctrl_lhandoption_cv, "LeftHandOptions_shape")
                       self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_LeftHandOptions_ctrl"')
                       self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftHandOptions_ctrl"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.translateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.translateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.translateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftHandOptions_ctrl.scaleZ"')
                       self.MDG2_mod.doIt()

                   ctrl_hand_line_l = [om2.MPoint(1.20, 0.15), om2.MPoint(1.10, 0.00, 0.20), om2.MPoint(0.90, 0.15, 0.35)]
                   ctrl_hand_line = [om2.MPoint(0.90, 0.15, 0.35), om2.MPoint(0.30, 0.30, 0.35), om2.MPoint(0.25, 0.35, 0.30), om2.MPoint(0.25, 0.35, -0.30), om2.MPoint(0.30, 0.30, -0.35), om2.MPoint(0.90, 0.15, -0.35)]
                   ctrl_hand_line_r = [om2.MPoint(0.90, 0.15, -0.35), om2.MPoint(1.10, 0.00, -0.20), om2.MPoint(1.20, 0.15)]

                   self.draw_lhand_tn = self.MDag2_node.create("transform", "Draw_iklefthand_ctrl")
                   crv_ctrl_hand_line_l = self.MNurbs2_cv.createWithEditPoints(ctrl_hand_line_l, 1, 1, False, True, True, self.draw_lhand_tn)
                   crv_ctrl_hand_line = self.MNurbs2_cv.createWithEditPoints(ctrl_hand_line, 1, 1, False, True, True, self.draw_lhand_tn)
                   crv_ctrl_hand_line_r = self.MNurbs2_cv.createWithEditPoints(ctrl_hand_line_r, 1, 1, False, True, True, self.draw_lhand_tn)

                   self.likhandnull_tn = self.MDag2_node.create("transform", "Biped_IkLeftHand_null", self.masterctrl_tn)
                   self.lhandrotnull_tn = self.MDag2_node.create("transform", "Biped_IkLeftHandRot_null", self.likhandnull_tn)
                   self.likhandctrl_tn = self.MDag2_node.create("transform", "Biped_IkLeftHand_ctrl", self.lhandrotnull_tn)
                   ctrl_likhand_comb_cv = self.MNurbs2_cv.create([crv_ctrl_hand_line_l, crv_ctrl_hand_line, crv_ctrl_hand_line_r], self.likhandctrl_tn)

                   self.nofliplelbownull_tn = self.MDag2_node.create("transform", "Biped_NoFlipLeftElbow_null", self.likhandnull_tn)
                   self.nofliplelbowctrl_tn = self.MDag2_node.create("transform", "Biped_NoFlipLeftElbow_ctrl", self.nofliplelbownull_tn)
                   self.nofliplelbowctrl_ln = self.MDag2_node.create("locator", "NoFlipLeftElbow_shape", self.nofliplelbowctrl_tn)

                   likhandnull_transform = om2.MFnTransform(self.likhandnull_tn)
                   likhandnull_transform.setTranslation(jnt_lhand_t, om2.MSpace.kTransform)

                   likhandnull_transform_r = likhandnull_transform.rotation(om2.MSpace.kTransform)
                   likhandnull_transform_r[0], likhandnull_transform_r[1], likhandnull_transform_r[2] = radian_lhand_x, radian_lhand_y, radian_lhand_z
                   likhandnull_transform.setRotation(likhandnull_transform_r, om2.MSpace.kTransform)

                   likhandctrl_transform = om2.MFnTransform(self.likhandctrl_tn)

                   lelbowctrl_transform = om2.MFnTransform(self.nofliplelbowctrl_tn)

                   likhandctrl_transform_t = likhandctrl_transform.translation(om2.MSpace.kTransform)
                   likhandctrl_transform_t[2] = -((jnt_lhand_t[1]+4)-jnt_lhand_t[1])
                   likhandctrl_transform.setTranslation(likhandctrl_transform_t, om2.MSpace.kTransform)

                   likhandctrl_transform_r = likhandctrl_transform.rotation(om2.MSpace.kTransform)
                   likhandctrl_transform_r[0], likhandctrl_transform_r[2] = 1.57079, 1.57079
                   likhandctrl_transform.setRotation(likhandctrl_transform_r, om2.MSpace.kTransform)

                   lelbowctrl_transform_t = lelbowctrl_transform.translation(om2.MSpace.kTransform)
                   lelbowctrl_transform_t[2] = -7
                   lelbowctrl_transform.setTranslation(lelbowctrl_transform_t, om2.MSpace.kTransform)

                   likhandctrl_transform_s = likhandctrl_transform.findPlug("scale", False)
                   if likhandctrl_transform_s.isCompound:
                       for i in range(likhandctrl_transform_s.numChildren()):
                           child_plug = likhandctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/3)

                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_IkLeftHand_ctrl"')
                   self.MDG2_mod.doIt()

                   likhandnull_path_n = om2.MDagPath()
                   likhandnull_path = likhandnull_path_n.getAPathTo(self.likhandctrl_tn)
                   likhandnull_worldtransform = om2.MFnTransform(likhandnull_path)

                   likhandnull_worldtransform.setRotatePivot(om2.MPoint(jnt_lhand_t), om2.MSpace.kWorld, False)

                   self.MDG2_mod.renameNode(ctrl_likhand_comb_cv, "IkLeftHand_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_IkLeftHand_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftHand_ctrl.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftElbow_null.visibility" 0')
                   self.MDG2_mod.commandToExecute('select -hierarchy "Biped_NoFlipLeftElbow_null"; hide -clearSelection;')
                   self.MDG2_mod.doIt()

                   ctrl_master_circle_points = [om2.MPoint(0.75, 0.0, 0.25), om2.MPoint(0.0, 0.0, 1.0), om2.MPoint(-1.0, 0.0), om2.MPoint(0.0, 0.0, -1.0), om2.MPoint(0.75, 0.0, -0.25), om2.MPoint(0.75, 0.0, 0.25)]

                   self.lfingerctrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerOptions_ctrl", larm_sl_ls.getDependNode(2))
                   ctrl_lfingerpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingerctrl_tn)

                   lfingerctrl_transform = om2.MFnTransform(self.lfingerctrl_tn)

                   lfingerctrl_transform_s = lfingerctrl_transform.findPlug("scale", False)
                   if lfingerctrl_transform_s.isCompound:
                       for i in range(lfingerctrl_transform_s.numChildren()):
                           child_plug = lfingerctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/3)

                   self.MDG2_mod.renameNode(ctrl_lfingerpositive_comb_cv, "LeftFingerOptions_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftFingerOptions_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerOptions_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerOptions_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

            try:
                lhandthumb_sl_ls = om2.MSelectionList()
                lhandthumb_sl_ls.add("LeftFingerThumb*")

                for index in range(lhandthumb_sl_ls.length()):
                    jnt_lhandthumb_obj = lhandthumb_sl_ls.getDependNode(index)
                    jnt_lhandthumb_path_n = om2.MDagPath()
                    jnt_lhandthumb_path = jnt_lhandthumb_path_n.getAPathTo(jnt_lhandthumb_obj)
                    jnt_lhandthumb_transform = om2.MFnTransform(jnt_lhandthumb_path)
                    jnt_lhandthumb_t = jnt_lhandthumb_transform.translation(om2.MSpace.kWorld)

                    self.lhandthumbnull_tn = self.MDag2_node.create("transform", "Biped_LeftFingerThumb{0}_null".format(index+1))
                    self.lhandthumbglobalcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerThumb{0}_globalcurl".format(index+1), self.lhandthumbnull_tn)
                    self.lhandthumbcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerThumb{0}_curl".format(index+1), self.lhandthumbglobalcurl_tn)
                    self.lhandthumbctrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerThumb{0}_ctrl".format(index+1), self.lhandthumbcurl_tn)
                    ctrl_lhandthumbpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandthumbctrl_tn)
                    ctrl_lhandthumbnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandthumbctrl_tn)

                    lhandthumbnull_transform = om2.MFnTransform(self.lhandthumbnull_tn)
                    lhandthumbnull_transform.setTranslation(jnt_lhandthumb_t, om2.MSpace.kTransform)

                    jnt_lhandthumb_r = cmds.xform("LeftFingerThumb{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_lhandthumb_x = (jnt_lhandthumb_r[0]/180)*3.1415
                    radian_lhandthumb_y = (jnt_lhandthumb_r[1]/180)*3.1415
                    radian_lhandthumb_z = (jnt_lhandthumb_r[2]/180)*3.1415

                    lhandthumbnull_transform_r = lhandthumbnull_transform.rotation(om2.MSpace.kTransform)
                    lhandthumbnull_transform_r[0], lhandthumbnull_transform_r[1], lhandthumbnull_transform_r[2] = radian_lhandthumb_x, radian_lhandthumb_y, radian_lhandthumb_z
                    lhandthumbnull_transform.setRotation(lhandthumbnull_transform_r, om2.MSpace.kTransform)

                    lhandthumbctrl_transform = om2.MFnTransform(self.lhandthumbctrl_tn)

                    lhandthumbctrl_transform_r = lhandthumbctrl_transform.rotation(om2.MSpace.kTransform)
                    lhandthumbctrl_transform_r[1] = 1.57079
                    lhandthumbctrl_transform.setRotation(lhandthumbctrl_transform_r, om2.MSpace.kTransform)

                    lhandthumbctrl_transform_s = lhandthumbctrl_transform.findPlug("scale", False)
                    if lhandthumbctrl_transform_s.isCompound:
                        for i in range(lhandthumbctrl_transform_s.numChildren()):
                            child_plug = lhandthumbctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    if index == 0:
                        lhand_tr_n = om2.MFnDagNode(self.lfingernull_tn)
                        lhand_tr_n.addChild(self.lhandthumbnull_tn)

                        lfingernull_transform_trans = lfingernull_transform.transformation()
                        lfingernull_transform_worldinversematrix = lfingernull_transform_trans.asMatrixInverse()

                        lhandthumbnull_transform_trans = lhandthumbnull_transform.transformation()
                        lhandthumbnull_transform_worldmatrix = lhandthumbnull_transform_trans.asMatrix()

                        lhandthumbnull_transform_localmatrix = lhandthumbnull_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lhandthumbnull_transform.setTransformation(om2.MTransformationMatrix(lhandthumbnull_transform_localmatrix))

                        self.lfingerthumbctrl_tn = self.MDag2_node.create("transform", "Biped_LeftThumbOptions_ctrl")
                        ctrl_lfingerthumbpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingerthumbctrl_tn)

                        lfingerthumbctrl_transform = om2.MFnTransform(self.lfingerthumbctrl_tn)

                        lfingerthumbctrl_transform_t = lfingerthumbctrl_transform.translation(om2.MSpace.kTransform)
                        lfingerthumbctrl_transform_t[0], lfingerthumbctrl_transform_t[1], lfingerthumbctrl_transform_t[2] = jnt_lhandthumb_t[0], jnt_lhandthumb_t[1], jnt_lhandthumb_t[2]
                        lfingerthumbctrl_transform.setTranslation(lfingerthumbctrl_transform_t, om2.MSpace.kTransform)

                        lfingerthumbctrl_transform_r= lfingerthumbctrl_transform.rotation(om2.MSpace.kTransform)
                        lfingerthumbctrl_transform_r[0], lfingerthumbctrl_transform_r[1], lfingerthumbctrl_transform_r[2] = lhandthumbnull_transform_r[0], lhandthumbnull_transform_r[1], lhandthumbnull_transform_r[2]
                        lfingerthumbctrl_transform.setRotation(lfingerthumbctrl_transform_r, om2.MSpace.kTransform)

                        lfingerthumbctrl_transform_s = lfingerthumbctrl_transform.findPlug("scale", False)
                        if lfingerthumbctrl_transform_s.isCompound:
                            for i in range(lfingerthumbctrl_transform_s.numChildren()):
                                child_plug = lfingerthumbctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        lhandjnt_tr_n = om2.MFnDagNode(larm_sl_ls.getDependNode(2))
                        lhandjnt_tr_n.addChild(self.lfingerthumbctrl_tn)

                        lfingerthumbctrl_transform_trans = lfingerthumbctrl_transform.transformation()
                        lfingerthumbctrl_transform_worldmatrix = lfingerthumbctrl_transform_trans.asMatrix()

                        lfingerthumbctrl_transform_localmatrix = lfingerthumbctrl_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lfingerthumbctrl_transform.setTransformation(om2.MTransformationMatrix(lfingerthumbctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_lfingerthumbpositive_comb_cv, "LeftThumbOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftThumbOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftThumbOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftThumbOptions_ctrl.scaleZ"')

                    else:
                        lhandthumbctrl_sl_ls = om2.MSelectionList()
                        lhandthumbctrl_sl_ls.add("Biped_LeftFingerThumb*_ctrl")
                        lhandthumbctrl_obj = lhandthumbctrl_sl_ls.getDependNode(index-1)

                        lhandthumbnull_sl_ls = om2.MSelectionList()
                        lhandthumbnull_sl_ls.add("Biped_LeftFingerThumb*_null")

                        lhandthumb_tr_n = om2.MFnDagNode(lhandthumbctrl_obj)
                        lhandthumb_tr_n.addChild(self.lhandthumbnull_tn)

                        lhandthumbnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(lhandthumbnull_sl_ls.length()-1):
                            parentobj = lhandthumbnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            lhandthumbnull_parentinvtransform_matrix = lhandthumbnull_parentinvtransform_matrix * null_Matrix

                        lhandthumbnull_childtransform_trans = lhandthumbnull_transform.transformation()
                        lhandthumbnull_childtransform_worldmatrix = lhandthumbnull_childtransform_trans.asMatrix()

                        lhandthumbnull_childtransform_localmatrix = lhandthumbnull_childtransform_worldmatrix * lfingernull_transform_worldinversematrix * lhandthumbnull_parentinvtransform_matrix

                        lhandthumbnull_transform.setTransformation(om2.MTransformationMatrix(lhandthumbnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_lhandthumbpositive_comb_cv, "LeftFingerThumb{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_lhandthumbnegative_comb_cv, "LeftFingerThumb{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftFingerThumb{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerThumb{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerThumb{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                lhandindex_sl_ls = om2.MSelectionList()
                lhandindex_sl_ls.add("LeftFingerIndex*")

                for index in range(lhandindex_sl_ls.length()):
                    jnt_lhandindex_obj = lhandindex_sl_ls.getDependNode(index)
                    jnt_lhandindex_path_n = om2.MDagPath()
                    jnt_lhandindex_path = jnt_lhandindex_path_n.getAPathTo(jnt_lhandindex_obj)
                    jnt_lhandindex_transform = om2.MFnTransform(jnt_lhandindex_path)
                    jnt_lhandindex_t = jnt_lhandindex_transform.translation(om2.MSpace.kWorld)

                    self.lhandindexnull_tn = self.MDag2_node.create("transform", "Biped_LeftFingerIndex{0}_null".format(index + 1))
                    self.lhandindexglobalcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerIndex{0}_globalcurl".format(index+1), self.lhandindexnull_tn)
                    self.lhandindexcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerIndex{0}_curl".format(index+1), self.lhandindexglobalcurl_tn)
                    self.lhandindexctrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerIndex{0}_ctrl".format(index + 1), self.lhandindexcurl_tn)
                    ctrl_lhandIndexpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandindexctrl_tn)
                    ctrl_lhandIndexnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandindexctrl_tn)

                    lhandindexnull_transform = om2.MFnTransform(self.lhandindexnull_tn)
                    lhandindexnull_transform.setRotatePivotTranslation(jnt_lhandindex_t, om2.MSpace.kTransform)

                    jnt_lhandindex_r = cmds.xform("LeftFingerIndex{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_lhandIndex_x = (jnt_lhandindex_r[0]/180)*3.1415
                    radian_lhandIndex_y = (jnt_lhandindex_r[1]/180)*3.1415
                    radian_lhandIndex_z = (jnt_lhandindex_r[2]/180)*3.1415

                    lhandindexnull_transform_r = lhandindexnull_transform.rotation(om2.MSpace.kTransform)
                    lhandindexnull_transform_r[0], lhandindexnull_transform_r[1], lhandindexnull_transform_r[2] = radian_lhandIndex_x, radian_lhandIndex_y, radian_lhandIndex_z
                    lhandindexnull_transform.setRotation(lhandindexnull_transform_r, om2.MSpace.kTransform)

                    lhandindexctrl_transform = om2.MFnTransform(self.lhandindexctrl_tn)

                    lhandindexctrl_transform_r = lhandindexctrl_transform.rotation(om2.MSpace.kTransform)
                    lhandindexctrl_transform_r[1] = 1.57079
                    lhandindexctrl_transform.setRotation(lhandindexctrl_transform_r, om2.MSpace.kTransform)

                    lhandindexctrl_transform_s = lhandindexctrl_transform.findPlug("scale", False)
                    if lhandindexctrl_transform_s.isCompound:
                        for i in range(lhandindexctrl_transform_s.numChildren()):
                            child_plug = lhandindexctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    if index == 0:
                        lhand_tr_n = om2.MFnDagNode(self.lfingernull_tn)
                        lhand_tr_n.addChild(self.lhandindexnull_tn)

                        lhandindexnull_transform_trans = lhandindexnull_transform.transformation()
                        lhandindexnull_transform_worldmatrix = lhandindexnull_transform_trans.asMatrix()

                        lhandindexnull_transform_localmatrix = lhandindexnull_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lhandindexnull_transform.setTransformation(om2.MTransformationMatrix(lhandindexnull_transform_localmatrix))

                        self.lfingerindexctrl_tn = self.MDag2_node.create("transform", "Biped_LeftIndexOptions_ctrl")
                        ctrl_lfingerindexpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingerindexctrl_tn)

                        lfingerindexctrl_transform = om2.MFnTransform(self.lfingerindexctrl_tn)

                        lfingerindexctrl_transform_t = lfingerindexctrl_transform.translation(om2.MSpace.kTransform)
                        lfingerindexctrl_transform_t[0], lfingerindexctrl_transform_t[1], lfingerindexctrl_transform_t[2] = jnt_lhandindex_t[0], jnt_lhandindex_t[1], jnt_lhandindex_t[2]
                        lfingerindexctrl_transform.setTranslation(lfingerindexctrl_transform_t, om2.MSpace.kTransform)

                        lfingerindexctrl_transform_r= lfingerindexctrl_transform.rotation(om2.MSpace.kTransform)
                        lfingerindexctrl_transform_r[0], lfingerindexctrl_transform_r[1], lfingerindexctrl_transform_r[2] = lhandindexnull_transform_r[0], lhandindexnull_transform_r[1], lhandindexnull_transform_r[2]
                        lfingerindexctrl_transform.setRotation(lfingerindexctrl_transform_r, om2.MSpace.kTransform)

                        lfingerindexctrl_transform_s = lfingerindexctrl_transform.findPlug("scale", False)
                        if lfingerindexctrl_transform_s.isCompound:
                            for i in range(lfingerindexctrl_transform_s.numChildren()):
                                child_plug = lfingerindexctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        lhandjnt_tr_n.addChild(self.lfingerindexctrl_tn)

                        lfingerindexctrl_transform_trans = lfingerindexctrl_transform.transformation()
                        lfingerindexctrl_transform_worldmatrix = lfingerindexctrl_transform_trans.asMatrix()

                        lfingerindexctrl_transform_localmatrix = lfingerindexctrl_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lfingerindexctrl_transform.setTransformation(om2.MTransformationMatrix(lfingerindexctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_lfingerindexpositive_comb_cv, "LeftIndexOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftIndexOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftIndexOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftIndexOptions_ctrl.scaleZ"')

                    else:
                        lhandIndexctrl_sl_ls = om2.MSelectionList()
                        lhandIndexctrl_sl_ls.add("Biped_LeftFingerIndex*_ctrl")
                        lhandIndexctrl_obj = lhandIndexctrl_sl_ls.getDependNode(index-1)

                        lhandIndexnull_sl_ls = om2.MSelectionList()
                        lhandIndexnull_sl_ls.add("Biped_LeftFingerIndex*_null")

                        lhandIndex_tr_n = om2.MFnDagNode(lhandIndexctrl_obj)
                        lhandIndex_tr_n.addChild(self.lhandindexnull_tn)

                        lhandIndexnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(lhandIndexnull_sl_ls.length()-1):
                            parentobj = lhandIndexnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            lhandIndexnull_parentinvtransform_matrix = lhandIndexnull_parentinvtransform_matrix * null_Matrix

                        lhandindexnull_childtransform_trans = lhandindexnull_transform.transformation()
                        lhandindexnull_childtransform_worldmatrix = lhandindexnull_childtransform_trans.asMatrix()

                        lhandindexnull_childtransform_localmatrix = lhandindexnull_childtransform_worldmatrix * lfingernull_transform_worldinversematrix * lhandIndexnull_parentinvtransform_matrix

                        lhandindexnull_transform.setTransformation(om2.MTransformationMatrix(lhandindexnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_lhandIndexpositive_comb_cv, "LeftFingerIndex{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_lhandIndexnegative_comb_cv, "LeftFingerIndex{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftFingerIndex{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerIndex{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerIndex{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                lhandmiddle_sl_ls = om2.MSelectionList()
                lhandmiddle_sl_ls.add("LeftFingerMiddle*")

                for index in range(lhandmiddle_sl_ls.length()):
                    jnt_lhandmiddle_obj = lhandmiddle_sl_ls.getDependNode(index)
                    jnt_lhandmiddle_path_n = om2.MDagPath()
                    jnt_lhandmiddle_path = jnt_lhandmiddle_path_n.getAPathTo(jnt_lhandmiddle_obj)
                    jnt_lhandmiddle_transform = om2.MFnTransform(jnt_lhandmiddle_path)
                    jnt_lhandmiddle_t = jnt_lhandmiddle_transform.translation(om2.MSpace.kWorld)

                    self.lhandmiddlenull_tn = self.MDag2_node.create("transform", "Biped_LeftFingerMiddle{0}_null".format(index + 1))
                    self.lhandmiddleglobalcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerMiddle{0}_globalcurl".format(index+1), self.lhandmiddlenull_tn)
                    self.lhandmiddlecurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerMiddle{0}_curl".format(index+1), self.lhandmiddleglobalcurl_tn)
                    self.lhandmiddlectrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerMiddle{0}_ctrl".format(index + 1), self.lhandmiddlecurl_tn)
                    ctrl_lhandmiddlepositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandmiddlectrl_tn)
                    ctrl_lhandmiddlenegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandmiddlectrl_tn)

                    lhandmiddlenull_transform = om2.MFnTransform(self.lhandmiddlenull_tn)
                    lhandmiddlenull_transform.setRotatePivotTranslation(jnt_lhandmiddle_t, om2.MSpace.kTransform)

                    jnt_lhandmiddle_r = cmds.xform("LeftFingerMiddle{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_lhandmiddle_x = (jnt_lhandmiddle_r[0]/180)*3.1415
                    radian_lhandmiddle_y = (jnt_lhandmiddle_r[1]/180)*3.1415
                    radian_lhandmiddle_z = (jnt_lhandmiddle_r[2]/180)*3.1415

                    lhandmiddlenull_transform_r = lhandmiddlenull_transform.rotation(om2.MSpace.kTransform)
                    lhandmiddlenull_transform_r[0], lhandmiddlenull_transform_r[1], lhandmiddlenull_transform_r[2] = radian_lhandmiddle_x, radian_lhandmiddle_y, radian_lhandmiddle_z
                    lhandmiddlenull_transform.setRotation(lhandmiddlenull_transform_r, om2.MSpace.kTransform)

                    lhandmiddlectrl_transform = om2.MFnTransform(self.lhandmiddlectrl_tn)

                    lhandmiddlectrl_transform_s = lhandmiddlectrl_transform.findPlug("scale", False)
                    if lhandmiddlectrl_transform_s.isCompound:
                        for i in range(lhandmiddlectrl_transform_s.numChildren()):
                            child_plug = lhandmiddlectrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    lhandmiddlectrl_transform_r = lhandmiddlectrl_transform.rotation(om2.MSpace.kTransform)
                    lhandmiddlectrl_transform_r[1] = 1.57079
                    lhandmiddlectrl_transform.setRotation(lhandmiddlectrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        lhand_tr_n = om2.MFnDagNode(self.lfingernull_tn)
                        lhand_tr_n.addChild(self.lhandmiddlenull_tn)

                        lhandmiddlenull_transform_trans = lhandmiddlenull_transform.transformation()
                        lhandmiddlenull_transform_worldmatrix = lhandmiddlenull_transform_trans.asMatrix()

                        lhandmiddlenull_transform_localmatrix = lhandmiddlenull_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lhandmiddlenull_transform.setTransformation(om2.MTransformationMatrix(lhandmiddlenull_transform_localmatrix))

                        self.lfingermiddlectrl_tn = self.MDag2_node.create("transform", "Biped_LeftMiddleOptions_ctrl")
                        ctrl_lfingermiddlepositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingermiddlectrl_tn)

                        lfingermiddlectrl_transform = om2.MFnTransform(self.lfingermiddlectrl_tn)

                        lfingermiddlectrl_transform_t = lfingermiddlectrl_transform.translation(om2.MSpace.kTransform)
                        lfingermiddlectrl_transform_t[0], lfingermiddlectrl_transform_t[1], lfingermiddlectrl_transform_t[2] = jnt_lhandmiddle_t[0], jnt_lhandmiddle_t[1], jnt_lhandmiddle_t[2]
                        lfingermiddlectrl_transform.setTranslation(lfingermiddlectrl_transform_t, om2.MSpace.kTransform)

                        lfingermiddlectrl_transform_r= lfingermiddlectrl_transform.rotation(om2.MSpace.kTransform)
                        lfingermiddlectrl_transform_r[0], lfingermiddlectrl_transform_r[1], lfingermiddlectrl_transform_r[2] = lhandmiddlenull_transform_r[0], lhandmiddlenull_transform_r[1], lhandmiddlenull_transform_r[2]
                        lfingermiddlectrl_transform.setRotation(lfingermiddlectrl_transform_r, om2.MSpace.kTransform)

                        lfingermiddlectrl_transform_s = lfingermiddlectrl_transform.findPlug("scale", False)
                        if lfingermiddlectrl_transform_s.isCompound:
                            for i in range(lfingermiddlectrl_transform_s.numChildren()):
                                child_plug = lfingermiddlectrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        lhandjnt_tr_n.addChild(self.lfingermiddlectrl_tn)

                        lfingermiddlectrl_transform_trans = lfingermiddlectrl_transform.transformation()
                        lfingermiddlectrl_transform_worldmatrix = lfingermiddlectrl_transform_trans.asMatrix()

                        lfingermiddlectrl_transform_localmatrix = lfingermiddlectrl_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lfingermiddlectrl_transform.setTransformation(om2.MTransformationMatrix(lfingermiddlectrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_lfingermiddlepositive_comb_cv, "LeftMiddleOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftMiddleOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftMiddleOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftMiddleOptions_ctrl.scaleZ"')

                    else:
                        lhandmiddlectrl_sl_ls = om2.MSelectionList()
                        lhandmiddlectrl_sl_ls.add("Biped_LeftFingerMiddle*_ctrl")
                        lhandmiddlectrl_obj = lhandmiddlectrl_sl_ls.getDependNode(index-1)

                        lhandmiddlenull_sl_ls = om2.MSelectionList()
                        lhandmiddlenull_sl_ls.add("Biped_LeftFingerMiddle*_null")

                        lhandmiddle_tr_n = om2.MFnDagNode(lhandmiddlectrl_obj)
                        lhandmiddle_tr_n.addChild(self.lhandmiddlenull_tn)

                        lhandmiddlenull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(lhandmiddlenull_sl_ls.length()-1):
                            parentobj = lhandmiddlenull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            lhandmiddlenull_parentinvtransform_matrix = lhandmiddlenull_parentinvtransform_matrix * null_Matrix

                        lhandmiddlenull_childtransform_trans = lhandmiddlenull_transform.transformation()
                        lhandmiddlenull_childtransform_worldmatrix = lhandmiddlenull_childtransform_trans.asMatrix()

                        lhandmiddlenull_childtransform_localmatrix = lhandmiddlenull_childtransform_worldmatrix * lfingernull_transform_worldinversematrix * lhandmiddlenull_parentinvtransform_matrix

                        lhandmiddlenull_transform.setTransformation(om2.MTransformationMatrix(lhandmiddlenull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_lhandmiddlepositive_comb_cv, "LeftFingerMiddle{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_lhandmiddlenegative_comb_cv, "LeftFingerMiddle{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftFingerMiddle{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerMiddle{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerMiddle{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                lhandring_sl_ls = om2.MSelectionList()
                lhandring_sl_ls.add("LeftFingerRing*")

                for index in range(lhandring_sl_ls.length()):
                    jnt_lhandring_obj = lhandring_sl_ls.getDependNode(index)
                    jnt_lhandring_path_n = om2.MDagPath()
                    jnt_lhandring_path = jnt_lhandring_path_n.getAPathTo(jnt_lhandring_obj)
                    jnt_lhandring_transform = om2.MFnTransform(jnt_lhandring_path)
                    jnt_lhandring_t = jnt_lhandring_transform.translation(om2.MSpace.kWorld)

                    self.lhandringnull_tn = self.MDag2_node.create("transform", "Biped_LeftFingerRing{0}_null".format(index + 1))
                    self.lhandringglobalcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerRing{0}_globalcurl".format(index+1), self.lhandringnull_tn)
                    self.lhandringcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerRing{0}_curl".format(index+1), self.lhandringglobalcurl_tn)
                    self.lhandringctrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerRing{0}_ctrl".format(index + 1), self.lhandringcurl_tn)
                    ctrl_lhandringpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandringctrl_tn)
                    ctrl_lhandringnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandringctrl_tn)

                    lhandringnull_transform = om2.MFnTransform(self.lhandringnull_tn)
                    lhandringnull_transform.setRotatePivotTranslation(jnt_lhandring_t, om2.MSpace.kTransform)

                    jnt_lhandring_r = cmds.xform("LeftFingerRing{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_lhandring_x = (jnt_lhandring_r[0]/180)*3.1415
                    radian_lhandring_y = (jnt_lhandring_r[1]/180)*3.1415
                    radian_lhandring_z = (jnt_lhandring_r[2]/180)*3.1415

                    lhandringnull_transform_r = lhandringnull_transform.rotation(om2.MSpace.kTransform)
                    lhandringnull_transform_r[0], lhandringnull_transform_r[1], lhandringnull_transform_r[2] = radian_lhandring_x, radian_lhandring_y, radian_lhandring_z
                    lhandringnull_transform.setRotation(lhandringnull_transform_r, om2.MSpace.kTransform)

                    lhandringctrl_transform = om2.MFnTransform(self.lhandringctrl_tn)

                    lhandringctrl_transform_s = lhandringctrl_transform.findPlug("scale", False)
                    if lhandringctrl_transform_s.isCompound:
                        for i in range(lhandringctrl_transform_s.numChildren()):
                            child_plug = lhandringctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    lhandringctrl_transform_r = lhandringctrl_transform.rotation(om2.MSpace.kTransform)
                    lhandringctrl_transform_r[1] = 1.57079
                    lhandringctrl_transform.setRotation(lhandringctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        lhand_tr_n = om2.MFnDagNode(self.lfingernull_tn)
                        lhand_tr_n.addChild(self.lhandringnull_tn)

                        lhandringnull_transform_trans = lhandringnull_transform.transformation()
                        lhandringnull_transform_worldmatrix = lhandringnull_transform_trans.asMatrix()

                        lhandringnull_transform_localmatrix = lhandringnull_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lhandringnull_transform.setTransformation(om2.MTransformationMatrix(lhandringnull_transform_localmatrix))

                        self.lfingerringctrl_tn = self.MDag2_node.create("transform", "Biped_LeftRingOptions_ctrl")
                        ctrl_lfingerringpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingerringctrl_tn)

                        lfingerringctrl_transform = om2.MFnTransform(self.lfingerringctrl_tn)

                        lfingerringctrl_transform_t = lfingerringctrl_transform.translation(om2.MSpace.kTransform)
                        lfingerringctrl_transform_t[0], lfingerringctrl_transform_t[1], lfingerringctrl_transform_t[2] = jnt_lhandring_t[0], jnt_lhandring_t[1], jnt_lhandring_t[2]
                        lfingerringctrl_transform.setTranslation(lfingerringctrl_transform_t, om2.MSpace.kTransform)

                        lfingerringctrl_transform_r= lfingerringctrl_transform.rotation(om2.MSpace.kTransform)
                        lfingerringctrl_transform_r[0], lfingerringctrl_transform_r[1], lfingerringctrl_transform_r[2] = lhandringnull_transform_r[0], lhandringnull_transform_r[1], lhandringnull_transform_r[2]
                        lfingerringctrl_transform.setRotation(lfingerringctrl_transform_r, om2.MSpace.kTransform)

                        lfingerringctrl_transform_s = lfingerringctrl_transform.findPlug("scale", False)
                        if lfingerringctrl_transform_s.isCompound:
                            for i in range(lfingerringctrl_transform_s.numChildren()):
                                child_plug = lfingerringctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        lhandjnt_tr_n.addChild(self.lfingerringctrl_tn)

                        lfingerringctrl_transform_trans = lfingerringctrl_transform.transformation()
                        lfingerringctrl_transform_worldmatrix = lfingerringctrl_transform_trans.asMatrix()

                        lfingerringctrl_transform_localmatrix = lfingerringctrl_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lfingerringctrl_transform.setTransformation(om2.MTransformationMatrix(lfingerringctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_lfingerringpositive_comb_cv, "LeftRingOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftRingOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftRingOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftRingOptions_ctrl.scaleZ"')

                    else:
                        lhandringctrl_sl_ls = om2.MSelectionList()
                        lhandringctrl_sl_ls.add("Biped_LeftFingerRing*_ctrl")
                        lhandringctrl_obj = lhandringctrl_sl_ls.getDependNode(index-1)

                        lhandringnull_sl_ls = om2.MSelectionList()
                        lhandringnull_sl_ls.add("Biped_LeftFingerRing*_null")

                        lhandring_tr_n = om2.MFnDagNode(lhandringctrl_obj)
                        lhandring_tr_n.addChild(self.lhandringnull_tn)

                        lhandringnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(lhandringnull_sl_ls.length()-1):
                            parentobj = lhandringnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            lhandringnull_parentinvtransform_matrix = lhandringnull_parentinvtransform_matrix * null_Matrix

                        lhandringnull_childtransform_trans = lhandringnull_transform.transformation()
                        lhandringnull_childtransform_worldmatrix = lhandringnull_childtransform_trans.asMatrix()

                        lhandringnull_childtransform_localmatrix = lhandringnull_childtransform_worldmatrix * lfingernull_transform_worldinversematrix * lhandringnull_parentinvtransform_matrix

                        lhandringnull_transform.setTransformation(om2.MTransformationMatrix(lhandringnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_lhandringpositive_comb_cv, "LeftFingerRing{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_lhandringnegative_comb_cv, "LeftFingerRing{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftFingerRing{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerRing{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerRing{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                lhandpinky_sl_ls = om2.MSelectionList()
                lhandpinky_sl_ls.add("LeftFingerPinky*")

                for index in range(lhandpinky_sl_ls.length()):
                    jnt_lhandpinky_obj = lhandpinky_sl_ls.getDependNode(index)
                    jnt_lhandpinky_path_n = om2.MDagPath()
                    jnt_lhandpinky_path = jnt_lhandpinky_path_n.getAPathTo(jnt_lhandpinky_obj)
                    jnt_lhandpinky_transform = om2.MFnTransform(jnt_lhandpinky_path)
                    jnt_lhandpinky_t = jnt_lhandpinky_transform.translation(om2.MSpace.kWorld)

                    self.lhandpinkynull_tn = self.MDag2_node.create("transform", "Biped_LeftFingerPinky{0}_null".format(index + 1))
                    self.lhandpinkyglobalcurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerPinky{0}_globalcurl".format(index+1), self.lhandpinkynull_tn)
                    self.lhandpinkycurl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerPinky{0}_curl".format(index+1), self.lhandpinkyglobalcurl_tn)
                    self.lhandpinkyctrl_tn = self.MDag2_node.create("transform", "Biped_LeftFingerPinky{0}_ctrl".format(index + 1), self.lhandpinkycurl_tn)
                    ctrl_lhandpinkypositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.lhandpinkyctrl_tn)
                    ctrl_lhandpinkynegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_lhand_line_up, crv_ctrl_lhand_star, crv_ctrl_lhand_line_down], self.lhandpinkyctrl_tn)

                    lhandpinkynull_transform = om2.MFnTransform(self.lhandpinkynull_tn)
                    lhandpinkynull_transform.setRotatePivotTranslation(jnt_lhandpinky_t, om2.MSpace.kTransform)

                    jnt_lhandpinky_r = cmds.xform("LeftFingerPinky{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_lhandpinky_x = (jnt_lhandpinky_r[0]/180)*3.1415
                    radian_lhandpinky_y = (jnt_lhandpinky_r[1]/180)*3.1415
                    radian_lhandpinky_z = (jnt_lhandpinky_r[2]/180)*3.1415

                    lhandpinkynull_transform_r = lhandpinkynull_transform.rotation(om2.MSpace.kTransform)
                    lhandpinkynull_transform_r[0], lhandpinkynull_transform_r[1], lhandpinkynull_transform_r[2] = radian_lhandpinky_x, radian_lhandpinky_y, radian_lhandpinky_z
                    lhandpinkynull_transform.setRotation(lhandpinkynull_transform_r, om2.MSpace.kTransform)

                    lhandpinkyctrl_transform = om2.MFnTransform(self.lhandpinkyctrl_tn)

                    lhandpinkyctrl_transform_s = lhandpinkyctrl_transform.findPlug("scale", False)
                    if lhandpinkyctrl_transform_s.isCompound:
                        for i in range(lhandpinkyctrl_transform_s.numChildren()):
                            child_plug = lhandpinkyctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    lhandpinkyctrl_transform_r = lhandpinkyctrl_transform.rotation(om2.MSpace.kTransform)
                    lhandpinkyctrl_transform_r[1] = 1.57079
                    lhandpinkyctrl_transform.setRotation(lhandpinkyctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        lhand_tr_n = om2.MFnDagNode(self.lfingernull_tn)
                        lhand_tr_n.addChild(self.lhandpinkynull_tn)

                        lhandpinkynull_transform_trans = lhandpinkynull_transform.transformation()
                        lhandpinkynull_transform_worldmatrix = lhandpinkynull_transform_trans.asMatrix()

                        lhandpinkynull_transform_localmatrix = lhandpinkynull_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lhandpinkynull_transform.setTransformation(om2.MTransformationMatrix(lhandpinkynull_transform_localmatrix))

                        self.lfingerpinkyctrl_tn = self.MDag2_node.create("transform", "Biped_LeftPinkyOptions_ctrl")
                        ctrl_lfingerpinkypositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.lfingerpinkyctrl_tn)

                        lfingerpinkyctrl_transform = om2.MFnTransform(self.lfingerpinkyctrl_tn)

                        lfingerpinkyctrl_transform_t = lfingerpinkyctrl_transform.translation(om2.MSpace.kTransform)
                        lfingerpinkyctrl_transform_t[0], lfingerpinkyctrl_transform_t[1], lfingerpinkyctrl_transform_t[2] = jnt_lhandpinky_t[0], jnt_lhandpinky_t[1], jnt_lhandpinky_t[2]
                        lfingerpinkyctrl_transform.setTranslation(lfingerpinkyctrl_transform_t, om2.MSpace.kTransform)

                        lfingerpinkyctrl_transform_r= lfingerpinkyctrl_transform.rotation(om2.MSpace.kTransform)
                        lfingerpinkyctrl_transform_r[0], lfingerpinkyctrl_transform_r[1], lfingerpinkyctrl_transform_r[2] = lhandpinkynull_transform_r[0], lhandpinkynull_transform_r[1], lhandpinkynull_transform_r[2]
                        lfingerpinkyctrl_transform.setRotation(lfingerpinkyctrl_transform_r, om2.MSpace.kTransform)

                        lfingerpinkyctrl_transform_s = lfingerpinkyctrl_transform.findPlug("scale", False)
                        if lfingerpinkyctrl_transform_s.isCompound:
                            for i in range(lfingerpinkyctrl_transform_s.numChildren()):
                                child_plug = lfingerpinkyctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        lhandjnt_tr_n.addChild(self.lfingerpinkyctrl_tn)

                        lfingerpinkyctrl_transform_trans = lfingerpinkyctrl_transform.transformation()
                        lfingerpinkyctrl_transform_worldmatrix = lfingerpinkyctrl_transform_trans.asMatrix()

                        lfingerpinkyctrl_transform_localmatrix = lfingerpinkyctrl_transform_worldmatrix * lfingernull_transform_worldinversematrix

                        lfingerpinkyctrl_transform.setTransformation(om2.MTransformationMatrix(lfingerpinkyctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_lfingerpinkypositive_comb_cv, "LeftPinkyOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_LeftPinkyOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftPinkyOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftPinkyOptions_ctrl.scaleZ"')

                    else:
                        lhandpinkyctrl_sl_ls = om2.MSelectionList()
                        lhandpinkyctrl_sl_ls.add("Biped_LeftFingerPinky*_ctrl")
                        lhandpinkyctrl_obj = lhandpinkyctrl_sl_ls.getDependNode(index-1)

                        lhandpinkynull_sl_ls = om2.MSelectionList()
                        lhandpinkynull_sl_ls.add("Biped_LeftFingerPinky*_null")

                        lhandpinky_tr_n = om2.MFnDagNode(lhandpinkyctrl_obj)
                        lhandpinky_tr_n.addChild(self.lhandpinkynull_tn)

                        lhandpinkynull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(lhandpinkynull_sl_ls.length()-1):
                            parentobj = lhandpinkynull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            lhandpinkynull_parentinvtransform_matrix = lhandpinkynull_parentinvtransform_matrix * null_Matrix

                        lhandpinkynull_childtransform_trans = lhandpinkynull_transform.transformation()
                        lhandpinkynull_childtransform_worldmatrix = lhandpinkynull_childtransform_trans.asMatrix()

                        lhandpinkynull_childtransform_localmatrix = lhandpinkynull_childtransform_worldmatrix * lfingernull_transform_worldinversematrix * lhandpinkynull_parentinvtransform_matrix

                        lhandpinkynull_transform.setTransformation(om2.MTransformationMatrix(lhandpinkynull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_lhandpinkypositive_comb_cv, "LeftFingerPinky{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_lhandpinkynegative_comb_cv, "LeftFingerPinky{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_LeftFingerPinky{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFingerPinky{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFingerPinky{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            lleg_sl_ls = om2.MSelectionList()
            lleg_sl_ls.add("LeftUpLeg")
            lleg_sl_ls.add("LeftLeg")
            lleg_sl_ls.add("LeftFoot")
            lleg_sl_ls.add("LeftToeBase")

            fklleg_sl_ls = om2.MSelectionList()
            fklleg_sl_ls.add("FkLeftUpLeg")
            fklleg_sl_ls.add("FkLeftLeg")
            fklleg_sl_ls.add("FkLeftFoot")
            fklleg_sl_ls.add("FkLeftToeBase")

            for index in range(fklleg_sl_ls.length()):
                    jnt_lleg_obj = fklleg_sl_ls.getDependNode(index)
                    jnt_lleg_path_n = om2.MDagPath()
                    jnt_lleg_path = jnt_lleg_path_n.getAPathTo(jnt_lleg_obj)
                    jnt_lleg_transform = om2.MFnTransform(jnt_lleg_path)
                    jnt_lleg_t = jnt_lleg_transform.translation(om2.MSpace.kWorld)

                    if index == 0:
                        if self.hipjnt.currentIndex() == 1:
                            self.luplegnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftUpLeg_null", self.hipctrl_tn)
                        else:
                            self.luplegnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftUpLeg_null", self.rootctrl_tn)

                        self.luplegupctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftUpLeg_ctrl", self.luplegnull_tn)
                        ctrl_luplegpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.luplegupctrl_tn)

                        luplegnull_transform = om2.MFnTransform(self.luplegnull_tn)
                        luplegnull_transform.setTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                        jnt_lupleg_r = cmds.xform("LeftUpLeg", query=True, rotation=True, worldSpace=True)

                        radian_llegtoebasenull_x = (jnt_lupleg_r[0]/180)*3.1415
                        radian_llegtoebasenull_y = (jnt_lupleg_r[1]/180)*3.1415
                        radian_llegtoebasenull_z = (jnt_lupleg_r[2]/180)*3.1415

                        luplegnull_transform_r = luplegnull_transform.rotation(om2.MSpace.kTransform)
                        luplegnull_transform_r[0], luplegnull_transform_r[1], luplegnull_transform_r[2] = radian_llegtoebasenull_x, radian_llegtoebasenull_y, radian_llegtoebasenull_z
                        luplegnull_transform.setRotation(luplegnull_transform_r, om2.MSpace.kTransform)

                        luplegnctrl_transform = om2.MFnTransform(self.luplegupctrl_tn)

                        luplegnctrl_transform_r = luplegnull_transform.rotation(om2.MSpace.kTransform)
                        luplegnctrl_transform_r[0], luplegnctrl_transform_r[1], luplegnctrl_transform_r[2] = 0, 1.57079, 0
                        luplegnctrl_transform.setRotation(luplegnctrl_transform_r, om2.MSpace.kTransform)

                        luplegnctrl_transform_s = luplegnctrl_transform.findPlug("scale", False)
                        if luplegnctrl_transform_s.isCompound:
                            for i in range(luplegnctrl_transform_s.numChildren()):
                                child_plug = luplegnctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        luplegnull_transform_trans = luplegnull_transform.transformation()
                        luplegnull_transform_worldmatrix = luplegnull_transform_trans.asMatrix()

                        luplegnull_transform_localmatrix = luplegnull_transform_worldmatrix * rootctrl_transform_worldmatrix

                        luplegnull_transform.setTransformation(om2.MTransformationMatrix(luplegnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_luplegpositive_comb_cv, "LeftUpLeg_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftUpLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftUpLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftUpLeg_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

                    elif index == 1:
                        self.llegnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftLeg_null", self.luplegupctrl_tn)
                        self.stretchyllegnull_tn = self.MDag2_node.create("transform", "Biped_StretchyLeftLeg_null", self.llegnull_tn)
                        self.llegctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftLeg_ctrl", self.stretchyllegnull_tn)
                        ctrl_llegpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.llegctrl_tn)

                        llegnull_transform = om2.MFnTransform(self.llegnull_tn)
                        llegnull_transform.setRotatePivotTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                        jnt_lleg_r = cmds.xform("LeftLeg", query=True, rotation=True, worldSpace=True)

                        radian_llegnull_x = (jnt_lleg_r[0]/180)*3.1415
                        radian_llegnull_y = (jnt_lleg_r[1]/180)*3.1415
                        radian_llegnull_z = (jnt_lleg_r[2]/180)*3.1415

                        llegnull_transform_r = llegnull_transform.rotation(om2.MSpace.kTransform)
                        llegnull_transform_r[0], llegnull_transform_r[1], llegnull_transform_r[2] = radian_llegnull_x, radian_llegnull_y, radian_llegnull_z
                        llegnull_transform.setRotation(llegnull_transform_r, om2.MSpace.kTransform)

                        llegctrl_transform = om2.MFnTransform(self.llegctrl_tn)

                        llegctrl_transform_r = llegnull_transform.rotation(om2.MSpace.kTransform)
                        llegctrl_transform_r[0], llegctrl_transform_r[1], llegctrl_transform_r[2] = 0, 1.57079, 0
                        llegctrl_transform.setRotation(llegctrl_transform_r, om2.MSpace.kTransform)

                        llegctrl_transform_s = llegctrl_transform.findPlug("scale", False)
                        if llegctrl_transform_s.isCompound:
                            for i in range(llegctrl_transform_s.numChildren()):
                                child_plug = llegctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        llegnull_transform_trans = llegnull_transform.transformation()
                        llegnull_transform_worldmatrix = llegnull_transform_trans.asMatrix()

                        llegnull_transform_localmatrix = llegnull_transform_worldmatrix * rootctrl_transform_worldmatrix * luplegnull_transform_localmatrix.inverse()

                        llegnull_transform.setTransformation(om2.MTransformationMatrix(llegnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_llegpositive_comb_cv, "LeftLeg_shape")

                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftLeg_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

                        if cmds.objExists("NoFlipLeftLeg_Ik") and cmds.objExists("PVLeftLeg_Ik"):

                            self.pvllegkneenull_tn = self.MDag2_node.create("transform", "Biped_PVLeftKnee_null", self.masterctrl_tn)
                            self.pvllegkneectrl_tn = self.MDag2_node.create("transform", "Biped_PVLeftKnee_ctrl", self.pvllegkneenull_tn)
                            crv_ctrl_knee_triangle_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_triangle_points, 1, 1, False, True, True, self.pvllegkneectrl_tn)
                            crv_ctrl_knee_arrow_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_arrow_points, 1, 1, False, True, True, self.pvllegkneectrl_tn)

                            pvllegkneenull_transform = om2.MFnTransform(self.pvllegkneenull_tn)
                            pvllegkneenull_transform.setTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                            pvllegkneectrl_transform = om2.MFnTransform(self.pvllegkneectrl_tn)

                            pvllegkneenull_transform_t = pvllegkneenull_transform.translation(om2.MSpace.kTransform)
                            pvllegkneenull_transform_t[2] = pvllegkneenull_transform_t[2]+20
                            pvllegkneenull_transform.setTranslation(pvllegkneenull_transform_t, om2.MSpace.kTransform)

                            pvllegknectrl_transform_r = pvllegkneectrl_transform.rotation(om2.MSpace.kTransform)
                            pvllegknectrl_transform_r[0] = 1.57079
                            pvllegkneectrl_transform.setRotation(pvllegknectrl_transform_r, om2.MSpace.kTransform)

                            pvllegkneectrl_transform_s = pvllegkneectrl_transform.findPlug("scale", False)
                            if pvllegkneectrl_transform_s.isCompound:
                                for i in range(pvllegkneectrl_transform_s.numChildren()):
                                    child_plug = pvllegkneectrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/8)

                            self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_PVLeftKnee_ctrl"')
                            self.MDG2_mod.renameNode(crv_ctrl_knee_triangle_l, "PVLeftKnee_shape1")
                            self.MDG2_mod.renameNode(crv_ctrl_knee_arrow_l, "PVLeftKnee_shape2")
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_PVLeftKnee_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVLeftKnee_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                    elif index == 2:
                        self.llegfootnull_tn = self.MDag2_node.create("transform", "Biped_FkLeftFoot_null", self.llegctrl_tn)
                        self.stretchyllegfootnull_tn = self.MDag2_node.create("transform", "Biped_StretchyLeftFoot_null", self.llegfootnull_tn)
                        self.llegfootctrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftFoot_ctrl", self.stretchyllegfootnull_tn)
                        ctrl_llegfootpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.llegfootctrl_tn)

                        self.liklegfootnull_tn = self.MDag2_node.create("transform", "Biped_IkLeftFoot_null", self.masterctrl_tn)
                        self.liklegfootoffsetnull_tn = self.MDag2_node.create("transform", "Biped_IkLeftFootOffset_null", self.liklegfootnull_tn)
                        self.liklegfootRotnull_tn = self.MDag2_node.create("transform", "Biped_IkLeftFootRot_null", self.liklegfootoffsetnull_tn)
                        self.liklegfootctrl_tn = self.MDag2_node.create("transform", "Biped_IkLeftFoot_ctrl", self.liklegfootRotnull_tn)
                        ctrl_liklegfootpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_hand_line_l, crv_ctrl_hand_line, crv_ctrl_hand_line_r], self.liklegfootctrl_tn)

                        self.noflipllegkneenull_tn = self.MDag2_node.create("transform", "Biped_NoFlipLeftKnee_null", self.liklegfootoffsetnull_tn)
                        self.noflipllegkneectrl_tn = self.MDag2_node.create("transform", "Biped_NoFlipLeftKnee_ctrl", self.noflipllegkneenull_tn)
                        self.noflipllegknectrl_tn = self.MDag2_node.create("locator", "NoFlipLeftKnee_shape", self.noflipllegkneectrl_tn)

                        llegfootnull_transform = om2.MFnTransform(self.llegfootnull_tn)
                        llegfootnull_transform.setRotatePivotTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                        liklegfootnull_transform = om2.MFnTransform(self.liklegfootnull_tn)
                        liklegfootnull_transform.setTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                        liklegfootoffsetnull_transform = om2.MFnTransform(self.liklegfootoffsetnull_tn)

                        jnt_llegfoot_r = cmds.xform("LeftFoot", query=True, rotation=True, worldSpace=True)

                        radian_llegfootnull_x = (jnt_llegfoot_r[0]/180)*3.1415
                        radian_llegfootnull_y = (jnt_llegfoot_r[1]/180)*3.1415
                        radian_llegfootnull_z = (jnt_llegfoot_r[2]/180)*3.1415

                        llegfootnull_transform_r = llegfootnull_transform.rotation(om2.MSpace.kTransform)
                        llegfootnull_transform_r[0], llegfootnull_transform_r[1], llegfootnull_transform_r[2] = radian_llegfootnull_x, radian_llegfootnull_y, radian_llegfootnull_z
                        llegfootnull_transform.setRotation(llegfootnull_transform_r, om2.MSpace.kTransform)

                        liklegfootnull_transform.setRotation(llegfootnull_transform_r, om2.MSpace.kTransform)

                        liklegfootoffsetnull_transform.setRotation(llegfootnull_transform_r, om2.MSpace.kTransform)

                        llegfootctrl_transform = om2.MFnTransform(self.llegfootctrl_tn)

                        liklegfootctrl_transform = om2.MFnTransform(self.liklegfootctrl_tn)

                        noflipllegkneenull_transform = om2.MFnTransform(self.noflipllegkneectrl_tn)

                        llegfootctrl_transform_r = llegfootnull_transform.rotation(om2.MSpace.kTransform)
                        llegfootctrl_transform_r[0], llegfootctrl_transform_r[1], llegfootctrl_transform_r[2] = -1.57079, 0, -1.57079
                        llegfootctrl_transform.setRotation(llegfootctrl_transform_r, om2.MSpace.kTransform)

                        liklegfootctrl_transform_t = liklegfootctrl_transform.translation(om2.MSpace.kTransform)
                        liklegfootctrl_transform_t[1], liklegfootctrl_transform_t[2] = -1, -(jnt_lleg_t[2]+2)
                        liklegfootctrl_transform.setTranslation(liklegfootctrl_transform_t, om2.MSpace.kTransform)

                        liklegfootctrl_transform_r = liklegfootctrl_transform.rotation(om2.MSpace.kTransform)
                        liklegfootctrl_transform_r[1] = -1.57079
                        liklegfootctrl_transform.setRotation(liklegfootctrl_transform_r, om2.MSpace.kTransform)

                        noflipllegkneenull_transform_t = noflipllegkneenull_transform.translation(om2.MSpace.kTransform)
                        noflipllegkneenull_transform_t[0] = 7
                        noflipllegkneenull_transform.setTranslation(noflipllegkneenull_transform_t, om2.MSpace.kTransform)

                        llegfootctrl_transform_s = llegfootctrl_transform.findPlug("scale", False)
                        if llegfootctrl_transform_s.isCompound:
                            for i in range(llegfootctrl_transform_s.numChildren()):
                                child_plug = llegfootctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        liklegfootctrl_transform_s = liklegfootctrl_transform.findPlug("scale", False)
                        if liklegfootctrl_transform_s.isCompound:
                            for i in range(liklegfootctrl_transform_s.numChildren()):
                                child_plug = liklegfootctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        llegfootnull_transform_trans = llegfootnull_transform.transformation()
                        llegfootnull_transform_worldmatrix = llegfootnull_transform_trans.asMatrix()

                        llegfootnull_transform_localmatrix = llegfootnull_transform_worldmatrix * rootctrl_transform_worldmatrix * luplegnull_transform_localmatrix.inverse() * llegnull_transform_localmatrix.inverse()

                        llegfootnull_transform.setTransformation(om2.MTransformationMatrix(llegfootnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_llegfootpositive_comb_cv, "LeftLegFoot_shape")
                        self.MDG2_mod.renameNode(ctrl_liklegfootpositive_comb_cv, "LeftIkLegFoot_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_IkLeftFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_IkLeftFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftFoot_ctrl.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFoot_ctrl.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkLeftFootOffset_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipLeftKnee_null.visibility" 0')
                        self.MDG2_mod.commandToExecute('select -hierarchy "Biped_NoFlipLeftKnee_null"; hide -clearSelection;')
                        self.MDG2_mod.doIt()

                        liklegfootctrl_path_n = om2.MDagPath()
                        liklegfootctrl_path = liklegfootctrl_path_n.getAPathTo(self.liklegfootctrl_tn)
                        liklegfootctrl_worldtransform = om2.MFnTransform(liklegfootctrl_path)

                        liklegfootctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_lleg_t), om2.MSpace.kWorld, False)

                        if cmds.objExists("NoFlipLeftLeg_Ik") or self.autostretch.currentIndex() == 1:

                            self.lfootoption_tn = self.MDag2_node.create("transform", "Biped_LeftFootOptions_ctrl", lleg_sl_ls.getDependNode(2))
                            ctrl_lfootoption_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_lhandoption_line, 1, 1, False, True, True, self.lfootoption_tn)

                            lfootoptionctrl_transform = om2.MFnTransform(self.lfootoption_tn)
                            lfootoptionctrl_transform.setRotatePivotTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                            lfootoptionctrl_transform_t = lfootoptionctrl_transform.translation(om2.MSpace.kTransform)
                            lfootoptionctrl_transform_t[0] = jnt_lleg_t[0] + 7
                            lfootoptionctrl_transform.setTranslation(lfootoptionctrl_transform_t, om2.MSpace.kTransform)

                            lfootoptionctrl_transform_r = lfootoptionctrl_transform.rotation(om2.MSpace.kTransform)
                            lfootoptionctrl_transform_r[0] = -1.57079
                            lfootoptionctrl_transform.setRotation(lfootoptionctrl_transform_r, om2.MSpace.kTransform)

                            lfootoptionctrl_transform_s = lfootoptionctrl_transform.findPlug("scale", False)
                            if lfootoptionctrl_transform_s.isCompound:
                                for i in range(lfootoptionctrl_transform_s.numChildren()):
                                    child_plug = lfootoptionctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/12)

                            lfootoptionctrl_transform_trans = lfootoptionctrl_transform.transformation()
                            lfootoptionctrl_transform_worldmatrix = lfootoptionctrl_transform_trans.asMatrix()

                            lfootoptionctrl_transform_localmatrix = lfootoptionctrl_transform_worldmatrix * rootctrl_transform_worldmatrix * luplegnull_transform_localmatrix.inverse() * llegnull_transform_localmatrix.inverse() * llegfootnull_transform_localmatrix.inverse()

                            lfootoptionctrl_transform.setTransformation(om2.MTransformationMatrix(lfootoptionctrl_transform_localmatrix))

                            self.MDG2_mod.renameNode(ctrl_lfootoption_cv, "LeftFootOptions_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_LeftFootOptions_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_LeftFootOptions_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_LeftFootOptions_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                    elif index == 3:
                        self.llegtoebasenull_tn = self.MDag2_node.create("transform", "Biped_FkLeftToeBase_null", self.llegfootctrl_tn)
                        self.llegtoebasectrl_tn = self.MDag2_node.create("transform", "Biped_FkLeftToeBase_ctrl", self.llegtoebasenull_tn)
                        ctrl_llegtoepositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.llegtoebasectrl_tn)

                        llegtoebasenull_transform = om2.MFnTransform(self.llegtoebasenull_tn)
                        llegtoebasenull_transform.setRotatePivotTranslation(jnt_lleg_t, om2.MSpace.kTransform)

                        jnt_llegtoebase_r = cmds.xform("LeftToeBase", query=True, rotation=True, worldSpace=True)

                        radian_llegtoebasenull_x = (jnt_llegtoebase_r[0]/180)*3.1415
                        radian_llegtoebasenull_y = (jnt_llegtoebase_r[1]/180)*3.1415
                        radian_llegtoebasenull_z = (jnt_llegtoebase_r[2]/180)*3.1415

                        llegtoebasenull_transform_r = llegtoebasenull_transform.rotation(om2.MSpace.kTransform)
                        llegtoebasenull_transform_r[0], llegtoebasenull_transform_r[1], llegtoebasenull_transform_r[2] = radian_llegtoebasenull_x, radian_llegtoebasenull_y, radian_llegtoebasenull_z
                        llegtoebasenull_transform.setRotation(llegtoebasenull_transform_r, om2.MSpace.kTransform)

                        llegtoebasectrl_transform = om2.MFnTransform(self.llegtoebasectrl_tn)

                        llegtoebasectrl_transform_r = llegtoebasectrl_transform.rotation(om2.MSpace.kTransform)
                        llegtoebasectrl_transform_r[1] = -1.57079
                        llegtoebasectrl_transform.setRotation(llegtoebasectrl_transform_r, om2.MSpace.kTransform)

                        llegtoebasectrl_transform_s = llegtoebasectrl_transform.findPlug("scale", False)
                        if llegtoebasectrl_transform_s.isCompound:
                            for i in range(llegtoebasectrl_transform_s.numChildren()):
                                child_plug = llegtoebasectrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/4)

                        llegtoebasenull_transform_trans = llegtoebasenull_transform.transformation()
                        llegtoebasenull_transform_worldmatrix = llegtoebasenull_transform_trans.asMatrix()

                        llegtoebasenull_transform_localmatrix = llegtoebasenull_transform_worldmatrix * rootctrl_transform_worldmatrix * luplegnull_transform_localmatrix.inverse() * llegnull_transform_localmatrix.inverse() * llegfootnull_transform_localmatrix.inverse()

                        llegtoebasenull_transform.setTransformation(om2.MTransformationMatrix(llegtoebasenull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_llegtoepositive_comb_cv, "LeftLegToeBase_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkLeftToeBase_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkLeftToeBase_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkLeftToeBase_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

            rarm_sl_ls = om2.MSelectionList()
            rarm_sl_ls.add("RightArm")
            rarm_sl_ls.add("RightForeArm")
            rarm_sl_ls.add("RightHand")

            fkrarm_sl_ls = om2.MSelectionList()
            fkrarm_sl_ls.add("RightShoulder")
            fkrarm_sl_ls.add("FkRightArm")
            fkrarm_sl_ls.add("FkRightForeArm")
            fkrarm_sl_ls.add("FkRightHand")

            ctrl_rshoulder_arc_l = [om2.MPoint(1.20, 0.15), om2.MPoint(1.10, 0.28, 0.10), om2.MPoint(0.90, 0.35, 0.25)]
            ctrl_rshoulder_line = [om2.MPoint(0.90, 0.35, 0.25), om2.MPoint(0.30, 0.50, 0.25), om2.MPoint(0.25, 0.55, 0.20), om2.MPoint(0.25, 0.55, -0.20), om2.MPoint(0.30, 0.50, -0.25), om2.MPoint(0.90, 0.35, -0.25)]
            ctrl_rshoulder_arc_r = [om2.MPoint(0.90, 0.35, -0.25), om2.MPoint(1.10, 0.28, -0.10), om2.MPoint(1.20, 0.15)]

            self.draw_shoulder_tn = self.MDag2_node.create("transform", "Draw_shoulder_ctrl")
            crv_ctrl_rshoulder_arc_l = self.MNurbs2_cv.createWithEditPoints(ctrl_rshoulder_arc_l, 3, 1, False, True, True, self.draw_shoulder_tn)
            crv_ctrl_rshoulder_line = self.MNurbs2_cv.createWithEditPoints(ctrl_rshoulder_line, 1, 1, False, True, True, self.draw_shoulder_tn)
            crv_ctrl_rshoulder_arc_r = self.MNurbs2_cv.createWithEditPoints(ctrl_rshoulder_arc_r, 3, 1, False, True, True, self.draw_shoulder_tn)

            if self.autostretch.currentIndex() == 1:
                self.rshouldernull_tn = self.MDag2_node.create("transform", "Biped_RightShoulder_null", self.stretchyspine_tn)
            else:
                self.rshouldernull_tn = self.MDag2_node.create("transform", "Biped_RightShoulder_null", self.spinectrl_tn)

            self.rshoulderctrl_tn = self.MDag2_node.create("transform", "Biped_RightShoulder_ctrl", self.rshouldernull_tn)
            ctrl_rshoulder_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rshoulder_arc_l, crv_ctrl_rshoulder_line, crv_ctrl_rshoulder_arc_r], self.rshoulderctrl_tn)

            jnt_rshoulder_obj = fkrarm_sl_ls.getDependNode(0)
            rshoulder_path_n = om2.MDagPath()
            rshoulder_path = rshoulder_path_n.getAPathTo(jnt_rshoulder_obj)
            jnt_rshoulder_transform = om2.MFnTransform(rshoulder_path)
            jnt_rshoulder_t = jnt_rshoulder_transform.translation(om2.MSpace.kWorld)

            rshouldernull_transform = om2.MFnTransform(self.rshouldernull_tn)
            rshouldernull_transform.setRotatePivotTranslation(jnt_rshoulder_t, om2.MSpace.kTransform)

            jnt_rshoulder_r = cmds.xform("RightShoulder", query=True, rotation=True, worldSpace=True)

            radian_rshoulder_x = (jnt_rshoulder_r[0]/180)*3.1415
            radian_rshoulder_y = (jnt_rshoulder_r[1]/180)*3.1415
            radian_rshoulder_z = (jnt_rshoulder_r[2]/180)*3.1415

            rshouldernull_transform_r = rshouldernull_transform.rotation(om2.MSpace.kTransform)
            rshouldernull_transform_r[0], rshouldernull_transform_r[1], rshouldernull_transform_r[2] = radian_rshoulder_x, radian_rshoulder_y, radian_rshoulder_z
            rshouldernull_transform.setRotation(rshouldernull_transform_r, om2.MSpace.kTransform)

            rshoulderctrl_transform = om2.MFnTransform(self.rshoulderctrl_tn)

            rshoulderctrl_transform_r = rshoulderctrl_transform.rotation(om2.MSpace.kTransform)
            rshoulderctrl_transform_r[0], rshoulderctrl_transform_r[1], rshoulderctrl_transform_r[2] = -1.57079, 0.6108, 1.57079
            rshoulderctrl_transform.setRotation(rshoulderctrl_transform_r, om2.MSpace.kTransform)

            rshoulderctrl_transform_s = rshoulderctrl_transform.findPlug("scale", False)
            if rshoulderctrl_transform_s.isCompound:
                for i in range(rshoulderctrl_transform_s.numChildren()):
                    child_plug = rshoulderctrl_transform_s.child(i)
                    attr_value = child_plug.setDouble(box_transform_s[0]/3)

            rshouldernullnull_transform_trans = rshouldernull_transform.transformation()
            rshouldernullnull_transform_worldmatrix = rshouldernullnull_transform_trans.asMatrix()

            rshouldernullnull_transform_localmatrix = rshouldernullnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse()

            rshouldernull_transform.setTransformation(om2.MTransformationMatrix(rshouldernullnull_transform_localmatrix))

            rshoulderctrl_path_n = om2.MDagPath()
            rshoulderctrl_path = rshoulderctrl_path_n.getAPathTo(self.rshoulderctrl_tn)
            rshoulderctrl_worldtransform = om2.MFnTransform(rshoulderctrl_path)

            rshoulderctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_rshoulder_t), om2.MSpace.kWorld, False)

            self.MDG2_mod.commandToExecute('delete "Draw_shoulder_ctrl"')
            self.MDG2_mod.renameNode(ctrl_rshoulder_comb_cv, "RightShoulder_shape")
            self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_RightShoulder_ctrl"')
            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightShoulder_ctrl"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.rotateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.rotateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.rotateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.scaleZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_null.visibility"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.translateX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.translateY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.translateZ"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.scaleX"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.scaleY"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightShoulder_ctrl.scaleZ"')
            self.MDG2_mod.doIt()

            for index in range(fkrarm_sl_ls.length()):
               jnt_rhand_obj = fkrarm_sl_ls.getDependNode(index)
               rhand_path_n = om2.MDagPath()
               rhand_path = rhand_path_n.getAPathTo(jnt_rhand_obj)
               jnt_rhand_transform = om2.MFnTransform(rhand_path)
               jnt_rhand_t = jnt_rhand_transform.translation(om2.MSpace.kWorld)

               if index == 1:
                   self.rarmnull_tn = self.MDag2_node.create("transform", "Biped_FkRightArm_null", self.rshoulderctrl_tn)
                   self.rarmctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightArm_ctrl", self.rarmnull_tn)
                   ctrl_larm_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rarmctrl_tn)

                   rarmnull_transform = om2.MFnTransform(self.rarmnull_tn)
                   rarmnull_transform.setRotatePivotTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                   jnt_rarm_r = cmds.xform("RightArm", query=True, rotation=True, worldSpace=True)

                   radian_rarm_x = (jnt_rarm_r[0]/180)*3.1415
                   radian_rarm_y = (jnt_rarm_r[1]/180)*3.1415
                   radian_rarm_z = (jnt_rarm_r[2]/180)*3.1415

                   rarmnull_transform_r = rarmnull_transform.rotation(om2.MSpace.kTransform)
                   rarmnull_transform_r[0], rarmnull_transform_r[1], rarmnull_transform_r[2] = radian_rarm_x, radian_rarm_y, radian_rarm_z
                   rarmnull_transform.setRotation(rarmnull_transform_r, om2.MSpace.kTransform)

                   rarmctrl_transform = om2.MFnTransform(self.rarmctrl_tn)

                   rarmctrl_transform_r = rarmctrl_transform.rotation(om2.MSpace.kTransform)
                   rarmctrl_transform_r[1] = 3.1415
                   rarmctrl_transform.setRotation(rarmctrl_transform_r, om2.MSpace.kTransform)

                   rarmctrl_transform_s = rarmctrl_transform.findPlug("scale", False)
                   if rarmctrl_transform_s.isCompound:
                       for i in range(rarmctrl_transform_s.numChildren()):
                           child_plug = rarmctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/2)

                   rarmnull_transform_trans = rarmnull_transform.transformation()
                   rarmnull_transform_worldmatrix = rarmnull_transform_trans.asMatrix()

                   rarmnull_transform_localmatrix = rarmnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * rshouldernullnull_transform_localmatrix.inverse()

                   rarmnull_transform.setTransformation(om2.MTransformationMatrix(rarmnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_larm_comb_cv, "FkRightArm_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightArm_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightArm_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightArm_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

               elif index == 2:
                   self.rforearmnull_tn = self.MDag2_node.create("transform", "Biped_FkRightForeArm_null", self.rarmctrl_tn)
                   self.stretchyrforearmnull_tn = self.MDag2_node.create("transform", "Biped_StretchyRightForeArm_null", self.rforearmnull_tn)
                   self.rforearmctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightForeArm_ctrl", self.stretchyrforearmnull_tn)
                   ctrl_rforearm_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rforearmctrl_tn)

                   rforearmnull_transform = om2.MFnTransform(self.rforearmnull_tn)
                   rforearmnull_transform.setRotatePivotTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                   jnt_rforearm_r = cmds.xform("RightForeArm", query=True, rotation=True, worldSpace=True)

                   radian_rforearm_x = (jnt_rforearm_r[0]/180)*3.1415
                   radian_rforearm_y = (jnt_rforearm_r[1]/180)*3.1415
                   radian_rforearm_z = (jnt_rforearm_r[2]/180)*3.1415

                   rforearmnull_transform_r = rforearmnull_transform.rotation(om2.MSpace.kTransform)
                   rforearmnull_transform_r[0], rforearmnull_transform_r[1], rforearmnull_transform_r[2] = radian_rforearm_x, radian_rforearm_y, radian_rforearm_z
                   rforearmnull_transform.setRotation(rforearmnull_transform_r, om2.MSpace.kTransform)

                   rforearmctrl_transform = om2.MFnTransform(self.rforearmctrl_tn)

                   rforearmctrl_transform_r = rforearmctrl_transform.rotation(om2.MSpace.kTransform)
                   rforearmctrl_transform_r[1] = 3.1415
                   rforearmctrl_transform.setRotation(rforearmctrl_transform_r, om2.MSpace.kTransform)

                   rforearmctrl_transform_s = rforearmctrl_transform.findPlug("scale", False)
                   if rforearmctrl_transform_s.isCompound:
                       for i in range(rforearmctrl_transform_s.numChildren()):
                           child_plug = rforearmctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/2)

                   rforearmnull_transform_trans = rforearmnull_transform.transformation()
                   rforearmnull_transform_worldmatrix = rforearmnull_transform_trans.asMatrix()

                   rforearmnull_transform_localmatrix = rforearmnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * rshouldernullnull_transform_localmatrix.inverse() * rarmnull_transform_localmatrix.inverse()

                   rforearmnull_transform.setTransformation(om2.MTransformationMatrix(rforearmnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_rforearm_comb_cv, "FkRightForeArm_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightForeArm_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightForeArm_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightForeArm_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

                   if cmds.objExists("NoFlipRightHand_Ik") and cmds.objExists("PVRightHand_Ik"):

                       self.pvrelbownull_tn = self.MDag2_node.create("transform", "Biped_PVRightElbow_null", self.masterctrl_tn)
                       self.pvrelbowctrl_tn = self.MDag2_node.create("transform", "Biped_PVRightElbow_ctrl", self.pvrelbownull_tn)
                       crv_ctrl_elbow_triangle_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_triangle_points, 1, 1, False, True, True, self.pvrelbowctrl_tn)
                       crv_ctrl_elbow_arrow_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_arrow_points, 1, 1, False, True, True, self.pvrelbowctrl_tn)

                       pvrelbownull_transform = om2.MFnTransform(self.pvrelbownull_tn)
                       pvrelbownull_transform.setTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                       pvrelbowctrl_transform = om2.MFnTransform(self.pvrelbowctrl_tn)

                       pvrelbownull_transform_t = pvrelbownull_transform.translation(om2.MSpace.kTransform)
                       pvrelbownull_transform_t[2] = pvrelbownull_transform_t[2] *  4

                       pvrelbownull_transform.setTranslation(pvrelbownull_transform_t, om2.MSpace.kTransform)

                       pvrelbowctrl_transform_r = pvrelbowctrl_transform.rotation(om2.MSpace.kTransform)
                       pvrelbowctrl_transform_r[0] = -1.57079
                       pvrelbowctrl_transform.setRotation(pvrelbowctrl_transform_r, om2.MSpace.kTransform)

                       pvrelbowctrl_transform_s = pvrelbowctrl_transform.findPlug("scale", False)
                       if pvrelbowctrl_transform_s.isCompound:
                           for i in range(pvrelbowctrl_transform_s.numChildren()):
                               child_plug = pvrelbowctrl_transform_s.child(i)
                               attr_value = child_plug.setDouble(box_transform_s[0] / 8)

                       self.MDG2_mod.renameNode(crv_ctrl_elbow_triangle_l, "PVRightElbow_shape1")
                       self.MDG2_mod.renameNode(crv_ctrl_elbow_arrow_l, "PVRightElbow_shape2")
                       self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_PVRightElbow_ctrl"')
                       self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_PVRightElbow_ctrl"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.translateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.translateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.translateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.scaleZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_null.visibility"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightElbow_ctrl.scaleZ"')
                       self.MDG2_mod.doIt()

               elif index == 3:
                   ctrl_rhand_line_up_points = [om2.MPoint(0.00, 0.05, 0.02), om2.MPoint(-0.60, 0.05, 0.02)]
                   ctrl_rhand_star_up_points = [om2.MPoint(-0.60, 0.05, 0.02), om2.MPoint(-0.70, 0.15, 0.20), om2.MPoint(-0.70, 0.09, 0.20), om2.MPoint(-0.70, 0.06, 0.13), om2.MPoint(-0.60, 0.00, 0.00), om2.MPoint(-0.70, 0.05, -0.13), om2.MPoint(-0.70, 0.09, -0.20), om2.MPoint(-0.70, 0.15, -0.20), om2.MPoint(-0.60, 0.05, -0.02)]
                   ctrl_rhand_line_down_points = [om2.MPoint(-0.60, 0.05, -0.02), om2.MPoint(-0.00, 0.05, -0.02)]

                   self.draw_rhand_tn = self.MDag2_node.create("transform", "Draw_righthand_ctrl")
                   crv_ctrl_rhand_line_up = self.MNurbs2_cv.createWithEditPoints(ctrl_rhand_line_up_points, 1, 1, False, True, True, self.draw_rhand_tn)
                   crv_ctrl_rhand_star = self.MNurbs2_cv.createWithEditPoints(ctrl_rhand_star_up_points, 1, 1, False, True, True, self.draw_rhand_tn)
                   crv_ctrl_rhand_line_down = self.MNurbs2_cv.createWithEditPoints(ctrl_rhand_line_down_points, 1, 1, False, True, True, self.draw_rhand_tn)

                   self.rhandnull_tn = self.MDag2_node.create("transform", "Biped_FkRightHand_null", self.rforearmctrl_tn)
                   self.stretchyrhandnull_tn = self.MDag2_node.create("transform", "Biped_StretchyRightHand_null", self.rhandnull_tn)
                   self.rhandctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightHand_ctrl", self.stretchyrhandnull_tn)
                   ctrl_rhandpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandctrl_tn)
                   ctrl_rhandnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandctrl_tn)

                   self.rfingernull_tn = self.MDag2_node.create("transform", "Biped_RightFingers_null", self.masterctrl_tn)

                   rhandnull_transform = om2.MFnTransform(self.rhandnull_tn)
                   rhandnull_transform.setRotatePivotTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                   rfingernull_transform = om2.MFnTransform(self.rfingernull_tn)
                   rfingernull_transform.setTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                   jnt_rhand_r = cmds.xform("RightHand", query=True, rotation=True, worldSpace=True)

                   radian_rhand_x = (jnt_rhand_r[0]/180)*3.1415
                   radian_rhand_y = (jnt_rhand_r[1]/180)*3.1415
                   radian_rhand_z = (jnt_rhand_r[2]/180)*3.1415

                   rhandnull_transform_r = rhandnull_transform.rotation(om2.MSpace.kTransform)
                   rhandnull_transform_r[0], rhandnull_transform_r[1], rhandnull_transform_r[2] = radian_rhand_x, radian_rhand_y, radian_rhand_z
                   rhandnull_transform.setRotation(rhandnull_transform_r, om2.MSpace.kTransform)

                   rfingernull_transform_r = rfingernull_transform.rotation(om2.MSpace.kTransform)
                   rfingernull_transform_r[0], rfingernull_transform_r[1], rfingernull_transform_r[2] = radian_rhand_x, radian_rhand_y, radian_rhand_z
                   rfingernull_transform.setRotation(rfingernull_transform_r, om2.MSpace.kTransform)

                   rhandctrl_transform = om2.MFnTransform(self.rhandctrl_tn)

                   rhandctrl_transform_r = rhandctrl_transform.rotation(om2.MSpace.kTransform)
                   rhandctrl_transform_r[1] = 1.57079
                   rhandctrl_transform.setRotation(rhandctrl_transform_r, om2.MSpace.kTransform)

                   rhandctrl_transform_s = rhandctrl_transform.findPlug("scale", False)
                   if rhandctrl_transform_s.isCompound:
                       for i in range(rhandctrl_transform_s.numChildren()):
                           child_plug = rhandctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/4)

                   rhandnull_transform_trans = rhandnull_transform.transformation()
                   rhandnull_transform_worldmatrix = rhandnull_transform_trans.asMatrix()

                   rhandnull_transform_localmatrix = rhandnull_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * rshouldernullnull_transform_localmatrix.inverse() * rarmnull_transform_localmatrix.inverse() * rforearmnull_transform_localmatrix.inverse()

                   rhandnull_transform.setTransformation(om2.MTransformationMatrix(rhandnull_transform_localmatrix))

                   self.MDG2_mod.renameNode(ctrl_rhandpositive_comb_cv, "FkRightHand_shape1")
                   self.MDG2_mod.renameNode(ctrl_rhandnegative_comb_cv, "FkRightHand_shape2")
                   self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightHand_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightHand_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightHand_ctrl.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingers_null.visibility"')
                   self.MDG2_mod.doIt()

                   if cmds.objExists("NoFlipRightHand_Ik") or self.autostretch.currentIndex() == 1:

                       self.rhandoption_tn = self.MDag2_node.create("transform", "Biped_RightHandOptions_ctrl", rarm_sl_ls.getDependNode(2))
                       ctrl_rhandoption_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_lhandoption_line, 1, 1, False, True, True, self.rhandoption_tn)

                       rhandoptionctrl_transform = om2.MFnTransform(self.rhandoption_tn)
                       rhandoptionctrl_transform.setRotatePivotTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                       rhandoptionctrl_transform_t = rhandoptionctrl_transform.translation(om2.MSpace.kTransform)
                       rhandoptionctrl_transform_t[2] = jnt_lhand_t[2] - 7
                       rhandoptionctrl_transform.setTranslation(rhandoptionctrl_transform_t, om2.MSpace.kTransform)

                       rhandoptionctrl_transform_r = rhandoptionctrl_transform.rotation(om2.MSpace.kTransform)
                       rhandoptionctrl_transform_r[0], rhandoptionctrl_transform_r[1], rhandoptionctrl_transform_r[2] = radian_rhand_x - 1.57079, radian_rhand_y, radian_rhand_z
                       rhandoptionctrl_transform.setRotation(rhandoptionctrl_transform_r, om2.MSpace.kTransform)

                       rhandoptionctrl_transform_s = rhandoptionctrl_transform.findPlug("scale", False)
                       if rhandoptionctrl_transform_s.isCompound:
                           for i in range(rhandoptionctrl_transform_s.numChildren()):
                               child_plug = rhandoptionctrl_transform_s.child(i)
                               attr_value = child_plug.setDouble(box_transform_s[0]/12)

                       rhandoptionctrl_transform_trans = rhandoptionctrl_transform.transformation()
                       rhandoptionctrl_transform_worldmatrix = rhandoptionctrl_transform_trans.asMatrix()

                       rhandoptionctrl_transform_localmatrix = rhandoptionctrl_transform_worldmatrix * spinenull_parentinvtransform_matrix * spinenull_childtransform_localmatrix.inverse() * rshouldernullnull_transform_localmatrix.inverse() * rarmnull_transform_localmatrix.inverse() * rforearmnull_transform_localmatrix.inverse() * rhandnull_transform_localmatrix.inverse()

                       rhandoptionctrl_transform.setTransformation(om2.MTransformationMatrix(rhandoptionctrl_transform_localmatrix))

                       self.MDG2_mod.renameNode(ctrl_rhandoption_cv, "RightHandOptions_shape")
                       self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_RightHandOptions_ctrl"')
                       self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightHandOptions_ctrl"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.translateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.translateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.translateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.rotateX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.rotateY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.rotateZ"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.scaleX"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.scaleY"')
                       self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightHandOptions_ctrl.scaleZ"')
                       self.MDG2_mod.doIt()

                   self.rikhandnull_tn = self.MDag2_node.create("transform", "Biped_IkRightHand_null", self.masterctrl_tn)
                   self.rhandrotnull_tn = self.MDag2_node.create("transform", "Biped_IkRightHandRot_null", self.rikhandnull_tn)
                   self.rikhandctrl_tn = self.MDag2_node.create("transform", "Biped_IkRightHand_ctrl", self.rhandrotnull_tn)
                   ctrl_rikhand_comb_cv = self.MNurbs2_cv.create([crv_ctrl_hand_line_l, crv_ctrl_hand_line, crv_ctrl_hand_line_r], self.rikhandctrl_tn)

                   self.nofliprelbownull_tn = self.MDag2_node.create("transform", "Biped_NoFlipRightElbow_null", self.rikhandnull_tn)
                   self.nofliprelbowctrl_tn = self.MDag2_node.create("transform", "Biped_NoFlipRightElbow_ctrl", self.nofliprelbownull_tn)
                   self.nofliprelbowctrl_ln = self.MDag2_node.create("locator", "NoFlipRightElbow_shape", self.nofliprelbowctrl_tn)

                   rikhandnull_transform = om2.MFnTransform(self.rikhandnull_tn)
                   rikhandnull_transform.setRotatePivotTranslation(jnt_rhand_t, om2.MSpace.kTransform)

                   rikhandnull_transform_r = rikhandnull_transform.rotation(om2.MSpace.kTransform)
                   rikhandnull_transform_r[0], rikhandnull_transform_r[1], rikhandnull_transform_r[2] = radian_rhand_x, radian_rhand_y, radian_rhand_z
                   rikhandnull_transform.setRotation(rikhandnull_transform_r, om2.MSpace.kTransform)

                   rikhandctrl_transform = om2.MFnTransform(self.rikhandctrl_tn)

                   relbowctrl_transform = om2.MFnTransform(self.nofliprelbowctrl_tn)

                   rikhandctrl_transform_t = rikhandctrl_transform.rotatePivotTranslation(om2.MSpace.kTransform)
                   rikhandctrl_transform_t[2] = -((jnt_rhand_t[1]+4)-jnt_rhand_t[1])
                   rikhandctrl_transform.setRotatePivotTranslation(rikhandctrl_transform_t, om2.MSpace.kTransform)

                   rikhandctrl_transform_r = rikhandctrl_transform.rotation(om2.MSpace.kTransform)
                   rikhandctrl_transform_r[0], rikhandctrl_transform_r[2] = 1.57079, 1.57079
                   rikhandctrl_transform.setRotation(rikhandctrl_transform_r, om2.MSpace.kTransform)

                   relbowctrl_transform_t = relbowctrl_transform.translation(om2.MSpace.kTransform)
                   relbowctrl_transform_t[2] = -7
                   relbowctrl_transform.setTranslation(relbowctrl_transform_t, om2.MSpace.kTransform)

                   rikhandctrl_transform_s = rikhandctrl_transform.findPlug("scale", False)
                   if rikhandctrl_transform_s.isCompound:
                       for i in range(rikhandctrl_transform_s.numChildren()):
                           child_plug = rikhandctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/3)

                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_IkRightHand_ctrl"')
                   self.MDG2_mod.doIt()

                   rikhandnull_path_n = om2.MDagPath()
                   rikhandnull_path = rikhandnull_path_n.getAPathTo(self.rikhandctrl_tn)
                   rikhandnull_worldtransform = om2.MFnTransform(rikhandnull_path)

                   rikhandnull_worldtransform.setRotatePivot(om2.MPoint(jnt_rhand_t), om2.MSpace.kWorld, False)

                   self.MDG2_mod.renameNode(ctrl_rikhand_comb_cv, "IkRightHand_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "Biped_IkRightHand_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_null.visibility"')
                   self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_IkRightHand_ctrl.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_IkRightHand_ctrl.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_IkRightHand_ctrl.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightHand_ctrl.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.scaleZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightElbow_null.visibility" 0')
                   self.MDG2_mod.commandToExecute('select -hierarchy "Biped_NoFlipRightElbow_null"; hide -clearSelection;')
                   self.MDG2_mod.doIt()

                   self.rfingerctrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerOptions_ctrl", rarm_sl_ls.getDependNode(2))
                   ctrl_rfingerpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingerctrl_tn)

                   rfingerctrl_transform = om2.MFnTransform(self.rfingerctrl_tn)

                   rfingerctrl_transform_r = rfingerctrl_transform.rotation(om2.MSpace.kTransform)
                   rfingerctrl_transform_r[1] = 3.1415
                   rfingerctrl_transform.setRotation(rfingerctrl_transform_r, om2.MSpace.kTransform)

                   rfingerctrl_transform_s = rfingerctrl_transform.findPlug("scale", False)
                   if rfingerctrl_transform_s.isCompound:
                       for i in range(rfingerctrl_transform_s.numChildren()):
                           child_plug = rfingerctrl_transform_s.child(i)
                           attr_value = child_plug.setDouble(box_transform_s[0]/3)

                   self.MDG2_mod.renameNode(ctrl_rfingerpositive_comb_cv, "RightFingerOptions_shape")
                   self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightFingerOptions_ctrl"')
                   self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerOptions_ctrl"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.translateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.translateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.translateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.rotateX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.rotateY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.rotateZ"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.scaleX"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.scaleY"')
                   self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerOptions_ctrl.scaleZ"')
                   self.MDG2_mod.doIt()

            try:
                rhandthumb_sl_ls = om2.MSelectionList()
                rhandthumb_sl_ls.add("RightFingerThumb*")

                for index in range(rhandthumb_sl_ls.length()):
                    jnt_rhandthumb_obj = rhandthumb_sl_ls.getDependNode(index)
                    jnt_rhandthumb_path_n = om2.MDagPath()
                    jnt_rhandthumb_path = jnt_rhandthumb_path_n.getAPathTo(jnt_rhandthumb_obj)
                    jnt_rhandthumb_transform = om2.MFnTransform(jnt_rhandthumb_path)
                    jnt_rhandthumb_t = jnt_rhandthumb_transform.translation(om2.MSpace.kWorld)

                    self.rhandthumbnull_tn = self.MDag2_node.create("transform", "Biped_RightFingerThumb{0}_null".format(index+1))
                    self.rhandthumbglobalcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerThumb{0}_globalcurl".format(index+1), self.rhandthumbnull_tn)
                    self.rhandthumbcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerThumb{0}_curl".format(index+1), self.rhandthumbglobalcurl_tn)
                    self.rhandthumbctrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerThumb{0}_ctrl".format(index+1), self.rhandthumbcurl_tn)
                    ctrl_rhandthumbpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandthumbctrl_tn)
                    ctrl_rhandthumbnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandthumbctrl_tn)

                    rhandthumbnull_transform = om2.MFnTransform(self.rhandthumbnull_tn)
                    rhandthumbnull_transform.setRotatePivotTranslation(jnt_rhandthumb_t, om2.MSpace.kTransform)

                    jnt_rhandthumb_r = cmds.xform("RightFingerThumb{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_rhandthumb_x = (jnt_rhandthumb_r[0]/180)*3.1415
                    radian_rhandthumb_y = (jnt_rhandthumb_r[1]/180)*3.1415
                    radian_rhandthumb_z = (jnt_rhandthumb_r[2]/180)*3.1415

                    rhandthumbnull_transform_r = rhandthumbnull_transform.rotation(om2.MSpace.kTransform)
                    rhandthumbnull_transform_r[0], rhandthumbnull_transform_r[1], rhandthumbnull_transform_r[2] = radian_rhandthumb_x, radian_rhandthumb_y, radian_rhandthumb_z
                    rhandthumbnull_transform.setRotation(rhandthumbnull_transform_r, om2.MSpace.kTransform)

                    rhandthumbctrl_transform = om2.MFnTransform(self.rhandthumbctrl_tn)

                    rhandthumbctrl_transform_s = rhandthumbctrl_transform.findPlug("scale", False)
                    if rhandthumbctrl_transform_s.isCompound:
                        for i in range(rhandthumbctrl_transform_s.numChildren()):
                            child_plug = rhandthumbctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    rhandthumbctrl_transform_r = rhandthumbctrl_transform.rotation(om2.MSpace.kTransform)
                    rhandthumbctrl_transform_r[1] = 1.57079
                    rhandthumbctrl_transform.setRotation(rhandthumbctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        rhand_tr_n = om2.MFnDagNode(self.rfingernull_tn)
                        rhand_tr_n.addChild(self.rhandthumbnull_tn)

                        rfingernull_transform_trans = rfingernull_transform.transformation()
                        rfingernull_transform_worldmatrix = rfingernull_transform_trans.asMatrixInverse()

                        rhandthumbnull_transform_trans = rhandthumbnull_transform.transformation()
                        rhandthumbnull_transform_worldmatrix = rhandthumbnull_transform_trans.asMatrix()

                        rhandthumbnull_transform_localmatrix = rhandthumbnull_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rhandthumbnull_transform.setTransformation(om2.MTransformationMatrix(rhandthumbnull_transform_localmatrix))

                        self.rfingerthumbctrl_tn = self.MDag2_node.create("transform", "Biped_RightThumbOptions_ctrl")
                        ctrl_rfingerthumbpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingerthumbctrl_tn)

                        rfingerthumbctrl_transform = om2.MFnTransform(self.rfingerthumbctrl_tn)

                        rfingerthumbctrl_transform_t = rfingerthumbctrl_transform.translation(om2.MSpace.kTransform)
                        rfingerthumbctrl_transform_t[0], rfingerthumbctrl_transform_t[1], rfingerthumbctrl_transform_t[2] = jnt_rhandthumb_t[0], jnt_rhandthumb_t[1], jnt_rhandthumb_t[2]
                        rfingerthumbctrl_transform.setTranslation(rfingerthumbctrl_transform_t, om2.MSpace.kTransform)

                        rfingerthumbctrl_transform_r= rfingerthumbctrl_transform.rotation(om2.MSpace.kTransform)
                        rfingerthumbctrl_transform_r[0], rfingerthumbctrl_transform_r[1], rfingerthumbctrl_transform_r[2] = rhandthumbnull_transform_r[0], rhandthumbnull_transform_r[1], rhandthumbnull_transform_r[2]
                        rfingerthumbctrl_transform.setRotation(rfingerthumbctrl_transform_r, om2.MSpace.kTransform)

                        rfingerthumbctrl_transform_s = rfingerthumbctrl_transform.findPlug("scale", False)
                        if rfingerthumbctrl_transform_s.isCompound:
                            for i in range(rfingerthumbctrl_transform_s.numChildren()):
                                child_plug = rfingerthumbctrl_transform_s.child(i)
                                if i == 0:
                                    attr_value = child_plug.setDouble(-(box_transform_s[0]/9))
                                else:
                                    attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        rhandjnt_tr_n = om2.MFnDagNode(rarm_sl_ls.getDependNode(2))
                        rhandjnt_tr_n.addChild(self.rfingerthumbctrl_tn)

                        rfingerthumbctrl_transform_trans = rfingerthumbctrl_transform.transformation()
                        rfingerthumbctrl_transform_worldmatrix = rfingerthumbctrl_transform_trans.asMatrix()

                        rfingerthumbctrl_transform_localmatrix = rfingerthumbctrl_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rfingerthumbctrl_transform.setTransformation(om2.MTransformationMatrix(rfingerthumbctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rfingerthumbpositive_comb_cv, "RightThumbOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightThumbOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightThumbOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightThumbOptions_ctrl.scaleZ"')

                    else:
                        rhandthumbctrl_sl_ls = om2.MSelectionList()
                        rhandthumbctrl_sl_ls.add("Biped_RightFingerThumb*_ctrl")
                        rhandthumbctrl_obj = rhandthumbctrl_sl_ls.getDependNode(index-1)

                        rhandthumbnull_sl_ls = om2.MSelectionList()
                        rhandthumbnull_sl_ls.add("Biped_RightFingerThumb*_null")

                        rhandthumb_tr_n = om2.MFnDagNode(rhandthumbctrl_obj)
                        rhandthumb_tr_n.addChild(self.rhandthumbnull_tn)

                        rhandthumbnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(rhandthumbnull_sl_ls.length()-1):
                            parentobj = rhandthumbnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            rhandthumbnull_parentinvtransform_matrix = rhandthumbnull_parentinvtransform_matrix * null_Matrix

                        rhandthumbnull_childtransform_trans = rhandthumbnull_transform.transformation()
                        rhandthumbnull_childtransform_worldmatrix = rhandthumbnull_childtransform_trans.asMatrix()

                        lhandthumbnull_childtransform_localmatrix = rhandthumbnull_childtransform_worldmatrix * rfingernull_transform_worldmatrix * rhandthumbnull_parentinvtransform_matrix

                        rhandthumbnull_transform.setTransformation(om2.MTransformationMatrix(lhandthumbnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_rhandthumbpositive_comb_cv, "RightFingerThumb{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_rhandthumbnegative_comb_cv, "RightFingerThumb{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightFingerThumb{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerThumb{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerThumb{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                rhandindex_sl_ls = om2.MSelectionList()
                rhandindex_sl_ls.add("RightFingerIndex*")

                for index in range(rhandindex_sl_ls.length()):
                    jnt_rhandindex_obj = rhandindex_sl_ls.getDependNode(index)
                    jnt_rhandindex_path_n = om2.MDagPath()
                    jnt_rhandindex_path = jnt_rhandindex_path_n.getAPathTo(jnt_rhandindex_obj)
                    jnt_rhandindex_transform = om2.MFnTransform(jnt_rhandindex_path)
                    jnt_rhandindex_t = jnt_rhandindex_transform.translation(om2.MSpace.kWorld)

                    self.rhandindexnull_tn = self.MDag2_node.create("transform", "Biped_RightFingerIndex{0}_null".format(index+1))
                    self.rhandindexglobalcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerIndex{0}_globalcurl".format(index+1), self.rhandindexnull_tn)
                    self.rhandindexcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerIndex{0}_curl".format(index+1), self.rhandindexglobalcurl_tn)
                    self.rhandindexctrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerIndex{0}_ctrl".format(index+1), self.rhandindexcurl_tn)
                    ctrl_rhandIndexpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandindexctrl_tn)
                    ctrl_rhandIndexnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandindexctrl_tn)

                    rhandindexnull_transform = om2.MFnTransform(self.rhandindexnull_tn)
                    rhandindexnull_transform.setRotatePivotTranslation(jnt_rhandindex_t, om2.MSpace.kTransform)

                    jnt_rhandindex_r = cmds.xform("RightFingerIndex{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_rhandIndex_x = (jnt_rhandindex_r[0]/180)*3.1415
                    radian_rhandIndex_y = (jnt_rhandindex_r[1]/180)*3.1415
                    radian_rhandIndex_z = (jnt_rhandindex_r[2]/180)*3.1415

                    rhandindexnull_transform_r = rhandindexnull_transform.rotation(om2.MSpace.kTransform)
                    rhandindexnull_transform_r[0], rhandindexnull_transform_r[1], rhandindexnull_transform_r[2] = radian_rhandIndex_x, radian_rhandIndex_y, radian_rhandIndex_z
                    rhandindexnull_transform.setRotation(rhandindexnull_transform_r, om2.MSpace.kTransform)

                    rhandindexctrl_transform = om2.MFnTransform(self.rhandindexctrl_tn)

                    rhandindexctrl_transform_s = rhandindexctrl_transform.findPlug("scale", False)
                    if rhandindexctrl_transform_s.isCompound:
                        for i in range(rhandindexctrl_transform_s.numChildren()):
                            child_plug = rhandindexctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    rhandindexctrl_transform_r = rhandindexctrl_transform.rotation(om2.MSpace.kTransform)
                    rhandindexctrl_transform_r[1] = 1.57079
                    rhandindexctrl_transform.setRotation(rhandindexctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        rhand_tr_n = om2.MFnDagNode(self.rfingernull_tn)
                        rhand_tr_n.addChild(self.rhandindexnull_tn)

                        rhandindexnull_transform_trans = rhandindexnull_transform.transformation()
                        rhandindexnull_transform_worldmatrix = rhandindexnull_transform_trans.asMatrix()

                        rhandindexnull_transform_localmatrix = rhandindexnull_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rhandindexnull_transform.setTransformation(om2.MTransformationMatrix(rhandindexnull_transform_localmatrix))

                        self.rfingerindexctrl_tn = self.MDag2_node.create("transform", "Biped_RightIndexOptions_ctrl")
                        ctrl_rfingerindexpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingerindexctrl_tn)

                        rfingerindexctrl_transform = om2.MFnTransform(self.rfingerindexctrl_tn)

                        rfingerindexctrl_transform_t = rfingerindexctrl_transform.translation(om2.MSpace.kTransform)
                        rfingerindexctrl_transform_t[0], rfingerindexctrl_transform_t[1], rfingerindexctrl_transform_t[2] = jnt_rhandindex_t[0], jnt_rhandindex_t[1], jnt_rhandindex_t[2]
                        rfingerindexctrl_transform.setTranslation(rfingerindexctrl_transform_t, om2.MSpace.kTransform)

                        rfingerindexctrl_transform_r= rfingerindexctrl_transform.rotation(om2.MSpace.kTransform)
                        rfingerindexctrl_transform_r[0], rfingerindexctrl_transform_r[1], rfingerindexctrl_transform_r[2] = rhandindexnull_transform_r[0], rhandindexnull_transform_r[1], rhandindexnull_transform_r[2]
                        rfingerindexctrl_transform.setRotation(rfingerindexctrl_transform_r, om2.MSpace.kTransform)

                        rfingerindexctrl_transform_s = rfingerindexctrl_transform.findPlug("scale", False)
                        if rfingerindexctrl_transform_s.isCompound:
                            for i in range(rfingerindexctrl_transform_s.numChildren()):
                                child_plug = rfingerindexctrl_transform_s.child(i)
                                if i == 0:
                                    attr_value = child_plug.setDouble(-(box_transform_s[0]/9))
                                else:
                                    attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        rhandjnt_tr_n.addChild(self.rfingerindexctrl_tn)

                        rfingerindexctrl_transform_trans = rfingerindexctrl_transform.transformation()
                        rfingerindexctrl_transform_worldmatrix = rfingerindexctrl_transform_trans.asMatrix()

                        rfingerindexctrl_transform_localmatrix = rfingerindexctrl_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rfingerindexctrl_transform.setTransformation(om2.MTransformationMatrix(rfingerindexctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rfingerindexpositive_comb_cv, "RightIndexOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightIndexOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightIndexOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightIndexOptions_ctrl.scaleZ"')

                    else:
                        rhandIndexctrl_sl_ls = om2.MSelectionList()
                        rhandIndexctrl_sl_ls.add("Biped_RightFingerIndex*_ctrl")
                        rhandIndexctrl_obj = rhandIndexctrl_sl_ls.getDependNode(index-1)

                        rhandIndexnull_sl_ls = om2.MSelectionList()
                        rhandIndexnull_sl_ls.add("Biped_RightFingerIndex*_null")

                        rhandIndex_tr_n = om2.MFnDagNode(rhandIndexctrl_obj)
                        rhandIndex_tr_n.addChild(self.rhandindexnull_tn)

                        rhandIndexnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(rhandIndexnull_sl_ls.length()-1):
                            parentobj = rhandIndexnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            rhandIndexnull_parentinvtransform_matrix = rhandIndexnull_parentinvtransform_matrix * null_Matrix

                        rhandindexnull_childtransform_trans = rhandindexnull_transform.transformation()
                        rhandindexnull_childtransform_worldmatrix = rhandindexnull_childtransform_trans.asMatrix()

                        rhandindexnull_childtransform_localmatrix = rhandindexnull_childtransform_worldmatrix * rfingernull_transform_worldmatrix * rhandIndexnull_parentinvtransform_matrix

                        rhandindexnull_transform.setTransformation(om2.MTransformationMatrix(rhandindexnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_rhandIndexpositive_comb_cv, "RightFingerIndex{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_rhandIndexnegative_comb_cv, "RightFingerIndex{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightFingerIndex{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerIndex{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerIndex{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                rhandmiddle_sl_ls = om2.MSelectionList()
                rhandmiddle_sl_ls.add("RightFingerMiddle*")

                for index in range(rhandmiddle_sl_ls.length()):
                    jnt_rhandmiddle_obj = rhandmiddle_sl_ls.getDependNode(index)
                    jnt_rhandmiddle_path_n = om2.MDagPath()
                    jnt_rhandmiddle_path = jnt_rhandmiddle_path_n.getAPathTo(jnt_rhandmiddle_obj)
                    jnt_rhandmiddle_transform = om2.MFnTransform(jnt_rhandmiddle_path)
                    jnt_rhandmiddle_t = jnt_rhandmiddle_transform.translation(om2.MSpace.kWorld)

                    self.rhandmiddlenull_tn = self.MDag2_node.create("transform", "Biped_RightFingerMiddle{0}_null".format(index + 1))
                    self.rhandmiddleglobalcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerMiddle{0}_globalcurl".format(index+1), self.rhandmiddlenull_tn)
                    self.rhandmiddlecurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerMiddle{0}_curl".format(index+1), self.rhandmiddleglobalcurl_tn)
                    self.rhandmiddlectrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerMiddle{0}_ctrl".format(index + 1), self.rhandmiddlecurl_tn)
                    ctrl_rhandmiddlepositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandmiddlectrl_tn)
                    ctrl_rhandmiddlenegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandmiddlectrl_tn)

                    rhandmiddlenull_transform = om2.MFnTransform(self.rhandmiddlenull_tn)
                    rhandmiddlenull_transform.setRotatePivotTranslation(jnt_rhandmiddle_t, om2.MSpace.kTransform)

                    jnt_rhandmiddle_r = cmds.xform("RightFingerMiddle{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_rhandmiddle_x = (jnt_rhandmiddle_r[0]/180)*3.1415
                    radian_rhandmiddle_y = (jnt_rhandmiddle_r[1]/180)*3.1415
                    radian_rhandmiddle_z = (jnt_rhandmiddle_r[2]/180)*3.1415

                    rhandmiddlenull_transform_r = rhandmiddlenull_transform.rotation(om2.MSpace.kTransform)
                    rhandmiddlenull_transform_r[0], rhandmiddlenull_transform_r[1], rhandmiddlenull_transform_r[2] = radian_rhandmiddle_x, radian_rhandmiddle_y, radian_rhandmiddle_z
                    rhandmiddlenull_transform.setRotation(rhandmiddlenull_transform_r, om2.MSpace.kTransform)

                    rhandmiddlectrl_transform = om2.MFnTransform(self.rhandmiddlectrl_tn)

                    rhandmiddlectrl_transform_s = rhandmiddlectrl_transform.findPlug("scale", False)
                    if rhandmiddlectrl_transform_s.isCompound:
                        for i in range(rhandmiddlectrl_transform_s.numChildren()):
                            child_plug = rhandmiddlectrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    rhandmiddlectrl_transform_r = rhandmiddlectrl_transform.rotation(om2.MSpace.kTransform)
                    rhandmiddlectrl_transform_r[1] = 1.57079
                    rhandmiddlectrl_transform.setRotation(rhandmiddlectrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        rhand_tr_n = om2.MFnDagNode(self.rfingernull_tn)
                        rhand_tr_n.addChild(self.rhandmiddlenull_tn)

                        rhandmiddlenull_transform_trans = rhandmiddlenull_transform.transformation()
                        rhandmiddlenull_transform_worldmatrix = rhandmiddlenull_transform_trans.asMatrix()

                        rhandmiddlenull_transform_localmatrix = rhandmiddlenull_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rhandmiddlenull_transform.setTransformation(om2.MTransformationMatrix(rhandmiddlenull_transform_localmatrix))

                        self.rfingermiddlectrl_tn = self.MDag2_node.create("transform", "Biped_RightMiddleOptions_ctrl")
                        ctrl_rfingermiddlepositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingermiddlectrl_tn)

                        rfingermiddlectrl_transform = om2.MFnTransform(self.rfingermiddlectrl_tn)

                        rfingermiddlectrl_transform_t = rfingermiddlectrl_transform.translation(om2.MSpace.kTransform)
                        rfingermiddlectrl_transform_t[0], rfingermiddlectrl_transform_t[1], rfingermiddlectrl_transform_t[2] = jnt_rhandmiddle_t[0], jnt_rhandmiddle_t[1], jnt_rhandmiddle_t[2]
                        rfingermiddlectrl_transform.setTranslation(rfingermiddlectrl_transform_t, om2.MSpace.kTransform)

                        rfingermiddlectrl_transform_r= rfingermiddlectrl_transform.rotation(om2.MSpace.kTransform)
                        rfingermiddlectrl_transform_r[0], rfingermiddlectrl_transform_r[1], rfingermiddlectrl_transform_r[2] = rhandmiddlenull_transform_r[0], rhandmiddlenull_transform_r[1], rhandmiddlenull_transform_r[2]
                        rfingermiddlectrl_transform.setRotation(rfingermiddlectrl_transform_r, om2.MSpace.kTransform)

                        rfingermiddlectrl_transform_s = rfingermiddlectrl_transform.findPlug("scale", False)
                        if rfingermiddlectrl_transform_s.isCompound:
                            for i in range(rfingermiddlectrl_transform_s.numChildren()):
                                child_plug = rfingermiddlectrl_transform_s.child(i)
                                if i == 0:
                                    attr_value = child_plug.setDouble(-(box_transform_s[0]/9))
                                else:
                                    attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        rhandjnt_tr_n.addChild(self.rfingermiddlectrl_tn)

                        rfingermiddlectrl_transform_trans = rfingermiddlectrl_transform.transformation()
                        rfingermiddlectrl_transform_worldmatrix = rfingermiddlectrl_transform_trans.asMatrix()

                        rfingermiddlectrl_transform_localmatrix = rfingermiddlectrl_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rfingermiddlectrl_transform.setTransformation(om2.MTransformationMatrix(rfingermiddlectrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rfingermiddlepositive_comb_cv, "RightMiddleOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightMiddleOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightMiddleOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightMiddleOptions_ctrl.scaleZ"')

                    else:
                        rhandmiddlectrl_sl_ls = om2.MSelectionList()
                        rhandmiddlectrl_sl_ls.add("Biped_RightFingerMiddle*_ctrl")
                        rhandmiddlectrl_obj = rhandmiddlectrl_sl_ls.getDependNode(index-1)

                        rhandmiddlenull_sl_ls = om2.MSelectionList()
                        rhandmiddlenull_sl_ls.add("Biped_RightFingerMiddle*_null")

                        rhandmiddle_tr_n = om2.MFnDagNode(rhandmiddlectrl_obj)
                        rhandmiddle_tr_n.addChild(self.rhandmiddlenull_tn)

                        rhandmiddlenull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(rhandmiddlenull_sl_ls.length()-1):
                            parentobj = rhandmiddlenull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            rhandmiddlenull_parentinvtransform_matrix = rhandmiddlenull_parentinvtransform_matrix * null_Matrix

                        rhandmiddlenull_childtransform_trans = rhandmiddlenull_transform.transformation()
                        rhandmiddlenull_childtransform_worldmatrix = rhandmiddlenull_childtransform_trans.asMatrix()

                        rhandmiddlenull_childtransform_localmatrix = rhandmiddlenull_childtransform_worldmatrix * rfingernull_transform_worldmatrix * rhandmiddlenull_parentinvtransform_matrix

                        rhandmiddlenull_transform.setTransformation(om2.MTransformationMatrix(rhandmiddlenull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_rhandmiddlepositive_comb_cv, "RightFingerMiddle{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_rhandmiddlenegative_comb_cv, "RightFingerMiddle{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightFingerMiddle{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerMiddle{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerMiddle{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                rhandring_sl_ls = om2.MSelectionList()
                rhandring_sl_ls.add("RightFingerRing*")

                for index in range(rhandring_sl_ls.length()):
                    jnt_rhandring_obj = rhandring_sl_ls.getDependNode(index)
                    jnt_rhandring_path_n = om2.MDagPath()
                    jnt_rhandring_path = jnt_rhandring_path_n.getAPathTo(jnt_rhandring_obj)
                    jnt_rhandring_transform = om2.MFnTransform(jnt_rhandring_path)
                    jnt_rhandring_t = jnt_rhandring_transform.translation(om2.MSpace.kWorld)

                    self.rhandringnull_tn = self.MDag2_node.create("transform", "Biped_RightFingerRing{0}_null".format(index + 1))
                    self.rhandringglobalcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerRing{0}_globalcurl".format(index+1), self.rhandringnull_tn)
                    self.rhandringcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerRing{0}_curl".format(index+1), self.rhandringglobalcurl_tn)
                    self.rhandringctrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerRing{0}_ctrl".format(index + 1), self.rhandringcurl_tn)
                    ctrl_rhandringpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandringctrl_tn)
                    ctrl_rhandringnegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandringctrl_tn)

                    rhandringnull_transform = om2.MFnTransform(self.rhandringnull_tn)
                    rhandringnull_transform.setRotatePivotTranslation(jnt_rhandring_t, om2.MSpace.kTransform)

                    jnt_rhandring_r = cmds.xform("RightFingerRing{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_rhandring_x = (jnt_rhandring_r[0]/180)*3.1415
                    radian_rhandring_y = (jnt_rhandring_r[1]/180)*3.1415
                    radian_rhandring_z = (jnt_rhandring_r[2]/180)*3.1415

                    rhandringnull_transform_r = rhandringnull_transform.rotation(om2.MSpace.kTransform)
                    rhandringnull_transform_r[0], rhandringnull_transform_r[1], rhandringnull_transform_r[2] = radian_rhandring_x, radian_rhandring_y, radian_rhandring_z
                    rhandringnull_transform.setRotation(rhandringnull_transform_r, om2.MSpace.kTransform)

                    rhandringctrl_transform = om2.MFnTransform(self.rhandringctrl_tn)

                    rhandringctrl_transform_s = rhandringctrl_transform.findPlug("scale", False)
                    if rhandringctrl_transform_s.isCompound:
                        for i in range(rhandringctrl_transform_s.numChildren()):
                            child_plug = rhandringctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    rhandringctrl_transform_r = rhandringctrl_transform.rotation(om2.MSpace.kTransform)
                    rhandringctrl_transform_r[1] = 1.57079
                    rhandringctrl_transform.setRotation(rhandringctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        rhand_tr_n = om2.MFnDagNode(self.rfingernull_tn)
                        rhand_tr_n.addChild(self.rhandringnull_tn)

                        rhandringnull_transform_trans = rhandringnull_transform.transformation()
                        rhandringnull_transform_worldmatrix = rhandringnull_transform_trans.asMatrix()

                        rhandringnull_transform_localmatrix = rhandringnull_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rhandringnull_transform.setTransformation(om2.MTransformationMatrix(rhandringnull_transform_localmatrix))

                        self.rfingerringctrl_tn = self.MDag2_node.create("transform", "Biped_RightRingOptions_ctrl")
                        ctrl_rfingerringpositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingerringctrl_tn)

                        rfingerringctrl_transform = om2.MFnTransform(self.rfingerringctrl_tn)

                        rfingerringctrl_transform_t = rfingerringctrl_transform.translation(om2.MSpace.kTransform)
                        rfingerringctrl_transform_t[0], rfingerringctrl_transform_t[1], rfingerringctrl_transform_t[2] = jnt_rhandring_t[0], jnt_rhandring_t[1], jnt_rhandring_t[2]
                        rfingerringctrl_transform.setTranslation(rfingerringctrl_transform_t, om2.MSpace.kTransform)

                        rfingerringctrl_transform_r= rfingerringctrl_transform.rotation(om2.MSpace.kTransform)
                        rfingerringctrl_transform_r[0], rfingerringctrl_transform_r[1], rfingerringctrl_transform_r[2] = rhandringnull_transform_r[0], rhandringnull_transform_r[1], rhandringnull_transform_r[2]
                        rfingerringctrl_transform.setRotation(rfingerringctrl_transform_r, om2.MSpace.kTransform)

                        rfingerringctrl_transform_s = rfingerringctrl_transform.findPlug("scale", False)
                        if rfingerringctrl_transform_s.isCompound:
                            for i in range(rfingerringctrl_transform_s.numChildren()):
                                child_plug = rfingerringctrl_transform_s.child(i)
                                if i == 0:
                                    attr_value = child_plug.setDouble(-(box_transform_s[0]/9))
                                else:
                                    attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        rhandjnt_tr_n.addChild(self.rfingerringctrl_tn)

                        rfingerringctrl_transform_trans = rfingerringctrl_transform.transformation()
                        rfingerringctrl_transform_worldmatrix = rfingerringctrl_transform_trans.asMatrix()

                        rfingerringctrl_transform_localmatrix = rfingerringctrl_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rfingerringctrl_transform.setTransformation(om2.MTransformationMatrix(rfingerringctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rfingerringpositive_comb_cv, "RightRingOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightRingOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightRingOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightRingOptions_ctrl.scaleZ"')

                    else:
                        rhandringctrl_sl_ls = om2.MSelectionList()
                        rhandringctrl_sl_ls.add("Biped_RightFingerRing*_ctrl")
                        rhandringctrl_obj = rhandringctrl_sl_ls.getDependNode(index-1)

                        rhandringnull_sl_ls = om2.MSelectionList()
                        rhandringnull_sl_ls.add("Biped_RightFingerRing*_null")

                        rhandring_tr_n = om2.MFnDagNode(rhandringctrl_obj)
                        rhandring_tr_n.addChild(self.rhandringnull_tn)

                        rhandringnull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(rhandringnull_sl_ls.length()-1):
                            parentobj = rhandringnull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            rhandringnull_parentinvtransform_matrix = rhandringnull_parentinvtransform_matrix * null_Matrix

                        rhandringnull_childtransform_trans = rhandringnull_transform.transformation()
                        rhandringnull_childtransform_worldmatrix = rhandringnull_childtransform_trans.asMatrix()

                        rhandringnull_childtransform_localmatrix = rhandringnull_childtransform_worldmatrix * rfingernull_transform_worldmatrix * rhandringnull_parentinvtransform_matrix

                        rhandringnull_transform.setTransformation(om2.MTransformationMatrix(rhandringnull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_rhandringpositive_comb_cv, "RightFingerRing{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_rhandringnegative_comb_cv, "RightFingerRing{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightFingerRing{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerRing{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerRing{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            try:
                rhandpinky_sl_ls = om2.MSelectionList()
                rhandpinky_sl_ls.add("RightFingerPinky*")

                for index in range(rhandpinky_sl_ls.length()):
                    jnt_rhandpinky_obj = rhandpinky_sl_ls.getDependNode(index)
                    jnt_rhandpinky_path_n = om2.MDagPath()
                    jnt_rhandpinky_path = jnt_rhandpinky_path_n.getAPathTo(jnt_rhandpinky_obj)
                    jnt_rhandpinky_transform = om2.MFnTransform(jnt_rhandpinky_path)
                    jnt_rhandpinky_t = jnt_rhandpinky_transform.translation(om2.MSpace.kWorld)

                    self.rhandpinkynull_tn = self.MDag2_node.create("transform", "Biped_RightFingerPinky{0}_null".format(index + 1))
                    self.rhandpinkyglobalcurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerPinky{0}_globalcurl".format(index+1), self.rhandpinkynull_tn)
                    self.rhandpinkycurl_tn = self.MDag2_node.create("transform", "Biped_RightFingerPinky{0}_curl".format(index+1), self.rhandpinkyglobalcurl_tn)
                    self.rhandpinkyctrl_tn = self.MDag2_node.create("transform", "Biped_RightFingerPinky{0}_ctrl".format(index + 1), self.rhandpinkycurl_tn)
                    ctrl_rhandpinkypositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rhandpinkyctrl_tn)
                    ctrl_rhandpinkynegative_comb_cv = self.MNurbs2_cv.create([crv_ctrl_rhand_line_up, crv_ctrl_rhand_star, crv_ctrl_rhand_line_down], self.rhandpinkyctrl_tn)

                    rhandpinkynull_transform = om2.MFnTransform(self.rhandpinkynull_tn)
                    rhandpinkynull_transform.setRotatePivotTranslation(jnt_rhandpinky_t, om2.MSpace.kTransform)

                    jnt_rhandpinky_r = cmds.xform("RightFingerPinky{0}".format(index+1), query=True, rotation=True, worldSpace=True)

                    radian_rhandpinky_x = (jnt_rhandpinky_r[0]/180)*3.1415
                    radian_rhandpinky_y = (jnt_rhandpinky_r[1]/180)*3.1415
                    radian_rhandpinky_z = (jnt_rhandpinky_r[2]/180)*3.1415

                    rhandpinkynull_transform_r = rhandpinkynull_transform.rotation(om2.MSpace.kTransform)
                    rhandpinkynull_transform_r[0], rhandpinkynull_transform_r[1], rhandpinkynull_transform_r[2] = radian_rhandpinky_x, radian_rhandpinky_y, radian_rhandpinky_z
                    rhandpinkynull_transform.setRotation(rhandpinkynull_transform_r, om2.MSpace.kTransform)

                    rhandpinkyctrl_transform = om2.MFnTransform(self.rhandpinkyctrl_tn)

                    rhandpinkyctrl_transform_s = rhandpinkyctrl_transform.findPlug("scale", False)
                    if rhandpinkyctrl_transform_s.isCompound:
                        for i in range(rhandpinkyctrl_transform_s.numChildren()):
                            child_plug = rhandpinkyctrl_transform_s.child(i)
                            attr_value = child_plug.setDouble(box_transform_s[0]/14)

                    rhandpinkyctrl_transform_r = rhandpinkyctrl_transform.rotation(om2.MSpace.kTransform)
                    rhandpinkyctrl_transform_r[1] = 1.57079
                    rhandpinkyctrl_transform.setRotation(rhandpinkyctrl_transform_r, om2.MSpace.kTransform)

                    if index == 0:
                        rhand_tr_n = om2.MFnDagNode(self.rfingernull_tn)
                        rhand_tr_n.addChild(self.rhandpinkynull_tn)

                        rhandpinkynull_transform_trans = rhandpinkynull_transform.transformation()
                        rhandpinkynull_transform_worldmatrix = rhandpinkynull_transform_trans.asMatrix()

                        rhandpinkynull_transform_localmatrix = rhandpinkynull_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rhandpinkynull_transform.setTransformation(om2.MTransformationMatrix(rhandpinkynull_transform_localmatrix))

                        self.rfingerpinkyctrl_tn = self.MDag2_node.create("transform", "Biped_RightPinkyOptions_ctrl")
                        ctrl_rfingerpinkypositive_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_circle_points, 1, 1, False, True, True, self.rfingerpinkyctrl_tn)

                        rfingerpinkyctrl_transform = om2.MFnTransform(self.rfingerpinkyctrl_tn)

                        rfingerpinkyctrl_transform_t = rfingerpinkyctrl_transform.translation(om2.MSpace.kTransform)
                        rfingerpinkyctrl_transform_t[0], rfingerpinkyctrl_transform_t[1], rfingerpinkyctrl_transform_t[2] = jnt_rhandpinky_t[0], jnt_rhandpinky_t[1], jnt_rhandpinky_t[2]
                        rfingerpinkyctrl_transform.setTranslation(rfingerpinkyctrl_transform_t, om2.MSpace.kTransform)

                        rfingerpinkyctrl_transform_r= rfingerpinkyctrl_transform.rotation(om2.MSpace.kTransform)
                        rfingerpinkyctrl_transform_r[0], rfingerpinkyctrl_transform_r[1], rfingerpinkyctrl_transform_r[2] = rhandpinkynull_transform_r[0], rhandpinkynull_transform_r[1], rhandpinkynull_transform_r[2]
                        rfingerpinkyctrl_transform.setRotation(rfingerpinkyctrl_transform_r, om2.MSpace.kTransform)

                        rfingerpinkyctrl_transform_s = rfingerpinkyctrl_transform.findPlug("scale", False)
                        if rfingerpinkyctrl_transform_s.isCompound:
                            for i in range(rfingerpinkyctrl_transform_s.numChildren()):
                                child_plug = rfingerpinkyctrl_transform_s.child(i)
                                if i == 0:
                                    attr_value = child_plug.setDouble(-(box_transform_s[0]/9))
                                else:
                                    attr_value = child_plug.setDouble(box_transform_s[0]/9)

                        rhandjnt_tr_n.addChild(self.rfingerpinkyctrl_tn)

                        rfingerpinkyctrl_transform_trans = rfingerpinkyctrl_transform.transformation()
                        rfingerpinkyctrl_transform_worldmatrix = rfingerpinkyctrl_transform_trans.asMatrix()

                        rfingerpinkyctrl_transform_localmatrix = rfingerpinkyctrl_transform_worldmatrix * rfingernull_transform_worldmatrix

                        rfingerpinkyctrl_transform.setTransformation(om2.MTransformationMatrix(rfingerpinkyctrl_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rfingerpinkypositive_comb_cv, "RightPinkyOptions_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0.5 "Biped_RightPinkyOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightPinkyOptions_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightPinkyOptions_ctrl.scaleZ"')

                    else:
                        rhandpinkyctrl_sl_ls = om2.MSelectionList()
                        rhandpinkyctrl_sl_ls.add("Biped_RightFingerPinky*_ctrl")
                        rhandpinkyctrl_obj = rhandpinkyctrl_sl_ls.getDependNode(index-1)

                        rhandpinkynull_sl_ls = om2.MSelectionList()
                        rhandpinkynull_sl_ls.add("Biped_RightFingerPinky*_null")

                        rhandpinky_tr_n = om2.MFnDagNode(rhandpinkyctrl_obj)
                        rhandpinky_tr_n.addChild(self.rhandpinkynull_tn)

                        rhandpinkynull_parentinvtransform_matrix = om2.MMatrix()
                        for i in range(rhandpinkynull_sl_ls.length()-1):
                            parentobj = rhandpinkynull_sl_ls.getDependNode(i)
                            parentinvtransform = om2.MFnTransform(parentobj)
                            parentinvtransform_trans = parentinvtransform.transformation()
                            null_Matrix = parentinvtransform_trans.asMatrixInverse()

                            rhandpinkynull_parentinvtransform_matrix = rhandpinkynull_parentinvtransform_matrix * null_Matrix

                        rhandpinkynull_childtransform_trans = rhandpinkynull_transform.transformation()
                        rhandpinkynull_childtransform_worldmatrix = rhandpinkynull_childtransform_trans.asMatrix()

                        rhandpinkynull_childtransform_localmatrix = rhandpinkynull_childtransform_worldmatrix * rfingernull_transform_worldmatrix * rhandpinkynull_parentinvtransform_matrix

                        rhandpinkynull_transform.setTransformation(om2.MTransformationMatrix(rhandpinkynull_childtransform_localmatrix))

                    self.MDG2_mod.renameNode(ctrl_rhandpinkypositive_comb_cv, "RightFingerPinky{0}_shape1".format(index + 1))
                    self.MDG2_mod.renameNode(ctrl_rhandpinkynegative_comb_cv, "RightFingerPinky{0}_shape2".format(index + 1))
                    self.MDG2_mod.commandToExecute('color -rgbColor 0 1 0 "Biped_RightFingerPinky{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFingerPinky{0}_ctrl"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.translateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.translateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.translateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.rotateX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.rotateY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.rotateZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.scaleZ"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_null.visibility"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_ctrl.scaleX"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_ctrl.scaleY"'.format(index + 1))
                    self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFingerPinky{0}_ctrl.scaleZ"'.format(index + 1))
                    self.MDG2_mod.doIt()

            except:
                pass

            rleg_sl_ls = om2.MSelectionList()
            rleg_sl_ls.add("RightUpLeg")
            rleg_sl_ls.add("RightLeg")
            rleg_sl_ls.add("RightFoot")
            rleg_sl_ls.add("RightToeBase")

            fkrleg_sl_ls = om2.MSelectionList()
            fkrleg_sl_ls.add("FkRightUpLeg")
            fkrleg_sl_ls.add("FkRightLeg")
            fkrleg_sl_ls.add("FkRightFoot")
            fkrleg_sl_ls.add("FkRightToeBase")

            for index in range(fkrleg_sl_ls.length()):
                    jnt_rleg_obj = fkrleg_sl_ls.getDependNode(index)
                    jnt_rleg_path_n = om2.MDagPath()
                    jnt_rleg_path = jnt_rleg_path_n.getAPathTo(jnt_rleg_obj)
                    jnt_rleg_transform = om2.MFnTransform(jnt_rleg_path)
                    jnt_rleg_t = jnt_rleg_transform.translation(om2.MSpace.kWorld)

                    if index == 0:
                        if self.hipjnt.currentIndex() == 1:
                            self.ruplegnull_tn = self.MDag2_node.create("transform", "Biped_FkRightUpLeg_null", self.hipctrl_tn)
                        else:
                            self.ruplegnull_tn = self.MDag2_node.create("transform", "Biped_FkRightUpLeg_null", self.rootctrl_tn)

                        self.ruplegupctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightUpLeg_ctrl", self.ruplegnull_tn)
                        ctrl_ruplegpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.ruplegupctrl_tn)

                        ruplegnull_transform = om2.MFnTransform(self.ruplegnull_tn)
                        ruplegnull_transform.setRotatePivotTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                        jnt_rupleg_r = cmds.xform("RightUpLeg", query=True, rotation=True, worldSpace=True)

                        radian_rlegtoebasenull_x = (jnt_rupleg_r[0]/180)*3.1415
                        radian_rlegtoebasenull_y = (jnt_rupleg_r[1]/180)*3.1415
                        radian_rlegtoebasenull_z = (jnt_rupleg_r[2]/180)*3.1415

                        ruplegnull_transform_r = ruplegnull_transform.rotation(om2.MSpace.kTransform)
                        ruplegnull_transform_r[0], ruplegnull_transform_r[1], ruplegnull_transform_r[2] = radian_rlegtoebasenull_x, radian_rlegtoebasenull_y, radian_rlegtoebasenull_z
                        ruplegnull_transform.setRotation(ruplegnull_transform_r, om2.MSpace.kTransform)

                        ruplegnctrl_transform = om2.MFnTransform(self.ruplegupctrl_tn)

                        ruplegnctrl_transform_r = ruplegnull_transform.rotation(om2.MSpace.kTransform)
                        ruplegnctrl_transform_r[0], ruplegnctrl_transform_r[1], ruplegnctrl_transform_r[2] = 0, 1.57079, 0
                        ruplegnctrl_transform.setRotation(ruplegnctrl_transform_r, om2.MSpace.kTransform)

                        ruplegnctrl_transform_s = ruplegnctrl_transform.findPlug("scale", False)
                        if ruplegnctrl_transform_s.isCompound:
                            for i in range(ruplegnctrl_transform_s.numChildren()):
                                child_plug = ruplegnctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        ruplegnull_transform_trans = ruplegnull_transform.transformation()
                        ruplegnull_transform_worldmatrix = ruplegnull_transform_trans.asMatrix()

                        ruplegnull_transform_localmatrix = ruplegnull_transform_worldmatrix * rootctrl_transform_worldmatrix

                        ruplegnull_transform.setTransformation(om2.MTransformationMatrix(ruplegnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_ruplegpositive_comb_cv, "FkRightUpLeg_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightUpLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightUpLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightUpLeg_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

                    elif index == 1:
                        self.rlegnull_tn = self.MDag2_node.create("transform", "Biped_FkRightLeg_null", self.ruplegupctrl_tn)
                        self.stretchyrlegnull_tn = self.MDag2_node.create("transform", "Biped_StretchyRightLeg_null", self.rlegnull_tn)
                        self.rlegctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightLeg_ctrl", self.stretchyrlegnull_tn)
                        ctrl_rlegpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rlegctrl_tn)

                        rlegnull_transform = om2.MFnTransform(self.rlegnull_tn)
                        rlegnull_transform.setRotatePivotTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                        jnt_rleg_r = cmds.xform("RightLeg", query=True, rotation=True, worldSpace=True)

                        radian_rlegnull_x = (jnt_rleg_r[0]/180)*3.1415
                        radian_rlegnull_y = (jnt_rleg_r[1]/180)*3.1415
                        radian_rlegnull_z = (jnt_rleg_r[2]/180)*3.1415

                        rlegnull_transform_r = rlegnull_transform.rotation(om2.MSpace.kTransform)
                        rlegnull_transform_r[0], rlegnull_transform_r[1], rlegnull_transform_r[2] = radian_rlegnull_x, radian_rlegnull_y, radian_rlegnull_z
                        rlegnull_transform.setRotation(rlegnull_transform_r, om2.MSpace.kTransform)

                        rlegctrl_transform = om2.MFnTransform(self.rlegctrl_tn)

                        rlegctrl_transform_r = rlegnull_transform.rotation(om2.MSpace.kTransform)
                        rlegctrl_transform_r[0], rlegctrl_transform_r[1], rlegctrl_transform_r[2] = 0, 1.57079, 0
                        rlegctrl_transform.setRotation(rlegctrl_transform_r, om2.MSpace.kTransform)

                        rlegctrl_transform_s = rlegctrl_transform.findPlug("scale", False)
                        if rlegctrl_transform_s.isCompound:
                            for i in range(rlegctrl_transform_s.numChildren()):
                                child_plug = rlegctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        rlegnull_transform_trans = rlegnull_transform.transformation()
                        rlegnull_transform_worldmatrix = rlegnull_transform_trans.asMatrix()

                        rlegnull_transform_localmatrix = rlegnull_transform_worldmatrix * rootctrl_transform_worldmatrix * ruplegnull_transform_localmatrix.inverse()

                        rlegnull_transform.setTransformation(om2.MTransformationMatrix(rlegnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rlegpositive_comb_cv, "FkRightLeg_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightLeg_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightLeg_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

                        if cmds.objExists("NoFlipRightLeg_Ik") and cmds.objExists("PVRightLeg_Ik"):

                            self.pvrlegkneenull_tn = self.MDag2_node.create("transform", "Biped_PVRightKnee_null", self.masterctrl_tn)
                            self.pvrlegkneectrl_tn = self.MDag2_node.create("transform", "Biped_PVRightKnee_ctrl", self.pvrlegkneenull_tn)
                            crv_ctrl_knee_triangle_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_triangle_points, 1, 1, False, True, True, self.pvrlegkneectrl_tn)
                            crv_ctrl_knee_arrow_l = self.MNurbs2_cv.createWithEditPoints(ctrl_elbow_arrow_points, 1, 1, False, True, True, self.pvrlegkneectrl_tn)

                            pvrlegkneenull_transform = om2.MFnTransform(self.pvrlegkneenull_tn)
                            pvrlegkneenull_transform.setTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                            pvrlegkneenull_transform_t = pvrlegkneenull_transform.translation(om2.MSpace.kTransform)
                            pvrlegkneenull_transform_t[2] = pvrlegkneenull_transform_t[2]+20
                            pvrlegkneenull_transform.setTranslation(pvrlegkneenull_transform_t, om2.MSpace.kTransform)

                            pvrlegkneectrl_transform = om2.MFnTransform(self.pvrlegkneectrl_tn)

                            pvrlegknectrl_transform_r = pvrlegkneectrl_transform.rotation(om2.MSpace.kTransform)
                            pvrlegknectrl_transform_r[0] = 1.57079
                            pvrlegkneectrl_transform.setRotation(pvrlegknectrl_transform_r, om2.MSpace.kTransform)

                            pvrlegkneectrl_transform_s = pvrlegkneectrl_transform.findPlug("scale", False)
                            if pvrlegkneectrl_transform_s.isCompound:
                                for i in range(pvrlegkneectrl_transform_s.numChildren()):
                                    child_plug = pvrlegkneectrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/8)

                            self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_PVRightKnee_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_PVRightKnee_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.scaleZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_null.visibility"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_PVRightKnee_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                    elif index == 2:
                        self.rlegfootnull_tn = self.MDag2_node.create("transform", "Biped_FkRightFoot_null", self.rlegctrl_tn)
                        self.stretchyrlegfootnull_tn = self.MDag2_node.create("transform", "Biped_StretchyRightFoot_null", self.rlegfootnull_tn)
                        self.rlegfootctrl_tn = self.MDag2_node.create("transform", "Biped_FkRightFoot_ctrl", self.stretchyrlegfootnull_tn)
                        ctrl_rlegfootpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rlegfootctrl_tn)

                        self.riklegfootnull_tn = self.MDag2_node.create("transform", "Biped_IkRightFoot_null", self.masterctrl_tn)
                        self.riklegfootoffsetnull_tn = self.MDag2_node.create("transform", "Biped_IkRightFootOffset_null", self.riklegfootnull_tn)
                        self.riklegfootrotnull_tn = self.MDag2_node.create("transform", "Biped_IkRightFootRot_null", self.riklegfootoffsetnull_tn)
                        self.riklegfootctrl_tn = self.MDag2_node.create("transform", "Biped_IkRightFoot_ctrl", self.riklegfootrotnull_tn)
                        ctrl_riklegfootpositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_hand_line_l, crv_ctrl_hand_line, crv_ctrl_hand_line_r], self.riklegfootctrl_tn)

                        self.nofliprlegkneenull_tn = self.MDag2_node.create("transform", "Biped_NoFlipRightKnee_null", self.riklegfootoffsetnull_tn)
                        self.nofliprlegkneectrl_tn = self.MDag2_node.create("transform", "Biped_NoFlipRightKnee_ctrl", self.nofliprlegkneenull_tn)
                        self.nofliprlegknectrl_tn = self.MDag2_node.create("locator", "NoFlipRightKnee_shape", self.nofliprlegkneectrl_tn)

                        rlegfootnull_transform = om2.MFnTransform(self.rlegfootnull_tn)
                        rlegfootnull_transform.setTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                        riklegfootnull_transform = om2.MFnTransform(self.riklegfootnull_tn)
                        riklegfootnull_transform.setTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                        riklegfootoffsetnull_transform = om2.MFnTransform(self.riklegfootoffsetnull_tn)

                        jnt_rlegfoot_r = cmds.xform("RightFoot", query=True, rotation=True, worldSpace=True)

                        radian_rlegfootnull_x = (jnt_rlegfoot_r[0]/180)*3.1415
                        radian_rlegfootnull_y = (jnt_rlegfoot_r[1]/180)*3.1415
                        radian_rlegfootnull_z = (jnt_rlegfoot_r[2]/180)*3.1415

                        rlegfootnull_transform_r = rlegfootnull_transform.rotation(om2.MSpace.kTransform)
                        rlegfootnull_transform_r[0], rlegfootnull_transform_r[1], rlegfootnull_transform_r[2] = radian_rlegfootnull_x, radian_rlegfootnull_y, radian_rlegfootnull_z
                        rlegfootnull_transform.setRotation(rlegfootnull_transform_r, om2.MSpace.kTransform)

                        riklegfootnull_transform.setRotation(rlegfootnull_transform_r, om2.MSpace.kTransform)

                        riklegfootoffsetnull_transform.setRotation(rlegfootnull_transform_r, om2.MSpace.kTransform)

                        rlegfootctrl_transform = om2.MFnTransform(self.rlegfootctrl_tn)

                        riklegfootctrl_transform = om2.MFnTransform(self.riklegfootctrl_tn)

                        nofliprlegkneenull_transform = om2.MFnTransform(self.nofliprlegkneectrl_tn)

                        rlegfootctrl_transform_r = rlegfootctrl_transform.rotation(om2.MSpace.kTransform)
                        rlegfootctrl_transform_r[0], rlegfootctrl_transform_r[1], rlegfootctrl_transform_r[2] = -1.57079, 0, -1.57079
                        rlegfootctrl_transform.setRotation(rlegfootctrl_transform_r, om2.MSpace.kTransform)

                        riklegfootctrl_transform_t = riklegfootctrl_transform.translation(om2.MSpace.kTransform)
                        riklegfootctrl_transform_t[1], riklegfootctrl_transform_t[2] = -1, -(jnt_rleg_t[2]+2)
                        riklegfootctrl_transform.setTranslation(riklegfootctrl_transform_t, om2.MSpace.kTransform)

                        riklegfootctrl_transform_r = riklegfootctrl_transform.rotation(om2.MSpace.kTransform)
                        riklegfootctrl_transform_r[1] = -1.57079
                        riklegfootctrl_transform.setRotation(riklegfootctrl_transform_r, om2.MSpace.kTransform)

                        nofliprlegkneenull_transform_t = nofliprlegkneenull_transform.translation(om2.MSpace.kTransform)
                        nofliprlegkneenull_transform_t[0] = 7
                        nofliprlegkneenull_transform.setTranslation(nofliprlegkneenull_transform_t, om2.MSpace.kTransform)

                        rlegfootctrl_transform_s = rlegfootctrl_transform.findPlug("scale", False)
                        if rlegfootctrl_transform_s.isCompound:
                            for i in range(rlegfootctrl_transform_s.numChildren()):
                                child_plug = rlegfootctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        riklegfootctrl_transform_s = riklegfootctrl_transform.findPlug("scale", False)
                        if riklegfootctrl_transform_s.isCompound:
                            for i in range(riklegfootctrl_transform_s.numChildren()):
                                child_plug = riklegfootctrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/2)

                        rlegfootnull_transform_trans = rlegfootnull_transform.transformation()
                        rlegfootnull_transform_worldmatrix = rlegfootnull_transform_trans.asMatrix()

                        rlegfootnull_transform_localmatrix = rlegfootnull_transform_worldmatrix * rootctrl_transform_worldmatrix * ruplegnull_transform_localmatrix.inverse() * rlegnull_transform_localmatrix.inverse()

                        rlegfootnull_transform.setTransformation(om2.MTransformationMatrix(rlegfootnull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rlegfootpositive_comb_cv, "RightLegFoot_shape")
                        self.MDG2_mod.renameNode(ctrl_riklegfootpositive_comb_cv, "RightIkLegFoot_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 0 1 "Biped_IkRightFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_IkRightFoot_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightFoot_ctrl.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_FkRightFoot_ctrl.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "Biped_IkRightFoot_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFoot_ctrl.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_IkRightFootOffset_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_NoFlipRightKnee_null.visibility" 0')
                        self.MDG2_mod.commandToExecute('select -hierarchy "Biped_NoFlipRightKnee_null"; hide -clearSelection;')
                        self.MDG2_mod.doIt()

                        riklegfootctrl_path_n = om2.MDagPath()
                        riklegfootctrl_path = riklegfootctrl_path_n.getAPathTo(self.riklegfootctrl_tn)
                        riklegfootctrl_worldtransform = om2.MFnTransform(riklegfootctrl_path)

                        riklegfootctrl_worldtransform.setRotatePivot(om2.MPoint(jnt_rleg_t), om2.MSpace.kWorld, False)

                        if cmds.objExists("NoFlipRightLeg_Ik") or self.autostretch.currentIndex() == 1:

                            self.rfootoption_tn = self.MDag2_node.create("transform", "Biped_RightFootOptions_ctrl", rleg_sl_ls.getDependNode(2))
                            ctrl_rfootoption_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_lhandoption_line, 1, 1, False, True, True, self.rfootoption_tn)

                            riklegfootnull_transform = om2.MFnTransform(self.riklegfootnull_tn)
                            riklegfootnull_transform.setTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                            rfootoptionctrl_transform = om2.MFnTransform(self.rfootoption_tn)
                            rfootoptionctrl_transform.setRotatePivotTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                            rfootoptionctrl_transform_t = rfootoptionctrl_transform.translation(om2.MSpace.kTransform)
                            rfootoptionctrl_transform_t[0] = jnt_rleg_t[0] - 7
                            rfootoptionctrl_transform.setTranslation(rfootoptionctrl_transform_t, om2.MSpace.kTransform)

                            rfootoptionctrl_transform_r = rfootoptionctrl_transform.rotation(om2.MSpace.kTransform)
                            rfootoptionctrl_transform_r[0] = -1.57079
                            rfootoptionctrl_transform.setRotation(rfootoptionctrl_transform_r, om2.MSpace.kTransform)

                            rfootoptionctrl_transform_s = rfootoptionctrl_transform.findPlug("scale", False)
                            if rfootoptionctrl_transform_s.isCompound:
                                for i in range(rfootoptionctrl_transform_s.numChildren()):
                                    child_plug = rfootoptionctrl_transform_s.child(i)
                                    attr_value = child_plug.setDouble(box_transform_s[0]/12)

                            rfootoptionctrl_transform_trans = rfootoptionctrl_transform.transformation()
                            rfootoptionctrl_transform_worldmatrix = rfootoptionctrl_transform_trans.asMatrix()

                            rfootoptionctrl_transform_localmatrix = rfootoptionctrl_transform_worldmatrix * rootctrl_transform_worldmatrix * ruplegnull_transform_localmatrix.inverse() * rlegnull_transform_localmatrix.inverse() * rlegfootnull_transform_localmatrix.inverse()

                            rfootoptionctrl_transform.setTransformation(om2.MTransformationMatrix(rfootoptionctrl_transform_localmatrix))

                            self.MDG2_mod.renameNode(ctrl_rfootoption_cv, "RightFootOptions_shape")
                            self.MDG2_mod.commandToExecute('color -rgbColor 1 1 0 "Biped_RightFootOptions_ctrl"')
                            self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_RightFootOptions_ctrl"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.translateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.translateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.translateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.rotateX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.rotateY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.rotateZ"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.scaleX"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.scaleY"')
                            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_RightFootOptions_ctrl.scaleZ"')
                            self.MDG2_mod.doIt()

                    elif index == 3:
                        self.rlegtoebasenull_tn = self.MDag2_node.create("transform", "Biped_FkRightToeBase_null", self.rlegfootctrl_tn)
                        self.rlegtoebasectrl_tn = self.MDag2_node.create("transform", "Biped_FkRightToeBase_ctrl", self.rlegtoebasenull_tn)
                        ctrl_rlegtoepositive_comb_cv = self.MNurbs2_cv.create([crv_ctrl_neck_line_up, crv_ctrl_neck_star, crv_ctrl_neck_line_down], self.rlegtoebasectrl_tn)

                        rlegtoebasenull_transform = om2.MFnTransform(self.rlegtoebasenull_tn)
                        rlegtoebasenull_transform.setRotatePivotTranslation(jnt_rleg_t, om2.MSpace.kTransform)

                        jnt_rlegtoebase_r = cmds.xform("RightToeBase", query=True, rotation=True, worldSpace=True)

                        radian_rlegtoebasenull_x = (jnt_rlegtoebase_r[0]/180)*3.1415
                        radian_rlegtoebasenull_y = (jnt_rlegtoebase_r[1]/180)*3.1415
                        radian_rlegtoebasenull_z = (jnt_rlegtoebase_r[2]/180)*3.1415

                        rlegtoebasenull_transform_r = rlegtoebasenull_transform.rotation(om2.MSpace.kTransform)
                        rlegtoebasenull_transform_r[0], rlegtoebasenull_transform_r[1], rlegtoebasenull_transform_r[2] = radian_rlegtoebasenull_x, radian_rlegtoebasenull_y, radian_rlegtoebasenull_z
                        rlegtoebasenull_transform.setRotation(rlegtoebasenull_transform_r, om2.MSpace.kTransform)

                        rlegtoebasectrl_transform = om2.MFnTransform(self.rlegtoebasectrl_tn)

                        rlegtoebasectrl_transform_r = rlegtoebasectrl_transform.rotation(om2.MSpace.kTransform)
                        rlegtoebasectrl_transform_r[1] = -1.57079
                        rlegtoebasectrl_transform.setRotation(rlegtoebasectrl_transform_r, om2.MSpace.kTransform)

                        rlegtoebasectrl_transform_s = rlegtoebasectrl_transform.findPlug("scale", False)
                        if rlegtoebasectrl_transform_s.isCompound:
                            for i in range(rlegtoebasectrl_transform_s.numChildren()):
                                child_plug = rlegtoebasectrl_transform_s.child(i)
                                attr_value = child_plug.setDouble(box_transform_s[0]/4)

                        rlegtoebasenull_transform_trans = rlegtoebasenull_transform.transformation()
                        rlegtoebasenull_transform_worldmatrix = rlegtoebasenull_transform_trans.asMatrix()

                        rlegtoebasenull_transform_localmatrix = rlegtoebasenull_transform_worldmatrix * rootctrl_transform_worldmatrix * ruplegnull_transform_localmatrix.inverse() * rlegnull_transform_localmatrix.inverse() * rlegfootnull_transform_localmatrix.inverse()

                        rlegtoebasenull_transform.setTransformation(om2.MTransformationMatrix(rlegtoebasenull_transform_localmatrix))

                        self.MDG2_mod.renameNode(ctrl_rlegtoepositive_comb_cv, "FkRightLegToeBase_shape")
                        self.MDG2_mod.commandToExecute('color -rgbColor 0 1 1 "Biped_FkRightToeBase_ctrl"')
                        self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_FkRightToeBase_ctrl"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.translateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.translateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.translateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.rotateX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.rotateY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.rotateZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.scaleZ"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_null.visibility"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_ctrl.scaleX"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_ctrl.scaleY"')
                        self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_FkRightToeBase_ctrl.scaleZ"')
                        self.MDG2_mod.doIt()

            obj_root = om1.MObject()
            obj_endspine = om1.MObject()
            obj_masterctrl1 = om1.MObject()
            obj_stretchyspine = om1.MObject()

            masterctrl_sl_lst2 = om2.MSelectionList()
            masterctrl_sl_lst2.add("Biped_Master_ctrl")
            obj_masterctrl2 = masterctrl_sl_lst2.getDependNode(0)

            if self.autostretch.currentIndex() == 1:

                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_StretchySpine_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_StretchySpine_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1 = om1.MSelectionList()
                stretchy_sl_lst1.add("Biped_StretchySpine_ctrl")
                stretchy_sl_lst1.getDependNode(0, obj_stretchyspine)

                if cmds.objExists("IkHip") and cmds.objExists("IkCvHip") and cmds.objExists("IkCvSpine"):
                    ikspineiksolver_lst = om1.MSelectionList()
                    ikspinedag_n = om1.MFnDagNode()
                    ikspinedg_modifier = om1.MDGModifier()

                    ikspine_sl_lst = om1.MSelectionList()
                    ikspine_sl_lst.add("IkHip")
                    ikspine_sl_lst.add("IkSpin*")
                    ikspine_sl_lst.getDependNode(0, obj_root)
                    ikspine_sl_lst.getDependNode(ikspine_sl_lst.length()-1, obj_endspine)

                    masterctrl_sl_lst1 = om1.MSelectionList()
                    masterctrl_sl_lst1.add("Biped_Master_ctrl")
                    masterctrl_sl_lst1.getDependNode(0, obj_masterctrl1)

                    spine_pathnode = om1.MDagPath()
                    rootspine_path = spine_pathnode.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.ikspline_effector = self.IK_Effector.create(obj_endspine)
                    ikspine_effector_path = spine_pathnode.getAPathTo(self.ikspline_effector)

                    self.spine_ik = self.IK_Handle.create(rootspine_path, ikspine_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(ikspine_sl_lst.length()):
                        ikspine_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "BackBone_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("BackBone_SplineCv", "DoNotTouch")

                    spinecrv_info = ikspinedg_modifier.createNode("curveInfo")
                    spinestretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    spinestretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    spinestretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    spinescalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    spinecrvinfo_fs = om1.MFnDependencyNode(spinecrv_info)
                    spinestretchpercent_fs = om1.MFnDependencyNode(spinestretchpercent)
                    spinestretchpow_fs = om1.MFnDependencyNode(spinestretchpow)
                    spinestretchdiv_fs = om1.MFnDependencyNode(spinestretchdiv)
                    spinescalediv_fs = om1.MFnDependencyNode(spinescalediv)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    masterctrl_fs = om1.MFnDependencyNode(obj_masterctrl1)
                    backbonestretchctrl_fs = om1.MFnDependencyNode(obj_stretchyspine)

                    spinecrvinfoarc_plug = spinecrvinfo_fs.findPlug("arcLength")
                    spinestretchpercentinp1y_plug = spinestretchpercent_fs.findPlug("input1Y")
                    spinestretchpercentotp_plug = spinestretchpercent_fs.findPlug("outputY")
                    spinestretchpowinp1x_plug = spinestretchpow_fs.findPlug("input1X")
                    spinestretchpowinp1z_plug = spinestretchpow_fs.findPlug("input1Z")
                    spinestretchpowotpx_plug = spinestretchpow_fs.findPlug("outputX")
                    spinestretchpowotpz_plug = spinestretchpow_fs.findPlug("outputZ")
                    spinestretchdivinp2x_plug = spinestretchdiv_fs.findPlug("input2X")
                    spinestretchdivinp2z_plug = spinestretchdiv_fs.findPlug("input2Z")
                    spinestretchdivotox_plug = spinestretchdiv_fs.findPlug("outputX")
                    spinestretchdivotpz_plug = spinestretchdiv_fs.findPlug("outputZ")
                    spinescaledivinp1y_plug = spinescalediv_fs.findPlug("input1Y")
                    spinescaledivinp2y_plug = spinescalediv_fs.findPlug("input2Y")
                    spinescaledivotpy_plug = spinescalediv_fs.findPlug("outputY")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    masterctrlsy_plug = masterctrl_fs.findPlug("scaleY")
                    backbonestretchctrl_plug = backbonestretchctrl_fs.findPlug("stretchable")
                    backbonesquashctrl_plug = backbonestretchctrl_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikspine_sl_lst.length()):
                        if index < ikspine_sl_lst.length()-1:
                            ikspine_sl_lst.getDependNode(index, objparent)
                            ikspine_sl_lst.getDependNode(index+1, objchild)
                            spineparentjnt_fs = om1.MFnDependencyNode(objparent)
                            spinechildjnt_fs = om1.MFnDependencyNode(objchild)
                            spinejnt_syplug = spineparentjnt_fs.findPlug("scaleY")
                            spinejnt_sxplug = spineparentjnt_fs.findPlug("scaleX")
                            spinejnt_szplug = spineparentjnt_fs.findPlug("scaleZ")
                            spinejnt_sotpplug = spineparentjnt_fs.findPlug("scale")
                            spinejnt_invsplug = spinechildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(spinestretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(spinestretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(spinestretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, spinejnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, spinejnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, spinejnt_szplug)
                            ikspinedg_modifier.connect(spinejnt_sotpplug, spinejnt_invsplug)

                    ikspinedg_modifier.renameNode(spinecrv_info, "BackBoneSpline_Info")
                    ikspinedg_modifier.renameNode(spinestretchpercent, "BackBoneStretch_Percent")
                    ikspinedg_modifier.renameNode(spinestretchpow, "BackBoneStretch_Power")
                    ikspinedg_modifier.renameNode(spinestretchdiv, "BackBoneStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "BackBone_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.spine_ik, "BackBone_Ik")
                    ikspinedg_modifier.renameNode(self.ikspline_effector, "BackBone_effector")
                    ikspinedg_modifier.renameNode(spinescalediv, "IkSpineGlobalScale_Average")
                    ikspinedg_modifier.renameNode(blendstretch, "BackBoneStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "BackBoneSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "BackBone_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -f BackBone_SplineCvShape.worldSpace[0] BackBone_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "SpineIk_skin" IkCvHip IkCvSpine BackBone_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBone_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvHip.worldMatrix[0] BackBone_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSpine.worldMatrix[0] BackBone_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -f BackBone_SplineCvShape.worldSpace[0] BackBoneSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(spinecrvinfoarc_plug, spinescaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, spinescaledivinp2y_plug)
                    ikspinedg_modifier.connect(spinescaledivotpy_plug, spinestretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(spinestretchpercentotp_plug, spinestretchpowinp1x_plug)
                    ikspinedg_modifier.connect(spinestretchpercentotp_plug, spinestretchpowinp1z_plug)
                    ikspinedg_modifier.connect(spinestretchpowotpx_plug, spinestretchdivinp2x_plug)
                    ikspinedg_modifier.connect(spinestretchpowotpz_plug, spinestretchdivinp2z_plug)
                    ikspinedg_modifier.connect(backbonestretchctrl_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(backbonesquashctrl_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $backbonestretchinput1Y = `getAttr "BackBoneStretch_Percent.input1Y"`; setAttr "BackBoneStretch_Percent.input2Y" $backbonestretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkSpineGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "BackBoneSquash_Blend.color2B" 1')

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

            iksplinegrp_sl_ls = om2.MSelectionList()
            iksplinegrp_sl_ls.add("SplineIk_grp")

            masterscale_multMatrix = self.MDG2_mod.createNode("multMatrix")
            masterscale_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(masterscale_multMatrix, "MasterScale_multMatrix")
            self.MDG2_mod.renameNode(masterscale_decomposeMatrix, "MasterScale_decomposeMatrix")

            masterscalemultMatrix_fs = om2.MFnDependencyNode(masterscale_multMatrix)
            masterscaledecomposeMatrix_fs = om2.MFnDependencyNode(masterscale_decomposeMatrix)
            splineik_fs = om2.MFnDependencyNode(iksplinegrp_sl_ls.getDependNode(0))

            mastermultMatrixSum_plug = masterscalemultMatrix_fs.findPlug("matrixSum", False)
            masterdecomposeInpMatrix_plug = masterscaledecomposeMatrix_fs.findPlug("inputMatrix", False)
            masterdecomposeOtpScale_plug = masterscaledecomposeMatrix_fs.findPlug("outputScale", False)
            splineikScale_plug = splineik_fs.findPlug("scale", False)

            self.MDG2_mod.commandToExecute('connectAttr - force Biped_Master_ctrl.worldMatrix[0] MasterScale_multMatrix.matrixIn[0]')
            self.MDG2_mod.connect(mastermultMatrixSum_plug, masterdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(masterdecomposeOtpScale_plug, splineikScale_plug)

            rootctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
            rootctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(rootctrl_multMatrix, "Root_multMatrix")
            self.MDG2_mod.renameNode(rootctrl_decomposeMatrix, "Root_decomposeMatrix")

            rootmultMatrix_fs = om2.MFnDependencyNode(rootctrl_multMatrix)
            rootdecomposeMatrix_fs = om2.MFnDependencyNode(rootctrl_decomposeMatrix)
            rootjnt_fs = om2.MFnDependencyNode(root_obj)

            mastermultMatrixSum_plug = rootmultMatrix_fs.findPlug("matrixSum", False)
            masterdecomposeInpMatrix_plug = rootdecomposeMatrix_fs.findPlug("inputMatrix", False)
            rootdecomposeOtpTrans_plug = rootdecomposeMatrix_fs.findPlug("outputTranslate", False)
            rootdecomposeOtpRot_plug = rootdecomposeMatrix_fs.findPlug("outputRotate", False)
            rootjntTrans_plug = rootjnt_fs.findPlug("translate", False)
            rootjntRot_plug = rootjnt_fs.findPlug("rotate", False)

            self.MDG2_mod.commandToExecute('connectAttr - force Biped_Root_ctrl.worldMatrix[0] Root_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Root.parentInverseMatrix[0] Root_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(mastermultMatrixSum_plug, masterdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(rootdecomposeOtpTrans_plug, rootjntTrans_plug)
            self.MDG2_mod.connect(rootdecomposeOtpRot_plug, rootjntRot_plug)

            if self.autostretch.currentIndex() == 1:
                if cmds.objExists("IkHip") and cmds.objExists("IkCvHip") and cmds.objExists("IkCvSpine"):
                    ikcvspinespline_sl_lst = om2.MSelectionList()
                    ikcvspinespline_sl_lst.add("IkCvHip")
                    ikcvspinespline_sl_lst.add("IkCvSpine")
                    ikhipjnt_fs = om2.MFnDependencyNode(ikcvspinespline_sl_lst.getDependNode(0))
                    ikhiprotjntTrans_plug = ikhipjnt_fs.findPlug("translate", False)
                    ikhiprotjntRot_plug = ikhipjnt_fs.findPlug("rotate", False)

                    if self.hipjnt.currentIndex() == 1:
                        hipctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                        hipctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        self.MDG2_mod.renameNode(hipctrl_multMatrix, "Hiprot_multMatrix")
                        self.MDG2_mod.renameNode(hipctrl_decomposeMatrix, "Hiprot_decomposeMatrix")

                        hipmultMatrix_fs = om2.MFnDependencyNode(hipctrl_multMatrix)
                        hipdecomposeMatrix_fs = om2.MFnDependencyNode(hipctrl_decomposeMatrix)
                        hipjnt_fs = om2.MFnDependencyNode(jnt_hip)

                        hipmultMatrixSum_plug = hipmultMatrix_fs.findPlug("matrixSum", False)
                        hipdecomposeInpMatrix_plug = hipdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        hipdecomposeOtpTrans_plug = hipdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        hipdecomposeOtpRot_plug = hipdecomposeMatrix_fs.findPlug("outputRotate", False)
                        hiprotjntRot_plug = hipjnt_fs.findPlug("rotate", False)

                        self.MDG2_mod.commandToExecute('connectAttr - force Biped_Hip_ctrl.worldMatrix[0] Hiprot_multMatrix.matrixIn[0]')
                        self.MDG2_mod.commandToExecute('connectAttr -force IkCvHip.parentInverseMatrix[0] Hiprot_multMatrix.matrixIn[1]')
                        self.MDG2_mod.connect(hipmultMatrixSum_plug, hipdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(hipdecomposeOtpTrans_plug, ikhiprotjntTrans_plug)
                        self.MDG2_mod.connect(hipdecomposeOtpRot_plug, ikhiprotjntRot_plug)
                        self.MDG2_mod.connect(ikhiprotjntRot_plug, hiprotjntRot_plug)
                    else:
                        self.MDG2_mod.connect(rootdecomposeOtpTrans_plug, ikhiprotjntTrans_plug)
                        self.MDG2_mod.connect(rootdecomposeOtpRot_plug, ikhiprotjntRot_plug)

            elif cmds.objExists("IkCvHip"):
                self.MDG2_mod.commandToExecute('delete "IkCvHip"')
                self.MDG2_mod.commandToExecute('delete "IkHip"')

                if self.hipjnt.currentIndex() == 1:
                    hipjnt_fs = om2.MFnDependencyNode(jnt_hip)
                    hipctrlRot_fs = om2.MFnDependencyNode(self.hipctrl_tn)

                    hiprotjntRot_plug = hipjnt_fs.findPlug("rotate", False)
                    hipctrlRot_plug = hipctrlRot_fs.findPlug("rotate", False)

                    self.MDG2_mod.connect(hipctrlRot_plug, hiprotjntRot_plug)

            for index in range(spine_sl_lst.length()):
                spinectrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                spinectrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                self.MDG2_mod.renameNode(spinectrl_multMatrix, "Spine{0}_multMatrix".format(index))
                self.MDG2_mod.renameNode(spinectrl_decomposeMatrix, "Spine{0}_decomposeMatrix".format(index))

                spinemultMatrix_fs = om2.MFnDependencyNode(spinectrl_multMatrix)
                spinedecomposeMatrix_fs = om2.MFnDependencyNode(spinectrl_decomposeMatrix)
                spinejnt_fs = om2.MFnDependencyNode(spine_sl_lst.getDependNode(index))

                spinemultMatrixSum_plug = spinemultMatrix_fs.findPlug("matrixSum", False)
                spinedecomposeInpMatrix_plug = spinedecomposeMatrix_fs.findPlug("inputMatrix", False)
                spinedecomposeOtpTrans_plug = spinedecomposeMatrix_fs.findPlug("outputTranslate", False)
                spinedecomposeOtpRot_plug = spinedecomposeMatrix_fs.findPlug("outputRotate", False)
                spinejntTrans_plug = spinejnt_fs.findPlug("translate", False)
                spinejntRot_plug = spinejnt_fs.findPlug("rotate", False)

                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Spine{0}_ctrl.worldMatrix[0] Spine{0}_multMatrix.matrixIn[0]'.format(index))
                self.MDG2_mod.commandToExecute('connectAttr -force Spine{0}.parentInverseMatrix[0] Spine{0}_multMatrix.matrixIn[1]'.format(index))
                self.MDG2_mod.connect(spinemultMatrixSum_plug, spinedecomposeInpMatrix_plug)
                self.MDG2_mod.connect(spinedecomposeOtpTrans_plug, spinejntTrans_plug)
                self.MDG2_mod.connect(spinedecomposeOtpRot_plug, spinejntRot_plug)

                if index == 0:
                    spinejntScale_plug = spinejnt_fs.findPlug("scale", False)
                    self.MDG2_mod.connect(masterdecomposeOtpScale_plug, spinejntScale_plug)

                jnt_string = spine_sl_lst.getSelectionStrings(index)
                if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                    self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

            if self.autostretch.currentIndex() == 1:
                if cmds.objExists("IkHip") and cmds.objExists("IkCvHip") and cmds.objExists("IkCvSpine"):

                    if cmds.getAttr("IkCvSpine.jointOrientX") != 0 or cmds.getAttr("IkCvSpine.jointOrientX") != 0 or cmds.getAttr("IkCvSpine.jointOrientX") != 0:
                        self.MDG2_mod.commandToExecute('setAttr "IkCvSpine.jointOrientX" 0')
                        self.MDG2_mod.commandToExecute('setAttr "IkCvSpine.jointOrientY" 0')
                        self.MDG2_mod.commandToExecute('setAttr "IkCvSpine.jointOrientZ" 0')

                    ikspinectrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    ikspinectrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(ikspinectrl_multMatrix, "IkSpine_multMatrix")
                    self.MDG2_mod.renameNode(ikspinectrl_decomposeMatrix, "IkSpine_decomposeMatrix")

                    spinesplinemultMatrix_fs = om2.MFnDependencyNode(ikspinectrl_multMatrix)
                    spinesplinedecomposeMatrix_fs = om2.MFnDependencyNode(ikspinectrl_decomposeMatrix)
                    spinesplinejnt_fs = om2.MFnDependencyNode(ikcvspinespline_sl_lst.getDependNode(1))

                    spinesplinemultMatrixSum_plug = spinesplinemultMatrix_fs.findPlug("matrixSum", False)
                    spinesplinedecomposeInpMatrix_plug = spinesplinedecomposeMatrix_fs.findPlug("inputMatrix", False)
                    spinesplinedecomposeOtpTrans_plug = spinesplinedecomposeMatrix_fs.findPlug("outputTranslate", False)
                    spinesplinedecomposeOtpRot_plug = spinesplinedecomposeMatrix_fs.findPlug("outputRotate", False)
                    spinesplinejntTrans_plug = spinesplinejnt_fs.findPlug("translate", False)
                    spinesplinejntRot_plug = spinesplinejnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_StretchySpine_ctrl.worldMatrix[0] IkSpine_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('connectAttr -force IkCvSpine.parentInverseMatrix[0] IkSpine_multMatrix.matrixIn[1]')
                    self.MDG2_mod.connect(spinesplinemultMatrixSum_plug, spinesplinedecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(spinesplinedecomposeOtpTrans_plug, spinesplinejntTrans_plug)
                    self.MDG2_mod.connect(spinesplinedecomposeOtpRot_plug, spinesplinejntRot_plug)

            elif cmds.objExists("IkCvSpine"):
                self.MDG2_mod.commandToExecute('delete "IkCvSpine"')
                self.MDG2_mod.commandToExecute('delete "Biped_StretchySpine_ctrl"')

            obj_stretchyneck = om1.MObject()

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_StretchyNeck_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_StretchyNeck_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1.add("Biped_StretchyNeck_ctrl")
                stretchy_sl_lst1.getDependNode(1, obj_stretchyneck)

                if cmds.objExists("IkNeck*") and cmds.objExists("IkCvNeck") and cmds.objExists("IkCvHead"):
                    ikneckspline_sl_lst = om1.MSelectionList()
                    ikneckspline_sl_lst.add("IkNeck*")
                    ikneckspline_sl_lst.getDependNode(0, obj_root)
                    ikneckspline_sl_lst.getDependNode(ikneckspline_sl_lst.length()-1, obj_endspine)

                    neck_pathnode = om1.MDagPath()
                    neck_path = neck_pathnode.getAPathTo(obj_root)

                    self.ikneckspline_effector = self.IK_Effector.create(obj_endspine)
                    ikneckspine_effector_path = neck_pathnode.getAPathTo(self.ikneckspline_effector)

                    self.neckspine_ik = self.IK_Handle.create(neck_path, ikneckspine_effector_path)

                    neckobj_array = om1.MPointArray()
                    neckobj_lst_mpoint = []
                    neckobj = om1.MObject()
                    for index in range(ikneckspline_sl_lst.length()):
                        ikneckspline_sl_lst.getDependNode(index, neckobj)
                        obj_path = self.MDag_path.getAPathTo(neckobj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        neckobj_lst_mpoint.append(om1.MPoint(obj_t))
                        neckobj_array.append(neckobj_lst_mpoint[index])

                    self.ikneckspline_cv_tn = ikspinedag_n.create("transform", "Neck_SplineCv")
                    ikneckspline_cv = self.MNurbs1_cv.createWithEditPoints(neckobj_array, 1, 1, False, True, True, self.ikneckspline_cv_tn)
                    cmds.parent("Neck_SplineCv", "DoNotTouch")

                    neckcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    neckstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    neckstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    neckstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    neckscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    neckcrvinfo_fs = om1.MFnDependencyNode(neckcrv_info)
                    neckstretchpercent_fs = om1.MFnDependencyNode(neckstretchpercent)
                    neckstretchpow_fs = om1.MFnDependencyNode(neckstretchpow)
                    neckstretchdiv_fs = om1.MFnDependencyNode(neckstretchdiv)
                    neckscale_fs = om1.MFnDependencyNode(neckscalediv)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    neckstretchctrl_fs = om1.MFnDependencyNode(obj_stretchyneck)

                    neckcrvinfoarc_plug = neckcrvinfo_fs.findPlug("arcLength")
                    neckstretchpercentinp_plug = neckstretchpercent_fs.findPlug("input1Y")
                    neckstretchpercentotp_plug = neckstretchpercent_fs.findPlug("outputY")
                    neckstretchpowinpx_plug = neckstretchpow_fs.findPlug("input1X")
                    neckstretchpowinpz_plug = neckstretchpow_fs.findPlug("input1Z")
                    neckstretchpowotpx_plug = neckstretchpow_fs.findPlug("outputX")
                    neckstretchpowotpz_plug = neckstretchpow_fs.findPlug("outputZ")
                    neckstretchdivinpx_plug = neckstretchdiv_fs.findPlug("input2X")
                    neckstretchdivinpz_plug = neckstretchdiv_fs.findPlug("input2Z")
                    neckstretchdivotox_plug = neckstretchdiv_fs.findPlug("outputX")
                    neckstretchdivotpz_plug = neckstretchdiv_fs.findPlug("outputZ")
                    neckscaledivinp1y_plug = neckscale_fs.findPlug("input1Y")
                    neckscaledivinp2y_plug = neckscale_fs.findPlug("input2Y")
                    neckscaledivotpy_plug = neckscale_fs.findPlug("outputY")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    neckstretchctrl_plug = neckstretchctrl_fs.findPlug("stretchable")
                    necksquashctrl_plug = neckstretchctrl_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikneckspline_sl_lst.length()):
                        if index < ikneckspline_sl_lst.length()-1:
                            ikneckspline_sl_lst.getDependNode(index, objparent)
                            ikneckspline_sl_lst.getDependNode(index+1, objchild)
                            neckparentjnt_fs = om1.MFnDependencyNode(objparent)
                            neckchildjnt_fs = om1.MFnDependencyNode(objchild)
                            neckjnt_syplug = neckparentjnt_fs.findPlug("scaleY")
                            neckjnt_sxplug = neckparentjnt_fs.findPlug("scaleX")
                            neckjnt_szplug = neckparentjnt_fs.findPlug("scaleZ")
                            neckjnt_sotpplug = neckparentjnt_fs.findPlug("scale")
                            neckjnt_invsplug = neckchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(neckstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(neckstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(neckstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, neckjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, neckjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, neckjnt_szplug)
                            ikspinedg_modifier.connect(neckjnt_sotpplug, neckjnt_invsplug)

                    ikspinedg_modifier.renameNode(neckcrv_info, "NeckSpline_Info")
                    ikspinedg_modifier.renameNode(neckstretchpercent, "NeckStretch_Percent")
                    ikspinedg_modifier.renameNode(neckstretchpow, "NeckStretch_Power")
                    ikspinedg_modifier.renameNode(neckstretchdiv, "NeckStretch_Divide")
                    ikspinedg_modifier.renameNode(ikneckspline_cv, "Neck_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.neckspine_ik, "Neck_Ik")
                    ikspinedg_modifier.renameNode(self.ikneckspline_effector, "Neck_effector")
                    ikspinedg_modifier.renameNode(neckscalediv, "IkNeckGlobalScale_Average")
                    ikspinedg_modifier.renameNode(blendstretch, "NeckStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "NeckSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "Neck_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -f Neck_SplineCvShape.worldSpace[0] Neck_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "NeckIk_skin" IkCvNeck IkCvHead Neck_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "Neck_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvNeck.worldMatrix[0] Neck_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvHead.worldMatrix[0] Neck_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -f Neck_SplineCvShape.worldSpace[0] NeckSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(neckcrvinfoarc_plug, neckscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, neckscaledivinp2y_plug)
                    ikspinedg_modifier.connect(neckscaledivotpy_plug, neckstretchpercentinp_plug)
                    ikspinedg_modifier.connect(neckstretchpercentotp_plug, neckstretchpowinpx_plug)
                    ikspinedg_modifier.connect(neckstretchpercentotp_plug, neckstretchpowinpz_plug)
                    ikspinedg_modifier.connect(neckstretchpowotpx_plug, neckstretchdivinpx_plug)
                    ikspinedg_modifier.connect(neckstretchpowotpz_plug, neckstretchdivinpz_plug)
                    ikspinedg_modifier.connect(neckstretchctrl_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(necksquashctrl_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $neckstretchinput1Y = `getAttr "NeckStretch_Percent.input1Y"`; setAttr "NeckStretch_Percent.input2Y" $neckstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkNeckGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "NeckSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

            neckctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
            neckctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(neckctrl_multMatrix, "Neck_multMatrix")
            self.MDG2_mod.renameNode(neckctrl_decomposeMatrix, "Neck_decomposeMatrix")

            neckmultMatrix_fs = om2.MFnDependencyNode(neckctrl_multMatrix)
            neckdecomposeMatrix_fs = om2.MFnDependencyNode(neckctrl_decomposeMatrix)
            neckjnt_fs = om2.MFnDependencyNode(jnt_neck_obj)

            neckmultMatrixSum_plug = neckmultMatrix_fs.findPlug("matrixSum", False)
            neckdecomposeInpMatrix_plug = neckdecomposeMatrix_fs.findPlug("inputMatrix", False)
            neckdecomposeOtpTrans_plug = neckdecomposeMatrix_fs.findPlug("outputTranslate", False)
            neckdecomposeOtpRot_plug = neckdecomposeMatrix_fs.findPlug("outputRotate", False)
            neckjntTrans_plug = neckjnt_fs.findPlug("translate", False)
            neckjntRot_plug = neckjnt_fs.findPlug("rotate", False)

            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Neck_ctrl.worldMatrix[0] Neck_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Neck.parentInverseMatrix[0] Neck_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(neckmultMatrixSum_plug, neckdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(neckdecomposeOtpTrans_plug, neckjntTrans_plug)
            self.MDG2_mod.connect(neckdecomposeOtpRot_plug, neckjntRot_plug)

            if self.autostretch.currentIndex() == 1:
                if cmds.objExists("IkNeck*") and cmds.objExists("IkCvNeck") and cmds.objExists("IkCvHead"):
                    ikneckspline_sl_lst = om2.MSelectionList()
                    ikneckspline_sl_lst.add("IkCvNeck")
                    ikneckspline_sl_lst.add("IkCvHead")
                    obj_first = ikneckspline_sl_lst.getDependNode(0)

                    ikcvneck_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    ikcvneck_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(ikcvneck_multMatrix, "IkCvNeck_multMatrix")
                    self.MDG2_mod.renameNode(ikcvneck_decomposeMatrix, "IkCvNeck_decomposeMatrix")

                    ikcvneckmultMatrix_fs = om2.MFnDependencyNode(ikcvneck_multMatrix)
                    ikcvneckdecomposeMatrix_fs = om2.MFnDependencyNode(ikcvneck_decomposeMatrix)
                    ikcvneckjnt_fs = om2.MFnDependencyNode(obj_first)

                    ikcvneckmultMatrixSum_plug = ikcvneckmultMatrix_fs.findPlug("matrixSum", False)
                    ikcvneckdecomposeInpMatrix_plug = ikcvneckdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    ikcvneckdecomposeOtpTrans_plug = ikcvneckdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    ikcvneckdecomposeOtpRot_plug = ikcvneckdecomposeMatrix_fs.findPlug("outputRotate", False)
                    ikcvneckjntTrans_plug = ikcvneckjnt_fs.findPlug("translate", False)
                    ikcvneckjntRot_plug = ikcvneckjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Neck.worldMatrix[0] IkCvNeck_multMatrix.matrixIn[0]')
                    self.MDG2_mod.connect(ikcvneckmultMatrixSum_plug, ikcvneckdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(ikcvneckdecomposeOtpTrans_plug, ikcvneckjntTrans_plug)
                    self.MDG2_mod.connect(ikcvneckdecomposeOtpRot_plug, ikcvneckjntRot_plug)

                    obj_lastspine = ikneckspline_sl_lst.getDependNode(1)

                    ikcvhead_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    ikcvhead_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(ikcvhead_multMatrix, "IkCvHead_multMatrix")
                    self.MDG2_mod.renameNode(ikcvhead_decomposeMatrix, "IkCvHead_decomposeMatrix")

                    ikcvheadmultMatrix_fs = om2.MFnDependencyNode(ikcvhead_multMatrix)
                    ikcvheaddecomposeMatrix_fs = om2.MFnDependencyNode(ikcvhead_decomposeMatrix)
                    ikcvheadjnt_fs = om2.MFnDependencyNode(obj_lastspine)

                    ikcvheadmultMatrixSum_plug = ikcvheadmultMatrix_fs.findPlug("matrixSum", False)
                    ikcvheaddecomposeInpMatrix_plug = ikcvheaddecomposeMatrix_fs.findPlug("inputMatrix", False)
                    ikcvheaddecomposeOtpTrans_plug = ikcvheaddecomposeMatrix_fs.findPlug("outputTranslate", False)
                    ikcvheaddecomposeOtpRot_plug = ikcvheaddecomposeMatrix_fs.findPlug("outputRotate", False)
                    ikcvheadjntTrans_plug = ikcvheadjnt_fs.findPlug("translate", False)
                    ikcvheadjntRot_plug = ikcvheadjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_StretchyNeck_ctrl.worldMatrix[0] IkCvHead_multMatrix.matrixIn[0]')
                    self.MDG2_mod.connect(ikcvheadmultMatrixSum_plug, ikcvheaddecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(ikcvheaddecomposeOtpTrans_plug, ikcvheadjntTrans_plug)
                    self.MDG2_mod.connect(ikcvheaddecomposeOtpRot_plug, ikcvheadjntRot_plug)

            elif cmds.objExists("IkCvNeck") and cmds.objExists("IkCvHead"):
                self.MDG2_mod.commandToExecute('delete "IkCvNeck"')
                self.MDG2_mod.commandToExecute('delete "IkCvHead"')
                self.MDG2_mod.commandToExecute('delete "IkNeck0"')
                self.MDG2_mod.commandToExecute('delete "Biped_StretchyNeck_ctrl"')

            elif cmds.objExists("Biped_StretchyNeck_ctrl"):
                self.MDG2_mod.commandToExecute('delete "Biped_StretchyNeck_ctrl"')

            headctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
            headctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(headctrl_multMatrix, "Head_multMatrix")
            self.MDG2_mod.renameNode(headctrl_decomposeMatrix, "Head_decomposeMatrix")

            headmultMatrix_fs = om2.MFnDependencyNode(headctrl_multMatrix)
            headdecomposeMatrix_fs = om2.MFnDependencyNode(headctrl_decomposeMatrix)
            headjnt_fs = om2.MFnDependencyNode(jnt_head_obj)

            headmultMatrixSum_plug = headmultMatrix_fs.findPlug("matrixSum", False)
            headdecomposeInpMatrix_plug = headdecomposeMatrix_fs.findPlug("inputMatrix", False)
            headdecomposeOtpTrans_plug = headdecomposeMatrix_fs.findPlug("outputTranslate", False)
            headdecomposeOtpRot_plug = headdecomposeMatrix_fs.findPlug("outputRotate", False)
            headjntTrans_plug = headjnt_fs.findPlug("translate", False)
            headjntRot_plug = headjnt_fs.findPlug("rotate", False)

            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Head_ctrl.worldMatrix[0] Head_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Head.parentInverseMatrix[0] Head_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(headmultMatrixSum_plug, headdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(headdecomposeOtpTrans_plug, headjntTrans_plug)
            self.MDG2_mod.connect(headdecomposeOtpRot_plug, headjntRot_plug)

            self.MDG2_mod.commandToExecute('addAttr -longName "world" -niceName "World" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_Head_ctrl')
            if cmds.objExists("loc_facial*"):
                self.MDG2_mod.commandToExecute('addAttr -longName "facialviz" -niceName "Facial Vis" -attributeType bool -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_Head_ctrl')
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Head_ctrl.facialviz Biped_Facial_null.visibility')
            self.MDG2_mod.doIt()

            headrotate_multMatrix = self.MDG2_mod.createNode("multMatrix")
            headrotate_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            headrotblendnode = self.MDG2_mod.createNode("blendColors")
            self.MDG2_mod.renameNode(headrotate_multMatrix, "HeadRotate_multMatrix")
            self.MDG2_mod.renameNode(headrotate_decomposeMatrix, "HeadRotate_decomposeMatrix")
            self.MDG2_mod.renameNode(headrotblendnode, "HeadRotate_blend")

            headrotatemultMatrix_fs = om2.MFnDependencyNode(headrotate_multMatrix)
            headrotatedecomposeMatrix_fs = om2.MFnDependencyNode(headrotate_decomposeMatrix)
            headrotblend_fs = om2.MFnDependencyNode(headrotblendnode)
            headrot_fs = om2.MFnDependencyNode(self.headrot_tn)
            headctrl_fs = om2.MFnDependencyNode(self.headctrl_tn)

            headrotatemultMatrixSum_plug = headrotatemultMatrix_fs.findPlug("matrixSum", False)
            headrotatedecomposeInpMatrix_plug = headrotatedecomposeMatrix_fs.findPlug("inputMatrix", False)
            headrotatedecomposeOtpRot_plug = headrotatedecomposeMatrix_fs.findPlug("outputRotate", False)
            headrotblendnodeblender_plug = headrotblend_fs.findPlug("blender", False)
            headrotblendnodeinp1_plug = headrotblend_fs.findPlug("color1", False)
            headrotblendnodeotp_plug = headrotblend_fs.findPlug("output", False)
            headRot_plug = headrot_fs.findPlug("rotate", False)
            headctrl_plug = headctrl_fs.findPlug("world", False)

            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Head_null.worldInverseMatrix[0] HeadRotate_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_Root_ctrl.worldMatrix[0] HeadRotate_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(headrotatemultMatrixSum_plug, headrotatedecomposeInpMatrix_plug)
            self.MDG2_mod.connect(headrotatedecomposeOtpRot_plug, headrotblendnodeinp1_plug)
            self.MDG2_mod.connect(headrotblendnodeotp_plug, headRot_plug)
            self.MDG2_mod.connect(headctrl_plug, headrotblendnodeblender_plug)
            self.MDG2_mod.commandToExecute('setAttr "HeadRotate_blend.color2R" 0')
            self.MDG2_mod.commandToExecute('setAttr "HeadRotate_blend.color2G" 0')
            self.MDG2_mod.commandToExecute('setAttr "HeadRotate_blend.color2B" 0')

            facialctrl_sl_ls = om2.MSelectionList()

            if cmds.objExists("facialBlendShape"):
                facialblend_sl_ls = om2.MSelectionList()
                facialblend_sl_ls.add("blendshape_*")

            if cmds.objExists("blendshape_*"):
                if cmds.objExists("Biped_EyeBlink_ctrl"):
                    facialctrl_sl_ls.add("Biped_EyeBlink_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        eyeblink_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(eyeblink_str)[3:][:-3] == "Biped_EyeBlink_ctrl":
                            eyeblink_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Eyes_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-3]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_EyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_EyeBlink_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Eyes_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-3]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_EyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            eyeblink_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(eyeblink_multiplier, "Eyes{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            eyeblinkmultiplier_fs = om2.MFnDependencyNode(eyeblink_multiplier)
                            eyeblinkctrl_fs = om2.MFnDependencyNode(eyeblink_obj)

                            eyeblinkplug = eyeblinkctrl_fs.findPlug(str_attr_lowercase, False)
                            eyeblinkmulti_plug = eyeblinkctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            eyeblinkmultiplierinp1y_plug = eyeblinkmultiplier_fs.findPlug("input1Y", False)
                            eyeblinkmultiplierinp2y_plug = eyeblinkmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(eyeblinkplug, eyeblinkmultiplierinp1y_plug)
                            self.MDG2_mod.connect(eyeblinkmulti_plug, eyeblinkmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force Eyes{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "Eyes{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                if cmds.objExists("Biped_LeftEyeBlink_ctrl"):
                    facialctrl_sl_ls.add("Biped_LeftEyeBlink_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        leye_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(leye_str)[3:][:-3] == "Biped_LeftEyeBlink_ctrl":
                            leye_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:18] == "blendshape_Eye_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[18:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftEyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftEyeBlink_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:18] == "blendshape_Eye_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[18:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            leye_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(leye_multiplier, "LeftEye{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            leyemultiplier_fs = om2.MFnDependencyNode(leye_multiplier)
                            leyectrl_fs = om2.MFnDependencyNode(leye_obj)

                            leyeplug = leyectrl_fs.findPlug(str_attr_lowercase, False)
                            leyemulti_plug = leyectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            leyemultiplierinp1y_plug = leyemultiplier_fs.findPlug("input1Y", False)
                            leyemultiplierinp2y_plug = leyemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(leyeplug, leyemultiplierinp1y_plug)
                            self.MDG2_mod.connect(leyemulti_plug, leyemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftEye{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "LeftEye{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                if cmds.objExists("nonmesh_L_Eye") and cmds.objExists("Head") and cmds.objExists("Biped_LeftEye_ctrl") and cmds.objExists("grp_L_Eye"):
                    leyegrp_ls = om2.MSelectionList()
                    leyegrp_ls.add("grp_L_Eye")
                    leyegrp_ls.add("nonmesh_L_Eye")
                    leyegrp_n = om2.MFnDagNode(leyegrp_ls.getDependNode(0))

                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.translateX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.translateY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.translateZ"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.rotateX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.rotateY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.rotateZ"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.scaleX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.scaleY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_L_Eye.scaleZ"')
                    if leyegrp_n.hasChild(leyegrp_ls.getDependNode(1)) == False:
                        self.MDG2_mod.commandToExecute('parent nonmesh_L_Eye grp_L_Eye')
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "nonmesh_L_Eye"')
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "grp_L_Eye"')
                    self.MDG2_mod.commandToExecute('parentConstraint -mo Head grp_L_Eye')
                    self.MDG2_mod.commandToExecute('aimConstraint -mo Biped_LeftEye_ctrl nonmesh_L_Eye')

                if cmds.objExists("Biped_RightEyeBlink_ctrl"):
                    facialctrl_sl_ls.add("Biped_RightEyeBlink_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        reye_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(reye_str)[3:][:-3] == "Biped_RightEyeBlink_ctrl":
                            reye_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:18] == "blendshape_Eye_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[18:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightEyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightEyeBlink_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:18] == "blendshape_Eye_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[18:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyeBlink_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            reye_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(reye_multiplier, "RightEye{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            reyemultiplier_fs = om2.MFnDependencyNode(reye_multiplier)
                            reyectrl_fs = om2.MFnDependencyNode(reye_obj)

                            reyeplug = reyectrl_fs.findPlug(str_attr_lowercase, False)
                            reyemulti_plug = reyectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            reyemultiplierinp1y_plug = reyemultiplier_fs.findPlug("input1Y", False)
                            reyemultiplierinp2y_plug = reyemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(reyeplug, reyemultiplierinp1y_plug)
                            self.MDG2_mod.connect(reyemulti_plug, reyemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightEye{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "RightEye{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                if cmds.objExists("nonmesh_R_Eye") and cmds.objExists("Head") and cmds.objExists("Biped_RightEye_ctrl") and cmds.objExists("grp_R_Eye"):
                    reyegrp_ls = om2.MSelectionList()
                    reyegrp_ls.add("grp_R_Eye")
                    reyegrp_ls.add("nonmesh_R_Eye")
                    reyegrp_n = om2.MFnDagNode(reyegrp_ls.getDependNode(0))

                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.translateX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.translateY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.translateZ"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.rotateX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.rotateY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.rotateZ"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.scaleX"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.scaleY"')
                    self.MDG2_mod.commandToExecute('setAttr -lock false -keyable false -channelBox false "nonmesh_R_Eye.scaleZ"')
                    if reyegrp_n.hasChild(reyegrp_ls.getDependNode(1)) == False:
                        self.MDG2_mod.commandToExecute('parent nonmesh_R_Eye grp_R_Eye')
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "nonmesh_R_Eye"')
                    self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "grp_R_Eye"')
                    self.MDG2_mod.commandToExecute('parentConstraint -mo Head grp_R_Eye')
                    self.MDG2_mod.commandToExecute('aimConstraint -mo Biped_RightEye_ctrl nonmesh_R_Eye')

                if cmds.objExists("Biped_LeftEyebrow_ctrl"):
                    facialctrl_sl_ls.add("Biped_LeftEyebrow_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        lbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(lbrow_str)[3:][:-3] == "Biped_LeftEyebrow_ctrl":
                            lbrow_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Brow_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Rotate_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Drop_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Left_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Raise_L" and not str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and not str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and not str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftEyebrow_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Brow_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Rotate_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Drop_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Left_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Raise_L" and not str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and not str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and not str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            lbrowdrop_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lbrowdrop_multiplier, "LeftEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            lbrowdropmultiplier_fs = om2.MFnDependencyNode(lbrowdrop_multiplier)
                            lbrowdropctrl_fs = om2.MFnDependencyNode(lbrow_obj)

                            lbrowdropplug = lbrowdropctrl_fs.findPlug(str_attr_lowercase, False)
                            lbrowdropmulti_plug = lbrowdropctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            lbrowdropmultiplierinp1y_plug = lbrowdropmultiplier_fs.findPlug("input1Y", False)
                            lbrowdropmultiplierinp2y_plug = lbrowdropmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lbrowdropplug, lbrowdropmultiplierinp1y_plug)
                            self.MDG2_mod.connect(lbrowdropmulti_plug, lbrowdropmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "LeftEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Drop_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "dropmulti" -niceName "Drop Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LeftEyebrow_ctrl')
                        lbrowdrop_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        lbrowdrop_condition = self.MDG2_mod.createNode("condition")
                        self.MDG2_mod.renameNode(lbrowdrop_multiplier, "LeftEyebrowDrop_multiplier")
                        self.MDG2_mod.renameNode(lbrowdrop_condition, "LeftEyebrowDrop_condition")
                        self.MDG2_mod.doIt()

                        lbrowdropcondition_fs = om2.MFnDependencyNode(lbrowdrop_condition)
                        lbrowdropmultiplier_fs = om2.MFnDependencyNode(lbrowdrop_multiplier)
                        lbrowdropctrl_fs = om2.MFnDependencyNode(lbrow_obj)

                        lbrowdroptransy_plug = lbrowdropctrl_fs.findPlug("translateY", False)
                        lbrowdropcondcolortg_plug = lbrowdropcondition_fs.findPlug("colorIfTrueG", False)
                        lbrowdropcondfirstterm_plug = lbrowdropcondition_fs.findPlug("firstTerm", False)
                        lbrowdropcondotp_plug = lbrowdropcondition_fs.findPlug("outColorG", False)
                        lbrowdropmulti_plug = lbrowdropctrl_fs.findPlug("dropmulti", False)
                        lbrowdropmultiplierinp1y_plug = lbrowdropmultiplier_fs.findPlug("input1Y", False)
                        lbrowdropmultiplierinp2y_plug = lbrowdropmultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(lbrowdroptransy_plug, lbrowdropcondcolortg_plug)
                        self.MDG2_mod.connect(lbrowdroptransy_plug, lbrowdropcondfirstterm_plug)
                        self.MDG2_mod.connect(lbrowdropcondotp_plug, lbrowdropmultiplierinp1y_plug)
                        self.MDG2_mod.connect(lbrowdropmulti_plug, lbrowdropmultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftEyebrowDrop_multiplier.outputY facialBlendShape.blendshape_Brow_Drop_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowDrop_multiplier.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowDrop_condition.secondTerm" 0')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowDrop_condition.operation" 4')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowDrop_condition.colorIfFalseG" 0')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Raise_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "raisemulti" -niceName "Raise Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyebrow_ctrl')
                        lbrowraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        lbrowraise_condition = self.MDG2_mod.createNode("condition")
                        self.MDG2_mod.renameNode(lbrowraise_multiplier, "LeftEyebrowRaise_multiplier")
                        self.MDG2_mod.renameNode(lbrowraise_condition, "LeftEyebrowRaise_condition")
                        self.MDG2_mod.doIt()

                        lbrowraisecondition_fs = om2.MFnDependencyNode(lbrowraise_condition)
                        lbrowraisemultiplier_fs = om2.MFnDependencyNode(lbrowraise_multiplier)
                        lbrowraisectrl_fs = om2.MFnDependencyNode(lbrow_obj)

                        lbrowraisetransy_plug = lbrowraisectrl_fs.findPlug("translateY", False)
                        lbrowraisecondcolortg_plug = lbrowraisecondition_fs.findPlug("colorIfTrueG", False)
                        lbrowraisecondfirstterm_plug = lbrowraisecondition_fs.findPlug("firstTerm", False)
                        lbrowraisecondotp_plug = lbrowraisecondition_fs.findPlug("outColorG", False)
                        lbrowraisemulti_plug = lbrowraisectrl_fs.findPlug("raisemulti", False)
                        lbrowraisemultiplierinp1y_plug = lbrowraisemultiplier_fs.findPlug("input1Y", False)
                        lbrowraisemultiplierinp2y_plug = lbrowraisemultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(lbrowraisetransy_plug, lbrowraisecondcolortg_plug)
                        self.MDG2_mod.connect(lbrowraisetransy_plug, lbrowraisecondfirstterm_plug)
                        self.MDG2_mod.connect(lbrowraisecondotp_plug, lbrowraisemultiplierinp1y_plug)
                        self.MDG2_mod.connect(lbrowraisemulti_plug, lbrowraisemultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Raise_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowRaise_multiplier.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowRaise_condition.secondTerm" 0')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowRaise_condition.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowRaise_condition.colorIfFalseG" 0')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Left_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "movesidemulti" -niceName "MoveSide Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyebrow_ctrl')
                        lbrowside_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(lbrowside_multiplier, "LeftEyebrowSide_multiplier")
                        self.MDG2_mod.doIt()

                        lbrowsidemultiplier_fs = om2.MFnDependencyNode(lbrowside_multiplier)
                        lbrowsidectrl_fs = om2.MFnDependencyNode(lbrow_obj)

                        lbrowsidetransx_plug = lbrowsidectrl_fs.findPlug("translateX", False)
                        lbrowsidemulti_plug = lbrowsidectrl_fs.findPlug("movesidemulti", False)
                        lbrowsidemultiplierinp1x_plug = lbrowsidemultiplier_fs.findPlug("input1X", False)
                        lbrowsidemultiplierinp2x_plug = lbrowsidemultiplier_fs.findPlug("input2X", False)

                        self.MDG2_mod.connect(lbrowsidetransx_plug, lbrowsidemultiplierinp1x_plug)
                        self.MDG2_mod.connect(lbrowsidemulti_plug, lbrowsidemultiplierinp2x_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftEyebrowSide_multiplier.outputX facialBlendShape.blendshape_Brow_Left_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LeftEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftEyebrowSide_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                if cmds.objExists("Biped_LeftInnerEyebrow_ctrl"):
                    facialctrl_sl_ls.add("Biped_LeftInnerEyebrow_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        linnerbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(linnerbrow_str)[3:][:-3] == "Biped_LeftInnerEyebrow_ctrl":
                            linnerbrow_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Raise_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Scrunch_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[25:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftInnerEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftInnerEyebrow_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Raise_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Scrunch_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[25:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftInnerEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            linnerbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(linnerbrow_multiplier, "LeftInnerEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            linnerbrowmultiplier_fs = om2.MFnDependencyNode(linnerbrow_multiplier)
                            linnerbrowctrl_fs = om2.MFnDependencyNode(linnerbrow_obj)

                            linnerbrowplug = linnerbrowctrl_fs.findPlug(str_attr_lowercase, False)
                            linnerbrowmulti_plug = linnerbrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            linnerbrowmultiplierinp1y_plug = linnerbrowmultiplier_fs.findPlug("input1Y", False)
                            linnerbrowmultiplierinp2y_plug = linnerbrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(linnerbrowplug, linnerbrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(linnerbrowmulti_plug, linnerbrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftInnerEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "LeftInnerEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Inner_Raise_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftInnerEyebrow_ctrl')
                        linnerbrowraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(linnerbrowraise_multiplier, "LeftInnerEyebrowRaise_multiplier")
                        self.MDG2_mod.doIt()

                        linnerbrowraisemultiplier_fs = om2.MFnDependencyNode(linnerbrowraise_multiplier)
                        linnerbrowctrl_fs = om2.MFnDependencyNode(linnerbrow_obj)

                        linnerbrowraisetransy_plug = linnerbrowctrl_fs.findPlug("translateY", False)
                        linnerbrowraisemulti_plug = linnerbrowctrl_fs.findPlug("raisedropmulti", False)
                        linnerbrowraisemultiplierinp1y_plug = linnerbrowraisemultiplier_fs.findPlug("input1Y", False)
                        linnerbrowraisemultiplierinp2y_plug = linnerbrowraisemultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(linnerbrowraisetransy_plug, linnerbrowraisemultiplierinp1y_plug)
                        self.MDG2_mod.connect(linnerbrowraisemulti_plug, linnerbrowraisemultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftInnerEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Inner_Raise_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftInnerEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftInnerEyebrowRaise_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Inner_Scrunch_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "scrunchmulti" -niceName "Scrunch Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LeftInnerEyebrow_ctrl')
                        linnerbrowscrunch_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(linnerbrowscrunch_multiplier, "LeftInnerEyebrowScrunch_multiplier")
                        self.MDG2_mod.doIt()

                        linnerbrowscrunchmultiplier_fs = om2.MFnDependencyNode(linnerbrowscrunch_multiplier)
                        linnerbrowctrl_fs = om2.MFnDependencyNode(linnerbrow_obj)

                        linnerbrowscrunchtransx_plug = linnerbrowctrl_fs.findPlug("translateX", False)
                        linnerbrowscrunchmulti_plug = linnerbrowctrl_fs.findPlug("scrunchmulti", False)
                        linnerbrowscrunchmultiplierinp1x_plug = linnerbrowscrunchmultiplier_fs.findPlug("input1X", False)
                        linnerbrowscrunchmultiplierinp2x_plug = linnerbrowscrunchmultiplier_fs.findPlug("input2X", False)

                        self.MDG2_mod.connect(linnerbrowscrunchtransx_plug, linnerbrowscrunchmultiplierinp1x_plug)
                        self.MDG2_mod.connect(linnerbrowscrunchmulti_plug, linnerbrowscrunchmultiplierinp2x_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftInnerEyebrowScrunch_multiplier.outputX facialBlendShape.blendshape_Brow_Inner_Scrunch_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LeftInnerEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftInnerEyebrowScrunch_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                if cmds.objExists("Biped_LeftMiddleEyebrow_ctrl"):
                    facialctrl_sl_ls.add("Biped_LeftMiddleEyebrow_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        lmiddlebrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(lmiddlebrow_str)[3:][:-3] == "Biped_LeftMiddleEyebrow_ctrl":
                            lmiddlebrow_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Middle_Raise_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[26:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[26:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftMiddleEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftMiddleEyebrow_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Middle_Raise_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[26:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[26:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftMiddleEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            lmiddlebrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lmiddlebrow_multiplier, "LeftMiddleEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            lmiddlebrowmultiplier_fs = om2.MFnDependencyNode(lmiddlebrow_multiplier)
                            lmiddlebrowctrl_fs = om2.MFnDependencyNode(lmiddlebrow_obj)

                            lmiddlebrowplug = lmiddlebrowctrl_fs.findPlug(str_attr_lowercase, False)
                            lmiddlebrowmulti_plug = lmiddlebrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            lmiddlebrowmultiplierinp1y_plug = lmiddlebrowmultiplier_fs.findPlug("input1Y", False)
                            lmiddlebrowmultiplierinp2y_plug = lmiddlebrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lmiddlebrowplug, lmiddlebrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(lmiddlebrowmulti_plug, lmiddlebrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftMiddleEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Middle_Raise_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftMiddleEyebrow_ctrl')
                        lmiddlebrowraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(lmiddlebrowraise_multiplier, "LeftMiddleEyebrowRaise_multiplier")
                        self.MDG2_mod.doIt()

                        lmiddlebrowraisemultiplier_fs = om2.MFnDependencyNode(lmiddlebrowraise_multiplier)
                        lmiddlebrowctrl_fs = om2.MFnDependencyNode(lmiddlebrow_obj)

                        lmiddlebrowraisetransy_plug = lmiddlebrowctrl_fs.findPlug("translateY", False)
                        lmiddlebrowraisemulti_plug = lmiddlebrowctrl_fs.findPlug("raisedropmulti", False)
                        lmiddlebrowraisemultiplierinp1y_plug = lmiddlebrowraisemultiplier_fs.findPlug("input1Y", False)
                        lmiddlebrowraisemultiplierinp2y_plug = lmiddlebrowraisemultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(lmiddlebrowraisetransy_plug, lmiddlebrowraisemultiplierinp1y_plug)
                        self.MDG2_mod.connect(lmiddlebrowraisemulti_plug, lmiddlebrowraisemultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftMiddleEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Middle_Raise_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftMiddleEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrowRaise_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                if cmds.objExists("Biped_LeftOuterEyebrow_ctrl"):
                    facialctrl_sl_ls.add("Biped_LeftOuterEyebrow_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        louterbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(louterbrow_str)[3:][:-3] == "Biped_LeftOuterEyebrow_ctrl":
                            louterbrow_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Outer_Raise_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[25:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftOuterEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftOuterEyebrow_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Outer_Raise_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[25:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftOuterEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            louterbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(louterbrow_multiplier, "LeftOuterEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            louterbrowmultiplier_fs = om2.MFnDependencyNode(louterbrow_multiplier)
                            louterbrowctrl_fs = om2.MFnDependencyNode(louterbrow_obj)

                            louterbrowplug = louterbrowctrl_fs.findPlug(str_attr_lowercase, False)
                            louterbrowmulti_plug = louterbrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            louterbrowmultiplierinp1y_plug = louterbrowmultiplier_fs.findPlug("input1Y", False)
                            louterbrowmultiplierinp2y_plug = louterbrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(louterbrowplug, louterbrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(louterbrowmulti_plug, louterbrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftOuterEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "LeftOuterEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Outer_Raise_L"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftOuterEyebrow_ctrl')
                        louterbrowraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(louterbrowraise_multiplier, "LeftOuterEyebrowRaise_multiplier")
                        self.MDG2_mod.doIt()

                        louterbrowraisemultiplier_fs = om2.MFnDependencyNode(louterbrowraise_multiplier)
                        louterbrowctrl_fs = om2.MFnDependencyNode(louterbrow_obj)

                        louterbrowraisetransy_plug = louterbrowctrl_fs.findPlug("translateY", False)
                        louterbrowraisemulti_plug = louterbrowctrl_fs.findPlug("raisedropmulti", False)
                        louterbrowraisemultiplierinp1y_plug = louterbrowraisemultiplier_fs.findPlug("input1Y", False)
                        louterbrowraisemultiplierinp2y_plug = louterbrowraisemultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(louterbrowraisetransy_plug, louterbrowraisemultiplierinp1y_plug)
                        self.MDG2_mod.connect(louterbrowraisemulti_plug, louterbrowraisemultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force LeftOuterEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Outer_Raise_L')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftOuterEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "LeftOuterEyebrowRaise_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                if cmds.objExists("Biped_LeftMiddleEyebrowOffset_null"):
                    facialctrl_sl_ls.add("Biped_LeftMiddleEyebrowOffset_null")
                    for index in range(facialctrl_sl_ls.length()):
                        ctrl_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(ctrl_str)[3:][:-3] == "Biped_LeftMiddleEyebrowOffset_null":

                            lmiddlebrowoffset_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            louterinnerbrow_dist = self.MDG2_mod.createNode("plusMinusAverage")
                            self.MDG2_mod.renameNode(lmiddlebrowoffset_multiplier, "LeftMiddleEyebrowOffset_multiplier")
                            self.MDG2_mod.renameNode(louterinnerbrow_dist, "LeftOuterInner_dist")
                            self.MDG2_mod.doIt()

                            lmiddlebrowoffset_fs = om2.MFnDependencyNode(facialctrl_sl_ls.getDependNode(index))
                            lmiddlebrowmultipier_fs = om2.MFnDependencyNode(lmiddlebrowoffset_multiplier)
                            louterinnerbrowdist_fs = om2.MFnDependencyNode(louterinnerbrow_dist)

                            louterinnerbrowdistotp3D_plug = louterinnerbrowdist_fs.findPlug("output3D", False)
                            lmiddlebrowoffsetmultiinp_plug = lmiddlebrowmultipier_fs.findPlug("input1", False)
                            lmiddlebrowoffsetmultiotp_plug = lmiddlebrowmultipier_fs.findPlug("output", False)
                            lmiddlebrowoffsettrans_plug = lmiddlebrowoffset_fs.findPlug("translate", False)

                            self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftInnerEyebrow_ctrl.translate LeftOuterInner_dist.input3D[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftOuterEyebrow_ctrl.translate LeftOuterInner_dist.input3D[1]')
                            self.MDG2_mod.connect(louterinnerbrowdistotp3D_plug, lmiddlebrowoffsetmultiinp_plug)
                            self.MDG2_mod.connect(lmiddlebrowoffsetmultiotp_plug, lmiddlebrowoffsettrans_plug)
                            self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrowOffset_multiplier.operation"2')
                            self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrowOffset_multiplier.input2X" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrowOffset_multiplier.input2Y" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LeftMiddleEyebrowOffset_multiplier.input2Z" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LeftOuterInner_dist.operation" 1')
                            self.MDG2_mod.doIt()

                if cmds.objExists("Biped_RightEyebrow_ctrl"):
                    facialctrl_sl_ls.add("Biped_RightEyebrow_ctrl")

                    for index in range(facialctrl_sl_ls.length()):
                        rbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                        if str(rbrow_str)[3:][:-3] == "Biped_RightEyebrow_ctrl":
                            rbrow_obj = facialctrl_sl_ls.getDependNode(index)

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Brow_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Drop_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Right_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Raise_R" and not str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and not str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and not str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                    self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightEyebrow_ctrl')

                    for index in range(facialblend_sl_ls.length()):
                        blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                        blendshape_obj = facialblend_sl_ls.getDependNode(index)
                        if str(blendshape_str)[3:19] == "blendshape_Brow_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Drop_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Right_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Raise_R" and not str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and not str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and not str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and blendshape_obj.hasFn(om2.MFn.kTransform):
                            str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                            str_attr_upperlowercase = str(blendshape_str)[19:-5]
                            self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                            rbrowdrop_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rbrowdrop_multiplier, "RightEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                            rbrowdropmultiplier_fs = om2.MFnDependencyNode(rbrowdrop_multiplier)
                            rbrowdropctrl_fs = om2.MFnDependencyNode(rbrow_obj)

                            rbrowdropplug = rbrowdropctrl_fs.findPlug(str_attr_lowercase, False)
                            rbrowdropmulti_plug = rbrowdropctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                            rbrowdropmultiplierinp1y_plug = rbrowdropmultiplier_fs.findPlug("input1Y", False)
                            rbrowdropmultiplierinp2y_plug = rbrowdropmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rbrowdropplug, rbrowdropmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rbrowdropmulti_plug, rbrowdropmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                            self.MDG2_mod.commandToExecute('setAttr "RightEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                            self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Drop_R"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "dropmulti" -niceName "Drop Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightEyebrow_ctrl')
                        rbrowdrop_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        rbrowdrop_condition = self.MDG2_mod.createNode("condition")
                        self.MDG2_mod.renameNode(rbrowdrop_multiplier, "RightEyebrowDrop_multiplier")
                        self.MDG2_mod.renameNode(rbrowdrop_condition, "RightEyebrowDrop_condition")
                        self.MDG2_mod.doIt()

                        rbrowdropcondition_fs = om2.MFnDependencyNode(rbrowdrop_condition)
                        rbrowdropmultiplier_fs = om2.MFnDependencyNode(rbrowdrop_multiplier)
                        rbrowdropctrl_fs = om2.MFnDependencyNode(rbrow_obj)

                        rbrowdroptransy_plug = rbrowdropctrl_fs.findPlug("translateY", False)
                        rbrowdropcondcolortg_plug = rbrowdropcondition_fs.findPlug("colorIfTrueG", False)
                        rbrowdropcondfirstterm_plug = rbrowdropcondition_fs.findPlug("firstTerm", False)
                        rbrowdropcondotp_plug = rbrowdropcondition_fs.findPlug("outColorG", False)
                        rbrowdropmulti_plug = rbrowdropctrl_fs.findPlug("dropmulti", False)
                        rbrowdropmultiplierinp1y_plug = rbrowdropmultiplier_fs.findPlug("input1Y", False)
                        rbrowdropmultiplierinp2y_plug = rbrowdropmultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(rbrowdroptransy_plug, rbrowdropcondcolortg_plug)
                        self.MDG2_mod.connect(rbrowdroptransy_plug, rbrowdropcondfirstterm_plug)
                        self.MDG2_mod.connect(rbrowdropcondotp_plug, rbrowdropmultiplierinp1y_plug)
                        self.MDG2_mod.connect(rbrowdropmulti_plug, rbrowdropmultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force RightEyebrowDrop_multiplier.outputY facialBlendShape.blendshape_Brow_Drop_R')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowDrop_multiplier.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowDrop_condition.secondTerm" 0')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowDrop_condition.operation" 4')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowDrop_condition.colorIfFalseG" 0')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Raise_R"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "raisemulti" -niceName "Raise Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyebrow_ctrl')
                        rbrowraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        rbrowraise_condition = self.MDG2_mod.createNode("condition")
                        self.MDG2_mod.renameNode(rbrowraise_multiplier, "RightEyebrowRaise_multiplier")
                        self.MDG2_mod.renameNode(rbrowraise_condition, "RightEyebrowRaise_condition")
                        self.MDG2_mod.doIt()

                        rbrowraisecondition_fs = om2.MFnDependencyNode(rbrowraise_condition)
                        rbrowraisemultiplier_fs = om2.MFnDependencyNode(rbrowraise_multiplier)
                        rbrowraisectrl_fs = om2.MFnDependencyNode(rbrow_obj)

                        rbrowraisetransy_plug = rbrowraisectrl_fs.findPlug("translateY", False)
                        rbrowraisecondcolortg_plug = rbrowraisecondition_fs.findPlug("colorIfTrueG", False)
                        rbrowraisecondfirstterm_plug = rbrowraisecondition_fs.findPlug("firstTerm", False)
                        rbrowraisecondotp_plug = rbrowraisecondition_fs.findPlug("outColorG", False)
                        rbrowraisemulti_plug = rbrowraisectrl_fs.findPlug("raisemulti", False)
                        rbrowraisemultiplierinp1y_plug = rbrowraisemultiplier_fs.findPlug("input1Y", False)
                        rbrowraisemultiplierinp2y_plug = rbrowraisemultiplier_fs.findPlug("input2Y", False)

                        self.MDG2_mod.connect(rbrowraisetransy_plug, rbrowraisecondcolortg_plug)
                        self.MDG2_mod.connect(rbrowraisetransy_plug, rbrowraisecondfirstterm_plug)
                        self.MDG2_mod.connect(rbrowraisecondotp_plug, rbrowraisemultiplierinp1y_plug)
                        self.MDG2_mod.connect(rbrowraisemulti_plug, rbrowraisemultiplierinp2y_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force RightEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Raise_R')
                        self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowRaise_multiplier.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowRaise_condition.secondTerm" 0')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowRaise_condition.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowRaise_condition.colorIfFalseG" 0')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("blendshape_Brow_Right_R"):
                        self.MDG2_mod.commandToExecute('addAttr -longName "movesidemulti" -niceName "MoveSide Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyebrow_ctrl')
                        rbrowside_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(rbrowside_multiplier, "RightEyebrowSide_multiplier")
                        self.MDG2_mod.doIt()

                        rbrowsidemultiplier_fs = om2.MFnDependencyNode(rbrowside_multiplier)
                        rbrowsidectrl_fs = om2.MFnDependencyNode(rbrow_obj)

                        rbrowsidetransx_plug = rbrowsidectrl_fs.findPlug("translateX", False)
                        rbrowsidemulti_plug = rbrowsidectrl_fs.findPlug("movesidemulti", False)
                        rbrowsidemultiplierinp1x_plug = rbrowsidemultiplier_fs.findPlug("input1X", False)
                        rbrowsidemultiplierinp2x_plug = rbrowsidemultiplier_fs.findPlug("input2X", False)

                        self.MDG2_mod.connect(rbrowsidetransx_plug, rbrowsidemultiplierinp1x_plug)
                        self.MDG2_mod.connect(rbrowsidemulti_plug, rbrowsidemultiplierinp2x_plug)
                        self.MDG2_mod.commandToExecute('connectAttr -force RightEyebrowSide_multiplier.outputX facialBlendShape.blendshape_Brow_Right_R')
                        self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_RightEyebrow_ctrl')
                        self.MDG2_mod.commandToExecute('setAttr "RightEyebrowSide_multiplier.operation" 1')
                        self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightInnerEyebrow_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightInnerEyebrow_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rinnerbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rinnerbrow_str)[3:][:-3] == "Biped_RightInnerEyebrow_ctrl":
                                rinnerbrow_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Raise_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Scrunch_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightInnerEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightInnerEyebrow_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Brow_Inner_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Raise_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Inner_Scrunch_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightInnerEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rinnerbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(rinnerbrow_multiplier, "RightInnerEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rinnerbrowmultiplier_fs = om2.MFnDependencyNode(rinnerbrow_multiplier)
                                rinnerbrowctrl_fs = om2.MFnDependencyNode(rinnerbrow_obj)

                                rinnerbrowplug = rinnerbrowctrl_fs.findPlug(str_attr_lowercase, False)
                                rinnerbrowmulti_plug = rinnerbrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rinnerbrowmultiplierinp1y_plug = rinnerbrowmultiplier_fs.findPlug("input1Y", False)
                                rinnerbrowmultiplierinp2y_plug = rinnerbrowmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rinnerbrowplug, rinnerbrowmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rinnerbrowmulti_plug, rinnerbrowmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightInnerEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightInnerEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Brow_Inner_Raise_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "Raise Drop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightInnerEyebrow_ctrl')
                            rinnerbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rinnerbrow_multiplier, "RightInnerEyebrowRaise_multiplier")
                            self.MDG2_mod.doIt()

                            rinnerbrowmultiplier_fs = om2.MFnDependencyNode(rinnerbrow_multiplier)
                            rinnerbrowctrl_fs = om2.MFnDependencyNode(rinnerbrow_obj)

                            rinnerbrowtransy_plug = rinnerbrowctrl_fs.findPlug("translateY", False)
                            rinnerbrowmulti_plug = rinnerbrowctrl_fs.findPlug("raisedropmulti", False)
                            rinnerbrowmultiplierinp1y_plug = rinnerbrowmultiplier_fs.findPlug("input1Y", False)
                            rinnerbrowmultiplierinp2y_plug = rinnerbrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rinnerbrowtransy_plug, rinnerbrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rinnerbrowmulti_plug, rinnerbrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightInnerEyebrowRaise_multiplier.outputY facialBlendShape.blendshape_Brow_Inner_Raise_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightInnerEyebrow_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightInnerEyebrowRaise_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Brow_Inner_Scrunch_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "scrunchmulti" -niceName "Scrunch Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightInnerEyebrow_ctrl')
                            rinnerbrowscrunch_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rinnerbrowscrunch_multiplier, "RightInnerEyebrowScrunch_multiplier")
                            self.MDG2_mod.doIt()

                            rinnerbrowscrunchmultiplier_fs = om2.MFnDependencyNode(rinnerbrowscrunch_multiplier)
                            rinnerbrowctrl_fs = om2.MFnDependencyNode(rinnerbrow_obj)

                            rinnerbrowscrunchtransx_plug = rinnerbrowctrl_fs.findPlug("translateX", False)
                            rinnerbrowscrunchmulti_plug = rinnerbrowctrl_fs.findPlug("scrunchmulti", False)
                            rinnerbrowscrunchmultiplierinp1x_plug = rinnerbrowscrunchmultiplier_fs.findPlug("input1X", False)
                            rinnerbrowscrunchmultiplierinp2x_plug = rinnerbrowscrunchmultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(rinnerbrowscrunchtransx_plug, rinnerbrowscrunchmultiplierinp1x_plug)
                            self.MDG2_mod.connect(rinnerbrowscrunchmulti_plug, rinnerbrowscrunchmultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightInnerEyebrowScrunch_multiplier.outputX facialBlendShape.blendshape_Brow_Inner_Scrunch_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_RightInnerEyebrow_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightInnerEyebrowScrunch_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightMiddleEyebrow_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightMiddleEyebrow_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rmiddlebrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rmiddlebrow_str)[3:][:-3] == "Biped_RightMiddleEyebrow_ctrl":
                                rmiddlebrow_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Middle_Raise_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[26:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[26:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightMiddleEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightMiddleEyebrow_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:26] == "blendshape_Brow_Middle_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Middle_Raise_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[26:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[26:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightMiddleEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rmiddlebrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(rmiddlebrow_multiplier, "RightMiddleEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rmiddlebrowmultiplier_fs = om2.MFnDependencyNode(rmiddlebrow_multiplier)
                                rmiddlebrowctrl_fs = om2.MFnDependencyNode(rmiddlebrow_obj)

                                rmiddlebrowplug = rmiddlebrowctrl_fs.findPlug(str_attr_lowercase, False)
                                rmiddlebrowmulti_plug = rmiddlebrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rmiddlebrowmultiplierinp1y_plug = rmiddlebrowmultiplier_fs.findPlug("input1Y", False)
                                rmiddlebrowmultiplierinp2y_plug = rmiddlebrowmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rmiddlebrowplug, rmiddlebrowmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rmiddlebrowmulti_plug, rmiddlebrowmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightMiddleEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Brow_Middle_Raise_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightMiddleEyebrow_ctrl')
                            rmiddlebrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rmiddlebrow_multiplier, "RightMiddleEyebrow_multiplier")
                            self.MDG2_mod.doIt()

                            rmiddlebrowmultiplier_fs = om2.MFnDependencyNode(rmiddlebrow_multiplier)
                            rmiddlebrowctrl_fs = om2.MFnDependencyNode(rmiddlebrow_obj)

                            rmiddlebrowtransy_plug = rmiddlebrowctrl_fs.findPlug("translateY", False)
                            rmiddlebrowmulti_plug = rmiddlebrowctrl_fs.findPlug("raisedropmulti", False)
                            rmiddlebrowmultiplierinp1y_plug = rmiddlebrowmultiplier_fs.findPlug("input1Y", False)
                            rmiddlebrowmultiplierinp2y_plug = rmiddlebrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rmiddlebrowtransy_plug, rmiddlebrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rmiddlebrowmulti_plug, rmiddlebrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightMiddleEyebrow_multiplier.outputY facialBlendShape.blendshape_Brow_Middle_Raise_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightMiddleEyebrow_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrow_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightOuterEyebrow_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightOuterEyebrow_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            routerbrow_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(routerbrow_str)[3:][:-3] == "Biped_RightOuterEyebrow_ctrl":
                                routerbrow_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Outer_Raise_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightOuterEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightOuterEyebrow_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Brow_Outer_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Brow_Outer_Raise_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightOuterEyebrow_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                routerbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(routerbrow_multiplier, "RightOuterEyebrow{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                routerbrowmultiplier_fs = om2.MFnDependencyNode(routerbrow_multiplier)
                                routerbrowctrl_fs = om2.MFnDependencyNode(routerbrow_obj)

                                routerbrowplug = routerbrowctrl_fs.findPlug(str_attr_lowercase, False)
                                routerbrowmulti_plug = routerbrowctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                routerbrowmultiplierinp1y_plug = routerbrowmultiplier_fs.findPlug("input1Y", False)
                                routerbrowmultiplierinp2y_plug = routerbrowmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(routerbrowplug, routerbrowmultiplierinp1y_plug)
                                self.MDG2_mod.connect(routerbrowmulti_plug, routerbrowmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightOuterEyebrow{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightOuterEyebrow{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Brow_Outer_Raise_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightOuterEyebrow_ctrl')
                            routerbrow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(routerbrow_multiplier, "RightOuterEyebrow_multiplier")
                            self.MDG2_mod.doIt()

                            routerbrowmultiplier_fs = om2.MFnDependencyNode(routerbrow_multiplier)
                            routerbrowctrl_fs = om2.MFnDependencyNode(routerbrow_obj)

                            routerbrowtransy_plug = routerbrowctrl_fs.findPlug("translateY", False)
                            routerbrowmulti_plug = routerbrowctrl_fs.findPlug("raisedropmulti", False)
                            routerbrowmultiplierinp1y_plug = routerbrowmultiplier_fs.findPlug("input1Y", False)
                            routerbrowmultiplierinp2y_plug = routerbrowmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(routerbrowtransy_plug, routerbrowmultiplierinp1y_plug)
                            self.MDG2_mod.connect(routerbrowmulti_plug, routerbrowmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightOuterEyebrow_multiplier.outputY facialBlendShape.blendshape_Brow_Outer_Raise_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightOuterEyebrow_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightOuterEyebrow_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightMiddleEyebrowOffset_null"):
                        facialctrl_sl_ls.add("Biped_RightMiddleEyebrowOffset_null")
                        for index in range(facialctrl_sl_ls.length()):
                            ctrl_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(ctrl_str)[3:][:-3] == "Biped_RightMiddleEyebrowOffset_null":

                                rmiddlebrowoffset_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                routerinnerbrow_dist = self.MDG2_mod.createNode("plusMinusAverage")
                                self.MDG2_mod.renameNode(rmiddlebrowoffset_multiplier, "RightMiddleEyebrowOffset_multiplier")
                                self.MDG2_mod.renameNode(routerinnerbrow_dist, "RightOuterInner_dist")
                                self.MDG2_mod.doIt()

                                rmiddlebrowoffset_fs = om2.MFnDependencyNode(facialctrl_sl_ls.getDependNode(index))
                                rmiddlebrowmultipier_fs = om2.MFnDependencyNode(rmiddlebrowoffset_multiplier)
                                routerinnerbrowdist_fs = om2.MFnDependencyNode(routerinnerbrow_dist)

                                routerinnerbrowdistotp3D_plug = routerinnerbrowdist_fs.findPlug("output3D", False)
                                rmiddlebrowoffsetmultiinp_plug = rmiddlebrowmultipier_fs.findPlug("input1", False)
                                rmiddlebrowoffsetmultiotp_plug = rmiddlebrowmultipier_fs.findPlug("output", False)
                                rmiddlebrowoffsettrans_plug = rmiddlebrowoffset_fs.findPlug("translate", False)

                                self.MDG2_mod.commandToExecute('connectAttr -force Biped_RightInnerEyebrow_ctrl.translate RightOuterInner_dist.input3D[0]')
                                self.MDG2_mod.commandToExecute('connectAttr -force Biped_RightOuterEyebrow_ctrl.translate RightOuterInner_dist.input3D[1]')
                                self.MDG2_mod.connect(routerinnerbrowdistotp3D_plug, rmiddlebrowoffsetmultiinp_plug)
                                self.MDG2_mod.connect(rmiddlebrowoffsetmultiotp_plug, rmiddlebrowoffsettrans_plug)
                                self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrowOffset_multiplier.operation" 2')
                                self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrowOffset_multiplier.input2X" 2')
                                self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrowOffset_multiplier.input2Y" 2')
                                self.MDG2_mod.commandToExecute('setAttr "RightMiddleEyebrowOffset_multiplier.input2Z" 2')
                                self.MDG2_mod.commandToExecute('setAttr "RightOuterInner_dist.operation" 1')
                                self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftEyeSquint_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftEyeSquint_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            leyesquint_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(leyesquint_str)[3:][:-3] == "Biped_LeftEyeSquint_ctrl":
                                leyesquint_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Eye_Squint_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftEyeSquint_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftEyeSquint_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Eye_Squint_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyeSquint_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                leyesquint_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(leyesquint_multiplier, "LeftSquint{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                leyesquintmultiplier_fs = om2.MFnDependencyNode(leyesquint_multiplier)
                                leyesquintctrl_fs = om2.MFnDependencyNode(leyesquint_obj)

                                leyesquintplug = leyesquintctrl_fs.findPlug(str_attr_lowercase, False)
                                leyesquintmulti_plug = leyesquintctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                leyesquintmultiplierinp1y_plug = leyesquintmultiplier_fs.findPlug("input1Y", False)
                                leyesquintmultiplierinp2y_plug = leyesquintmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(leyesquintplug, leyesquintmultiplierinp1y_plug)
                                self.MDG2_mod.connect(leyesquintmulti_plug, leyesquintmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LeftSquint{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LeftSquint{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Eye_Squint_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEyeSquint_ctrl')
                            leyesquint_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(leyesquint_multiplier, "LeftEyeSquint_multiplier")
                            self.MDG2_mod.doIt()

                            leyesquintmultiplier_fs = om2.MFnDependencyNode(leyesquint_multiplier)
                            leyesquintctrl_fs = om2.MFnDependencyNode(leyesquint_obj)

                            leyesquinttransy_plug = leyesquintctrl_fs.findPlug("translateY", False)
                            leyesquintmulti_plug = leyesquintctrl_fs.findPlug("raisedropmulti", False)
                            leyesquintmultiplierinp1y_plug = leyesquintmultiplier_fs.findPlug("input1Y", False)
                            leyesquintmultiplierinp2y_plug = leyesquintmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(leyesquinttransy_plug, leyesquintmultiplierinp1y_plug)
                            self.MDG2_mod.connect(leyesquintmulti_plug, leyesquintmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftEyeSquint_multiplier.outputY facialBlendShape.blendshape_Eye_Squint_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftEyeSquint_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftEyeSquint_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightEyeSquint_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightEyeSquint_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            reyesquint_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(reyesquint_str)[3:][:-3] == "Biped_RightEyeSquint_ctrl":
                                reyesquint_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Eye_Squint_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightEyeSquint_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightEyeSquint_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:25] == "blendshape_Eye_Squint_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Eye_Squint_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[25:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[25:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyeSquint_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                reyesquint_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(reyesquint_multiplier, "RightSquint{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                reyesquintmultiplier_fs = om2.MFnDependencyNode(reyesquint_multiplier)
                                reyesquintctrl_fs = om2.MFnDependencyNode(reyesquint_obj)

                                reyesquintplug = reyesquintctrl_fs.findPlug(str_attr_lowercase, False)
                                reyesquintmulti_plug = reyesquintctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                reyesquintmultiplierinp1y_plug = reyesquintmultiplier_fs.findPlug("input1Y", False)
                                reyesquintmultiplierinp2y_plug = reyesquintmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(reyesquintplug, reyesquintmultiplierinp1y_plug)
                                self.MDG2_mod.connect(reyesquintmulti_plug, reyesquintmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightSquint{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightSquint{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Eye_Squint_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedropmulti" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEyeSquint_ctrl')
                            reyesquint_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(reyesquint_multiplier, "RightEyeSquint_multiplier")
                            self.MDG2_mod.doIt()

                            reyesquintmultiplier_fs = om2.MFnDependencyNode(reyesquint_multiplier)
                            reyesquintctrl_fs = om2.MFnDependencyNode(reyesquint_obj)

                            reyesquinttransy_plug = reyesquintctrl_fs.findPlug("translateY", False)
                            reyesquintmulti_plug = reyesquintctrl_fs.findPlug("raisedropmulti", False)
                            reyesquintmultiplierinp1y_plug = reyesquintmultiplier_fs.findPlug("input1Y", False)
                            reyesquintmultiplierinp2y_plug = reyesquintmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(reyesquinttransy_plug, reyesquintmultiplierinp1y_plug)
                            self.MDG2_mod.connect(reyesquintmulti_plug, reyesquintmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightEyeSquint_multiplier.outputY facialBlendShape.blendshape_Eye_Squint_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightEyeSquint_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightEyeSquint_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_NoseScrunch_ctrl"):
                        facialctrl_sl_ls.add("Biped_NoseScrunch_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            nose_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(nose_str)[3:][:-3] == "Biped_NoseScrunch_ctrl":
                                nose_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and not str(blendshape_str)[-5:-3] == "_M" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_NoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_NoseScrunch_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and not str(blendshape_str)[-5:-3] == "_M" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_NoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                nose_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(nose_multiplier, "Nose{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                nosemultiplier_fs = om2.MFnDependencyNode(nose_multiplier)
                                nosectrl_fs = om2.MFnDependencyNode(nose_obj)

                                nose_plug = nosectrl_fs.findPlug(str_attr_lowercase, False)
                                nosemulti_plug = nosectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                nosemultiplierinp1y_plug = nosemultiplier_fs.findPlug("input1Y", False)
                                nosemultiplierinp2y_plug = nosemultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(nose_plug, nosemultiplierinp1y_plug)
                                self.MDG2_mod.connect(nosemulti_plug, nosemultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force Nose{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "Nose{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_Left"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveleftrightmulti" -niceName "MoveLeftRight Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_NoseScrunch_ctrl')
                            nosemove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(nosemove_multiplier, "NoseLeftRight_multiplier")
                            self.MDG2_mod.doIt()

                            nosemovemultiplier_fs = om2.MFnDependencyNode(nosemove_multiplier)
                            nosemovectrl_fs = om2.MFnDependencyNode(nose_obj)

                            nosemovetransx_plug = nosemovectrl_fs.findPlug("translateX", False)
                            nosemovemulti_plug = nosemovectrl_fs.findPlug("moveleftrightmulti", False)
                            nosemovemultiplierinp1x_plug = nosemovemultiplier_fs.findPlug("input1X", False)
                            nosemovemultiplierinp2x_plug = nosemovemultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(nosemovetransx_plug, nosemovemultiplierinp1x_plug)
                            self.MDG2_mod.connect(nosemovemulti_plug, nosemovemultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force NoseLeftRight_multiplier.outputX facialBlendShape.blendshape_Nose_Left')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_NoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "NoseLeftRight_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_Up"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveupdownmulti" -niceName "MoveUpDown Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_NoseScrunch_ctrl')
                            nosemove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(nosemove_multiplier, "NoseUpDown_multiplier")
                            self.MDG2_mod.doIt()

                            nosemovemultiplier_fs = om2.MFnDependencyNode(nosemove_multiplier)
                            nosemovectrl_fs = om2.MFnDependencyNode(nose_obj)

                            nosemovetransy_plug = nosemovectrl_fs.findPlug("translateY", False)
                            nosemovemulti_plug = nosemovectrl_fs.findPlug("moveleftrightmulti", False)
                            nosemovemultiplierinp1y_plug = nosemovemultiplier_fs.findPlug("input1Y", False)
                            nosemovemultiplierinp2y_plug = nosemovemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(nosemovetransy_plug, nosemovemultiplierinp1y_plug)
                            self.MDG2_mod.connect(nosemovemulti_plug, nosemovemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force NoseUpDown_multiplier.outputY facialBlendShape.blendshape_Nose_Up')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_NoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "NoseUpDown_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_Front"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movefrontbackmulti" -niceName "MoveFrontBack Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_NoseScrunch_ctrl')
                            nosemove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(nosemove_multiplier, "NoseFrontBack_multiplier")
                            self.MDG2_mod.doIt()

                            nosemovemultiplier_fs = om2.MFnDependencyNode(nosemove_multiplier)
                            nosemovectrl_fs = om2.MFnDependencyNode(nose_obj)

                            nosemovetransz_plug = nosemovectrl_fs.findPlug("translateZ", False)
                            nosemovemulti_plug = nosemovectrl_fs.findPlug("movefrontbackmulti", False)
                            nosemovemultiplierinp1z_plug = nosemovemultiplier_fs.findPlug("input1Z", False)
                            nosemovemultiplierinp2z_plug = nosemovemultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(nosemovetransz_plug, nosemovemultiplierinp1z_plug)
                            self.MDG2_mod.connect(nosemovemulti_plug, nosemovemultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force NoseFrontBack_multiplier.outputZ facialBlendShape.blendshape_Nose_Front')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_NoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "NoseFrontBack_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_MiddleNoseScrunch_ctrl"):
                        facialctrl_sl_ls.add("Biped_MiddleNoseScrunch_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            mnose_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(mnose_str)[3:][:-3] == "Biped_MiddleNoseScrunch_ctrl":
                                mnose_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_M" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                print(str_attr_lowercase)
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_MiddleNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_MiddleNoseScrunch_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_M" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_MiddleNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                mnose_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(mnose_multiplier, "Middle{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                mnosemultiplier_fs = om2.MFnDependencyNode(mnose_multiplier)
                                mnosectrl_fs = om2.MFnDependencyNode(mnose_obj)

                                mnose_plug = mnosectrl_fs.findPlug(str_attr_lowercase, False)
                                mnosemulti_plug = mnosectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                mnosemultiplierinp1y_plug = mnosemultiplier_fs.findPlug("input1Y", False)
                                mnosemultiplierinp2y_plug = mnosemultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(mnose_plug, mnosemultiplierinp1y_plug)
                                self.MDG2_mod.connect(mnosemulti_plug, mnosemultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force Middle{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "Middle{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_Tip_*"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "tipmulti" -niceName "Tip Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_MiddleNoseScrunch_ctrl')

                            if cmds.objExists("blendshape_Nose_Tip_L"):
                                nosetip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(nosetip_multiplier, "NoseLeftRightTip_multiplier")
                                self.MDG2_mod.doIt()

                                tipmultiplier_fs = om2.MFnDependencyNode(nosetip_multiplier)
                                tipctrl_fs = om2.MFnDependencyNode(mnose_obj)

                                tiptransx_plug = tipctrl_fs.findPlug("translateX", False)
                                tipmulti_plug = tipctrl_fs.findPlug("tipmulti", False)
                                tipmultiplierinp1x_plug = tipmultiplier_fs.findPlug("input1X", False)
                                tipmultiplierinp2x_plug = tipmultiplier_fs.findPlug("input2X", False)

                                self.MDG2_mod.connect(tiptransx_plug, tipmultiplierinp1x_plug)
                                self.MDG2_mod.connect(tipmulti_plug, tipmultiplierinp2x_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force NoseLeftRightTip_multiplier.outputX facialBlendShape.blendshape_Nose_Tip_L')
                                self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_MiddleNoseScrunch_ctrl')
                                self.MDG2_mod.commandToExecute('setAttr "NoseLeftRightTip_multiplier.operation" 1')
                                self.MDG2_mod.doIt()

                            if cmds.objExists("blendshape_Nose_Tip_Up"):
                                nosetip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(nosetip_multiplier, "UpDownTip_multiplier")
                                self.MDG2_mod.doIt()

                                tipmultiplier_fs = om2.MFnDependencyNode(nosetip_multiplier)
                                tipctrl_fs = om2.MFnDependencyNode(mnose_obj)

                                tiptransy_plug = tipctrl_fs.findPlug("translateY", False)
                                tipmulti_plug = tipctrl_fs.findPlug("tipmulti", False)
                                tipmultiplierinp1y_plug = tipmultiplier_fs.findPlug("input1Y", False)
                                tipmultiplierinp2y_plug = tipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(tiptransy_plug, tipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(tipmulti_plug, tipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force UpDownTip_multiplier.outputY facialBlendShape.blendshape_Nose_Tip_Up')
                                self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_MiddleNoseScrunch_ctrl')
                                self.MDG2_mod.commandToExecute('setAttr "UpDownTip_multiplier.operation" 1')
                                self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftNoseScrunch_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftNoseScrunch_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            lnose_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(lnose_str)[3:][:-3] == "Biped_LeftNoseScrunch_ctrl":
                                lnose_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Nose_FlankRaise_L" and not str(blendshape_str)[3:-3] == "blendshape_Nose_NostrilFlare_L" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftNoseScrunch_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Nose_FlankRaise_L" and not str(blendshape_str)[3:-3] == "blendshape_Nose_NostrilFlare_L" and not str(blendshape_str)[3:22] == "blendshape_Nose_Tip" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lnose_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lnose_multiplier, "LeftNose{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                lnosemultiplier_fs = om2.MFnDependencyNode(lnose_multiplier)
                                lnosectrl_fs = om2.MFnDependencyNode(lnose_obj)

                                lnose_plug = lnosectrl_fs.findPlug(str_attr_lowercase, False)
                                lnosemulti_plug = lnosectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                lnosemultiplierinp1y_plug = lnosemultiplier_fs.findPlug("input1Y", False)
                                lnosemultiplierinp2y_plug = lnosemultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(lnose_plug, lnosemultiplierinp1y_plug)
                                self.MDG2_mod.connect(lnosemulti_plug, lnosemultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LeftNose{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LeftNose{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_FlankRaise_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "flankraisedrop" -niceName "FlankRaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftNoseScrunch_ctrl')
                            lnoseflankraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lnoseflankraise_multiplier, "LeftNoseFlankRaise_multiplier")
                            self.MDG2_mod.doIt()

                            lflankraisemultiplier_fs = om2.MFnDependencyNode(lnoseflankraise_multiplier)
                            lflankraisectrl_fs = om2.MFnDependencyNode(lnose_obj)

                            lflankraisetransy_plug = lflankraisectrl_fs.findPlug("translateY", False)
                            lflankraisemulti_plug = lflankraisectrl_fs.findPlug("flankraisedrop", False)
                            lflankraisemultiplierinp1y_plug = lflankraisemultiplier_fs.findPlug("input1Y", False)
                            lflankraisemultiplierinp2y_plug = lflankraisemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lflankraisetransy_plug, lflankraisemultiplierinp1y_plug)
                            self.MDG2_mod.connect(lflankraisemulti_plug, lflankraisemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftNoseFlankRaise_multiplier.outputY facialBlendShape.blendshape_Nose_FlankRaise_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftNoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftNoseFlankRaise_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_NostrilFlare_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "nostrilflare" -niceName "NostrilFlare Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftNoseScrunch_ctrl')
                            lnosenostrilflare_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lnosenostrilflare_multiplier, "LeftNoseNostrilFlare_multiplier")
                            self.MDG2_mod.doIt()

                            lnostrilflaremultiplier_fs = om2.MFnDependencyNode(lnosenostrilflare_multiplier)
                            lnostrilflarectrl_fs = om2.MFnDependencyNode(lnose_obj)

                            lnostrilflaretransx_plug = lnostrilflarectrl_fs.findPlug("translateX", False)
                            lnostrilflaremulti_plug = lnostrilflarectrl_fs.findPlug("nostrilflare", False)
                            lnostrilflaremultiplierinp1x_plug = lnostrilflaremultiplier_fs.findPlug("input1X", False)
                            lnostrilflaremultiplierinp2x_plug = lnostrilflaremultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(lnostrilflaretransx_plug, lnostrilflaremultiplierinp1x_plug)
                            self.MDG2_mod.connect(lnostrilflaremulti_plug, lnostrilflaremultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftNoseNostrilFlare_multiplier.outputX facialBlendShape.blendshape_Nose_NostrilFlare_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LeftNoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftNoseNostrilFlare_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightNoseScrunch_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightNoseScrunch_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rnose_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rnose_str)[3:][:-3] == "Biped_RightNoseScrunch_ctrl":
                                rnose_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Nose_FlankRaise_R" and not str(blendshape_str)[3:-3] == "blendshape_Nose_NostrilFlare_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightNoseScrunch_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Nose_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Nose_FlankRaise_R" and not str(blendshape_str)[3:-3] == "blendshape_Nose_NostrilFlare_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightNoseScrunch_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rnose_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(rnose_multiplier, "RightNose{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rnosemultiplier_fs = om2.MFnDependencyNode(rnose_multiplier)
                                rnosectrl_fs = om2.MFnDependencyNode(rnose_obj)

                                rnose_plug = rnosectrl_fs.findPlug(str_attr_lowercase, False)
                                rnosemulti_plug = rnosectrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rnosemultiplierinp1y_plug = rnosemultiplier_fs.findPlug("input1Y", False)
                                rnosemultiplierinp2y_plug = rnosemultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rnose_plug, rnosemultiplierinp1y_plug)
                                self.MDG2_mod.connect(rnosemulti_plug, rnosemultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightNose{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightNose{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_FlankRaise_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "flankraisedrop" -niceName "FlankRaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightNoseScrunch_ctrl')
                            rnoseflankraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rnoseflankraise_multiplier, "RightNoseScrunch_multiplier")
                            self.MDG2_mod.doIt()

                            rflankraisemultiplier_fs = om2.MFnDependencyNode(rnoseflankraise_multiplier)
                            rflankraisectrl_fs = om2.MFnDependencyNode(rnose_obj)

                            rflankraisetransy_plug = rflankraisectrl_fs.findPlug("translateY", False)
                            rflankraisemulti_plug = rflankraisectrl_fs.findPlug("flankraisedrop", False)
                            rflankraisemultiplierinp1y_plug = rflankraisemultiplier_fs.findPlug("input1Y", False)
                            rflankraisemultiplierinp2y_plug = rflankraisemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rflankraisetransy_plug, rflankraisemultiplierinp1y_plug)
                            self.MDG2_mod.connect(rflankraisemulti_plug, rflankraisemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightNoseScrunch_multiplier.outputY facialBlendShape.blendshape_Nose_FlankRaise_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightNoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightNoseScrunch_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Nose_NostrilFlare_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "nostrilflare" -niceName "NostrilFlare Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightNoseScrunch_ctrl')
                            rnosenostrilflare_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rnosenostrilflare_multiplier, "RightNoseNostrilFlare_multiplier")
                            self.MDG2_mod.doIt()

                            rnostrilflaremultiplier_fs = om2.MFnDependencyNode(rnosenostrilflare_multiplier)
                            rnostrilflarectrl_fs = om2.MFnDependencyNode(rnose_obj)

                            rnostrilflaretransx_plug = rnostrilflarectrl_fs.findPlug("translateX", False)
                            rnostrilflaremulti_plug = rnostrilflarectrl_fs.findPlug("nostrilflare", False)
                            rnostrilflaremultiplierinp1x_plug = rnostrilflaremultiplier_fs.findPlug("input1X", False)
                            rnostrilflaremultiplierinp2x_plug = rnostrilflaremultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(rnostrilflaretransx_plug, rnostrilflaremultiplierinp1x_plug)
                            self.MDG2_mod.connect(rnostrilflaremulti_plug, rnostrilflaremultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightNoseNostrilFlare_multiplier.outputX facialBlendShape.blendshape_Nose_NostrilFlare_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_RightNoseScrunch_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightNoseNostrilFlare_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftCheek_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftCheek_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rcheek_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rcheek_str)[3:][:-3] == "Biped_LeftCheek_ctrl":
                                lcheek_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Cheek_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_MoveBack_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Raise_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Blow_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Suck_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftCheek_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftCheek_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Cheek_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_MoveBack_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Raise_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Blow_L" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Suck_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftCheek_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lcheek_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lcheek_multiplier, "LeftCheek{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                lcheekmultiplier_fs = om2.MFnDependencyNode(lcheek_multiplier)
                                lcheekctrl_fs = om2.MFnDependencyNode(lcheek_obj)

                                lcheek_plug = lcheekctrl_fs.findPlug(str_attr_lowercase, False)
                                lcheekmulti_plug = lcheekctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                lcheekmultiplierinp1y_plug = lcheekmultiplier_fs.findPlug("input1Y", False)
                                lcheekmultiplierinp2y_plug = lcheekmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(lcheek_plug, lcheekmultiplierinp1y_plug)
                                self.MDG2_mod.connect(lcheekmulti_plug, lcheekmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LeftCheek{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LeftCheek{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_MoveBack_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movefrontback" -niceName "MoveFrontBack Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftCheek_ctrl')
                            lcheekmoveback_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lcheekmoveback_multiplier, "LeftCheekMoveBack_multiplier")
                            self.MDG2_mod.doIt()

                            lmovebackmultiplier_fs = om2.MFnDependencyNode(lcheekmoveback_multiplier)
                            lmovebackctrl_fs = om2.MFnDependencyNode(lcheek_obj)

                            lmovebacktransx_plug = lmovebackctrl_fs.findPlug("translateX", False)
                            lmovebackmulti_plug = lmovebackctrl_fs.findPlug("movefrontback", False)
                            lmovebackmultiplierinp1x_plug = lmovebackmultiplier_fs.findPlug("input1X", False)
                            lmovebackmultiplierinp2x_plug = lmovebackmultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(lmovebacktransx_plug, lmovebackmultiplierinp1x_plug)
                            self.MDG2_mod.connect(lmovebackmulti_plug, lmovebackmultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftCheekMoveBack_multiplier.outputX facialBlendShape.blendshape_Cheek_MoveBack_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LeftCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekMoveBack_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Raise_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedrop" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftCheek_ctrl')
                            lcheekraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lcheekraise_multiplier, "LeftCheekRaise_multiplier")
                            self.MDG2_mod.doIt()

                            lraisemultiplier_fs = om2.MFnDependencyNode(lcheekraise_multiplier)
                            lraisectrl_fs = om2.MFnDependencyNode(lcheek_obj)

                            lraisetransy_plug = lraisectrl_fs.findPlug("translateY", False)
                            lraisemulti_plug = lraisectrl_fs.findPlug("raisedrop", False)
                            lraisemultiplierinp1y_plug = lraisemultiplier_fs.findPlug("input1Y", False)
                            lraisemultiplierinp2y_plug = lraisemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lraisetransy_plug, lraisemultiplierinp1y_plug)
                            self.MDG2_mod.connect(lraisemulti_plug, lraisemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftCheekRaise_multiplier.outputY facialBlendShape.blendshape_Cheek_Raise_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekRaise_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Blow_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "blowmulti" -niceName "Blow Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftCheek_ctrl')
                            lcheekblow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            lcheekblow_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(lcheekblow_multiplier, "LeftCheekBlow_multiplier")
                            self.MDG2_mod.renameNode(lcheekblow_condition, "LeftCheekBlow_condition")
                            self.MDG2_mod.doIt()

                            lcheekblowcondition_fs = om2.MFnDependencyNode(lcheekblow_condition)
                            lcheekblowmultiplier_fs = om2.MFnDependencyNode(lcheekblow_multiplier)
                            lcheekblowctrl_fs = om2.MFnDependencyNode(lcheek_obj)

                            lcheekblowtransz_plug = lcheekblowctrl_fs.findPlug("translateZ", False)
                            lcheekblowcondcolortb_plug = lcheekblowcondition_fs.findPlug("colorIfTrueB", False)
                            lcheekblowcondfirstterm_plug = lcheekblowcondition_fs.findPlug("firstTerm", False)
                            lcheekblowcondotp_plug = lcheekblowcondition_fs.findPlug("outColorB", False)
                            lcheekblowmulti_plug = lcheekblowctrl_fs.findPlug("blowmulti", False)
                            lcheekblowmultiplierinp1z_plug = lcheekblowmultiplier_fs.findPlug("input1Z", False)
                            lcheekblowmultiplierinp2z_plug = lcheekblowmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(lcheekblowtransz_plug, lcheekblowcondcolortb_plug)
                            self.MDG2_mod.connect(lcheekblowtransz_plug, lcheekblowcondfirstterm_plug)
                            self.MDG2_mod.connect(lcheekblowcondotp_plug, lcheekblowmultiplierinp1z_plug)
                            self.MDG2_mod.connect(lcheekblowmulti_plug, lcheekblowmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftCheekBlow_multiplier.outputZ facialBlendShape.blendshape_Cheek_Blow_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_LeftCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekBlow_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekBlow_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekBlow_condition.operation" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LeftCheekBlow_condition.colorIfFalseB" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Suck_L"):
                            for index in range(facialctrl_sl_ls.length()):
                                ctrl_str = facialctrl_sl_ls.getSelectionStrings(index)
                                if str(ctrl_str)[3:][:-3] == "Biped_LeftCheek_ctrl":
                                    self.MDG2_mod.commandToExecute('addAttr -longName "suckmulti" -niceName "Suck Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LeftCheek_ctrl')
                                    lcheeksuck_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                    lcheeksuck_condition = self.MDG2_mod.createNode("condition")
                                    self.MDG2_mod.renameNode(lcheeksuck_multiplier, "LeftCheekSuck_multiplier")
                                    self.MDG2_mod.renameNode(lcheeksuck_condition, "LeftCheekSuck_condition")
                                    self.MDG2_mod.doIt()

                                    lcheeksuckcondition_fs = om2.MFnDependencyNode(lcheeksuck_condition)
                                    lcheeksuckmultiplier_fs = om2.MFnDependencyNode(lcheeksuck_multiplier)
                                    lcheeksuckctrl_fs = om2.MFnDependencyNode(facialctrl_sl_ls.getDependNode(index))

                                    lcheeksucktransz_plug = lcheeksuckctrl_fs.findPlug("translateZ", False)
                                    lcheeksuckcondcolortb_plug = lcheeksuckcondition_fs.findPlug("colorIfTrueB", False)
                                    lcheeksuckcondfirstterm_plug = lcheeksuckcondition_fs.findPlug("firstTerm", False)
                                    lcheeksuckcondotp_plug = lcheeksuckcondition_fs.findPlug("outColorB", False)
                                    lcheeksuckmulti_plug = lcheeksuckctrl_fs.findPlug("suckmulti", False)
                                    lcheeksuckmultiplierinp1z_plug = lcheeksuckmultiplier_fs.findPlug("input1Z", False)
                                    lcheeksuckmultiplierinp2z_plug = lcheeksuckmultiplier_fs.findPlug("input2Z", False)

                                    self.MDG2_mod.connect(lcheeksucktransz_plug, lcheeksuckcondcolortb_plug)
                                    self.MDG2_mod.connect(lcheeksucktransz_plug, lcheeksuckcondfirstterm_plug)
                                    self.MDG2_mod.connect(lcheeksuckcondotp_plug, lcheeksuckmultiplierinp1z_plug)
                                    self.MDG2_mod.connect(lcheeksuckmulti_plug, lcheeksuckmultiplierinp2z_plug)
                                    self.MDG2_mod.commandToExecute('connectAttr -force LeftCheekSuck_multiplier.outputZ facialBlendShape.blendshape_Cheek_Suck_L')
                                    self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_LeftCheek_ctrl')
                                    self.MDG2_mod.commandToExecute('setAttr "LeftCheekSuck_multiplier.operation" 1')
                                    self.MDG2_mod.commandToExecute('setAttr "LeftCheekSuck_condition.secondTerm" 0')
                                    self.MDG2_mod.commandToExecute('setAttr "LeftCheekSuck_condition.operation" 4')
                                    self.MDG2_mod.commandToExecute('setAttr "LeftCheekSuck_condition.colorIfFalseB" 0')
                                    self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightCheek_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightCheek_ctrl")
                        for index in range(facialctrl_sl_ls.length()):
                            rcheek_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rcheek_str)[3:][:-3] == "Biped_RightCheek_ctrl":
                                rcheek_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Cheek_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_MoveBack_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Raise_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Blow_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Suck_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightCheek_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightCheek_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Cheek_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_MoveBack_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Raise_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Blow_R" and not str(blendshape_str)[3:-3] == "blendshape_Cheek_Suck_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightCheek_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rcheek_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(rcheek_multiplier, "RightCheek{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rcheekmultiplier_fs = om2.MFnDependencyNode(rcheek_multiplier)
                                rcheekctrl_fs = om2.MFnDependencyNode(rcheek_obj)

                                rcheek_plug = rcheekctrl_fs.findPlug(str_attr_lowercase, False)
                                rcheekmulti_plug = rcheekctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rcheekmultiplierinp1y_plug = rcheekmultiplier_fs.findPlug("input1Y", False)
                                rcheekmultiplierinp2y_plug = rcheekmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rcheek_plug, rcheekmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rcheekmulti_plug, rcheekmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightCheek{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightCheek{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_MoveBack_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movefrontback" -niceName "MoveFrontBack Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightCheek_ctrl')
                            rcheekmoveback_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rcheekmoveback_multiplier, "RightCheekMoveBack_multiplier")
                            self.MDG2_mod.doIt()

                            rmovebackmultiplier_fs = om2.MFnDependencyNode(rcheekmoveback_multiplier)
                            rmovebackctrl_fs = om2.MFnDependencyNode(rcheek_obj)

                            rmovebacktransx_plug = rmovebackctrl_fs.findPlug("translateX", False)
                            rmovebackmulti_plug = rmovebackctrl_fs.findPlug("movefrontback", False)
                            rmovebackmultiplierinp1x_plug = rmovebackmultiplier_fs.findPlug("input1X", False)
                            rmovebackmultiplierinp2x_plug = rmovebackmultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(rmovebacktransx_plug, rmovebackmultiplierinp1x_plug)
                            self.MDG2_mod.connect(rmovebackmulti_plug, rmovebackmultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCheekMoveBack_multiplier.outputX facialBlendShape.blendshape_Cheek_MoveBack_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_RightCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekMoveBack_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Raise_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "raisedrop" -niceName "RaiseDrop Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightCheek_ctrl')
                            rcheekraise_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rcheekraise_multiplier, "RightCheekRaise_multiplier")
                            self.MDG2_mod.doIt()

                            rraisemultiplier_fs = om2.MFnDependencyNode(rcheekraise_multiplier)
                            rraisectrl_fs = om2.MFnDependencyNode(rcheek_obj)

                            rraisetransy_plug = rraisectrl_fs.findPlug("translateY", False)
                            rraisemulti_plug = rraisectrl_fs.findPlug("raisedrop", False)
                            rraisemultiplierinp1y_plug = rraisemultiplier_fs.findPlug("input1Y", False)
                            rraisemultiplierinp2y_plug = rraisemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rraisetransy_plug, rraisemultiplierinp1y_plug)
                            self.MDG2_mod.connect(rraisemulti_plug, rraisemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCheekRaise_multiplier.outputY facialBlendShape.blendshape_Cheek_Raise_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekRaise_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Blow_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "blowmulti" -niceName "BlowMulti" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightCheek_ctrl')
                            rcheekblow_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            rcheekblow_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(rcheekblow_multiplier, "RightCheekBlow_multiplier")
                            self.MDG2_mod.renameNode(rcheekblow_condition, "RightCheekBlow_condition")
                            self.MDG2_mod.doIt()

                            rcheekblowcondition_fs = om2.MFnDependencyNode(rcheekblow_condition)
                            rcheekblowmultiplier_fs = om2.MFnDependencyNode(rcheekblow_multiplier)
                            rcheekblowctrl_fs = om2.MFnDependencyNode(rcheek_obj)

                            rcheekblowtransz_plug = rcheekblowctrl_fs.findPlug("translateZ", False)
                            rcheekblowcondcolortb_plug = rcheekblowcondition_fs.findPlug("colorIfTrueB", False)
                            rcheekblowcondfirstterm_plug = rcheekblowcondition_fs.findPlug("firstTerm", False)
                            rcheekblowcondotp_plug = rcheekblowcondition_fs.findPlug("outColorB", False)
                            rcheekblowmulti_plug = rcheekblowctrl_fs.findPlug("blowmulti", False)
                            rcheekblowmultiplierinp1z_plug = rcheekblowmultiplier_fs.findPlug("input1Z", False)
                            rcheekblowmultiplierinp2z_plug = rcheekblowmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(rcheekblowtransz_plug, rcheekblowcondcolortb_plug)
                            self.MDG2_mod.connect(rcheekblowtransz_plug, rcheekblowcondfirstterm_plug)
                            self.MDG2_mod.connect(rcheekblowcondotp_plug, rcheekblowmultiplierinp1z_plug)
                            self.MDG2_mod.connect(rcheekblowmulti_plug, rcheekblowmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCheekBlow_multiplier.outputZ facialBlendShape.blendshape_Cheek_Blow_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_RightCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekBlow_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekBlow_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekBlow_condition.operation" 4')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekBlow_condition.colorIfFalseB" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Cheek_Suck_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "suckmulti" -niceName "Suck Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightCheek_ctrl')
                            rcheeksuck_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            rcheeksuck_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(rcheeksuck_multiplier, "RightCheekSuck_multiplier")
                            self.MDG2_mod.renameNode(rcheeksuck_condition, "RightCheekSuck_condition")
                            self.MDG2_mod.doIt()

                            rcheeksuckcondition_fs = om2.MFnDependencyNode(rcheeksuck_condition)
                            rcheeksuckmultiplier_fs = om2.MFnDependencyNode(rcheeksuck_multiplier)
                            rcheeksuckctrl_fs = om2.MFnDependencyNode(rcheek_obj)

                            rcheeksucktransz_plug = rcheeksuckctrl_fs.findPlug("translateZ", False)
                            rcheeksuckcondcolortb_plug = rcheeksuckcondition_fs.findPlug("colorIfTrueB", False)
                            rcheeksuckcondfirstterm_plug = rcheeksuckcondition_fs.findPlug("firstTerm", False)
                            rcheeksuckcondotp_plug = rcheeksuckcondition_fs.findPlug("outColorB", False)
                            rcheeksuckmulti_plug = rcheeksuckctrl_fs.findPlug("suckmulti", False)
                            rcheeksuckmultiplierinp1z_plug = rcheeksuckmultiplier_fs.findPlug("input1Z", False)
                            rcheeksuckmultiplierinp2z_plug = rcheeksuckmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(rcheeksucktransz_plug, rcheeksuckcondcolortb_plug)
                            self.MDG2_mod.connect(rcheeksucktransz_plug, rcheeksuckcondfirstterm_plug)
                            self.MDG2_mod.connect(rcheeksuckcondotp_plug, rcheeksuckmultiplierinp1z_plug)
                            self.MDG2_mod.connect(rcheeksuckmulti_plug, rcheeksuckmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCheekSuck_multiplier.outputZ facialBlendShape.blendshape_Cheek_Suck_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_RightCheek_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekSuck_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekSuck_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekSuck_condition.operation" 2')
                            self.MDG2_mod.commandToExecute('setAttr "RightCheekSuck_condition.colorIfFalseB" 0')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftEar_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftEar_ctrl")
                        for index in range(facialctrl_sl_ls.length()):
                            lear_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(lear_str)[3:][:-3] == "Biped_LeftEar_ctrl":
                                lear_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            if str(blendshape_str)[3:18] == "blendshape_Ear_" and str(blendshape_str)[-5:-3] == "_L":
                                str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[18:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftEar_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftEar_ctrl')

                    if cmds.objExists("Biped_LeftEar_ctrl"):
                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            if str(blendshape_str)[3:18] == "blendshape_Ear_" and str(blendshape_str)[-5:-3] == "_L":
                               str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                               str_attr_upperlowercase = str(blendshape_str)[18:-5]
                               self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftEar_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                               lear_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                               self.MDG2_mod.renameNode(lear_multiplier, "LeftEar{0}_multiplier".format(str_attr_upperlowercase))
                               self.MDG2_mod.doIt()

                               learmultiplier_fs = om2.MFnDependencyNode(lear_multiplier)
                               learctrl_fs = om2.MFnDependencyNode(lear_obj)

                               lear_plug = learctrl_fs.findPlug(str_attr_lowercase, False)
                               learmulti_plug = learctrl_fs.findPlug(str_attr_lowercase+"multi", False)
                               learmultiplierinp1y_plug = learmultiplier_fs.findPlug("input1Y", False)
                               learmultiplierinp2y_plug = learmultiplier_fs.findPlug("input2Y", False)

                               self.MDG2_mod.connect(lear_plug, learmultiplierinp1y_plug)
                               self.MDG2_mod.connect(learmulti_plug, learmultiplierinp2y_plug)
                               self.MDG2_mod.commandToExecute('connectAttr -force LeftEar{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                               self.MDG2_mod.commandToExecute('setAttr "LeftEar{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                               self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightEar_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightEar_ctrl")
                        for index in range(facialctrl_sl_ls.length()):
                            rear_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rear_str)[3:][:-3] == "Biped_RightEar_ctrl":
                                rear_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            if str(blendshape_str)[3:18] == "blendshape_Ear_" and str(blendshape_str)[-5:-3] == "_R":
                                str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[18:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightEar_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightEar_ctrl')

                    if cmds.objExists("Biped_RightEar_ctrl"):
                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            if str(blendshape_str)[3:18] == "blendshape_Ear_" and str(blendshape_str)[-5:-3] == "_R":
                               str_attr_lowercase = str(blendshape_str)[18:-5].lower()
                               str_attr_upperlowercase = str(blendshape_str)[18:-5]
                               self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightEar_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                               rear_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                               self.MDG2_mod.renameNode(rear_multiplier, "RightEar{0}_multiplier".format(str_attr_upperlowercase))
                               self.MDG2_mod.doIt()

                               rearmultiplier_fs = om2.MFnDependencyNode(rear_multiplier)
                               rearctrl_fs = om2.MFnDependencyNode(rear_obj)

                               rear_plug = rearctrl_fs.findPlug(str_attr_lowercase, False)
                               rearmulti_plug = rearctrl_fs.findPlug(str_attr_lowercase+"multi", False)
                               rearmultiplierinp1y_plug = rearmultiplier_fs.findPlug("input1Y", False)
                               rearmultiplierinp2y_plug = rearmultiplier_fs.findPlug("input2Y", False)

                               self.MDG2_mod.connect(rear_plug, rearmultiplierinp1y_plug)
                               self.MDG2_mod.connect(rearmulti_plug, rearmultiplierinp2y_plug)
                               self.MDG2_mod.commandToExecute('connectAttr -force RightEar{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                               self.MDG2_mod.commandToExecute('setAttr "RightEar{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                               self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_Mouth_ctrl"):
                        facialctrl_sl_ls.add("Biped_Mouth_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            mouth_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(mouth_str)[3:][:-3] == "Biped_Mouth_ctrl":
                                mouth_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Mouth_" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_Mouth_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_Mouth_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:20] == "blendshape_Mouth_" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[20:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[20:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Mouth_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                mouth_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(mouth_multiplier, "Mouth{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                mouthmultiplier_fs = om2.MFnDependencyNode(mouth_multiplier)
                                mouthctrl_fs = om2.MFnDependencyNode(mouth_obj)

                                mouthplug = mouthctrl_fs.findPlug(str_attr_lowercase, False)
                                mouthmulti_plug = mouthctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                mouthmultiplierinp1y_plug = mouthmultiplier_fs.findPlug("input1Y", False)
                                mouthmultiplierinp2y_plug = mouthmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(mouthplug, mouthmultiplierinp1y_plug)
                                self.MDG2_mod.connect(mouthmulti_plug, mouthmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force Mouth{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "Mouth{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Mouth_Up"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveupdownmulti" -niceName "MoveUpDown Multi" -attributeType double -keyable true -defaultValue 1 -maxValue 1 Biped_Mouth_ctrl')
                            mouthmove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(mouthmove_multiplier, "MouthUpDown_multiplier")
                            self.MDG2_mod.doIt()

                            mouthmovemultiplier_fs = om2.MFnDependencyNode(mouthmove_multiplier)
                            mouthmovectrl_fs = om2.MFnDependencyNode(mouth_obj)

                            mouthmovetransy_plug = mouthmovectrl_fs.findPlug("translateY", False)
                            mouthmovemulti_plug = mouthmovectrl_fs.findPlug("moveupdownmulti", False)
                            mouthmovemultiplierinp1y_plug = mouthmovemultiplier_fs.findPlug("input1Y", False)
                            mouthmovemultiplierinp2y_plug = mouthmovemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(mouthmovetransy_plug, mouthmovemultiplierinp1y_plug)
                            self.MDG2_mod.connect(mouthmovemulti_plug, mouthmovemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force MouthUpDown_multiplier.outputY facialBlendShape.blendshape_Mouth_Up')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_Mouth_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "MouthUpDown_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Mouth_Left"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveleftrightmulti" -niceName "MoveLeftRight Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Mouth_ctrl')
                            mouthmove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(mouthmove_multiplier, "MouthLeftRight_multiplier")
                            self.MDG2_mod.doIt()

                            mouthmovemultiplier_fs = om2.MFnDependencyNode(mouthmove_multiplier)
                            mouthmovectrl_fs = om2.MFnDependencyNode(mouth_obj)

                            mouthmovetransx_plug = mouthmovectrl_fs.findPlug("translateX", False)
                            mouthmovemulti_plug = mouthmovectrl_fs.findPlug("moveleftrightmulti", False)
                            mouthmovemultiplierinp1x_plug = mouthmovemultiplier_fs.findPlug("input1X", False)
                            mouthmovemultiplierinp2x_plug = mouthmovemultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(mouthmovetransx_plug, mouthmovemultiplierinp1x_plug)
                            self.MDG2_mod.connect(mouthmovemulti_plug, mouthmovemultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force MouthLeftRight_multiplier.outputX facialBlendShape.blendshape_Mouth_Left')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_Mouth_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "MouthLeftRight_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Mouth_Front"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movefrontbackmulti" -niceName "MoveFrontBack Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Mouth_ctrl')
                            mouthmove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(mouthmove_multiplier, "MouthFrontBack_multiplier")
                            self.MDG2_mod.doIt()

                            mouthmovemultiplier_fs = om2.MFnDependencyNode(mouthmove_multiplier)
                            mouthmovectrl_fs = om2.MFnDependencyNode(mouth_obj)

                            mouthmovetransz_plug = mouthmovectrl_fs.findPlug("translateZ", False)
                            mouthmovemulti_plug = mouthmovectrl_fs.findPlug("movefrontbackmulti", False)
                            mouthmovemultiplierinp1z_plug = mouthmovemultiplier_fs.findPlug("input1Z", False)
                            mouthmovemultiplierinp2z_plug = mouthmovemultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(mouthmovetransz_plug, mouthmovemultiplierinp1z_plug)
                            self.MDG2_mod.connect(mouthmovemulti_plug, mouthmovemultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force MouthFrontBack_multiplier.outputZ facialBlendShape.blendshape_Mouth_Front')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_Mouth_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "MouthFrontBack_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_Lip_ctrl"):
                        facialctrl_sl_ls.add("Biped_Lip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            lips_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(lips_str)[3:][:-3] == "Biped_Lip_ctrl":
                                lips_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Lips_" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-9:-3] == "_Right" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-8:-3] == "_Down" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_Lip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_Lip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:19] == "blendshape_Lips_" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-9:-3] == "_Right" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-8:-3] == "_Down" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[19:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[19:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Lip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lips_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lips_multiplier, "Lips{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                lipsmultiplier_fs = om2.MFnDependencyNode(lips_multiplier)
                                lipsctrl_fs = om2.MFnDependencyNode(lips_obj)

                                lipsplug = lipsctrl_fs.findPlug(str_attr_lowercase, False)
                                lipsmulti_plug = lipsctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                lipsmultiplierinp1y_plug = lipsmultiplier_fs.findPlug("input1Y", False)
                                lipsmultiplierinp2y_plug = lipsmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(lipsplug, lipsmultiplierinp1y_plug)
                                self.MDG2_mod.connect(lipsmulti_plug, lipsmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force Lips{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "Lips{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lips_Left"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveleftmulti" -niceName "MoveLeft Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Lip_ctrl')
                            llips_condition = self.MDG2_mod.createNode("condition")
                            llips_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(llips_condition, "LipsLeft_condition")
                            self.MDG2_mod.renameNode(llips_multiplier, "LipsLeft_multiplier")
                            self.MDG2_mod.doIt()

                            llipscondition_fs = om2.MFnDependencyNode(llips_condition)
                            llipsmultiplier_fs = om2.MFnDependencyNode(llips_multiplier)
                            llipsctrl_fs = om2.MFnDependencyNode(lips_obj)

                            llipstransx_plug = llipsctrl_fs.findPlug("translateX", False)
                            llipscondcolortr_plug = llipscondition_fs.findPlug("colorIfTrueR", False)
                            llipscondfirstterm_plug = llipscondition_fs.findPlug("firstTerm", False)
                            llipscondotp_plug = llipscondition_fs.findPlug("outColorR", False)
                            llipsmulti_plug = llipsctrl_fs.findPlug("moveleftmulti", False)
                            llipsmultiplierinp1x_plug = llipsmultiplier_fs.findPlug("input1X", False)
                            llipsmultiplierinp2x_plug = llipsmultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(llipstransx_plug, llipscondcolortr_plug)
                            self.MDG2_mod.connect(llipstransx_plug, llipscondfirstterm_plug)
                            self.MDG2_mod.connect(llipscondotp_plug, llipsmultiplierinp1x_plug)
                            self.MDG2_mod.connect(llipsmulti_plug, llipsmultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LipsLeft_multiplier.outputX facialBlendShape.blendshape_Lips_Left')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_Lip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LipsLeft_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "LipsLeft_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "LipsLeft_condition.operation" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LipsLeft_condition.colorIfFalseR" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lips_Right"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moverightmulti" -niceName "MoveRight Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_Lip_ctrl')
                            rlips_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            rlips_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(rlips_condition, "LipsRight_condition")
                            self.MDG2_mod.renameNode(rlips_multiplier, "LipsRight_multiplier")
                            self.MDG2_mod.doIt()

                            rlipscondition_fs = om2.MFnDependencyNode(rlips_condition)
                            rlipsmultiplier_fs = om2.MFnDependencyNode(rlips_multiplier)
                            rlipsctrl_fs = om2.MFnDependencyNode(lips_obj)

                            rlipstransx_plug = rlipsctrl_fs.findPlug("translateX", False)
                            rlipscondcolortr_plug = rlipscondition_fs.findPlug("colorIfTrueR", False)
                            rlipscondfirstterm_plug = rlipscondition_fs.findPlug("firstTerm", False)
                            rlipscondotp_plug = rlipscondition_fs.findPlug("outColorR", False)
                            rlipsmulti_plug = rlipsctrl_fs.findPlug("moverightmulti", False)
                            rlipsmultiplierinp1x_plug = rlipsmultiplier_fs.findPlug("input1X", False)
                            rlipsmultiplierinp2x_plug = rlipsmultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(rlipstransx_plug, rlipscondcolortr_plug)
                            self.MDG2_mod.connect(rlipstransx_plug, rlipscondfirstterm_plug)
                            self.MDG2_mod.connect(rlipscondotp_plug, rlipsmultiplierinp1x_plug)
                            self.MDG2_mod.connect(rlipsmulti_plug, rlipsmultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LipsRight_multiplier.outputX facialBlendShape.blendshape_Lips_Right')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_Lip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LipsRight_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "LipsRight_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "LipsRight_condition.operation" 4')
                            self.MDG2_mod.commandToExecute('setAttr "LipsRight_condition.colorIfFalseR" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lips_Up"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveupmulti" -niceName "MoveUp Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Lip_ctrl')
                            uplips_condition = self.MDG2_mod.createNode("condition")
                            uplips_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(uplips_condition, "LipsUp_condition")
                            self.MDG2_mod.renameNode(uplips_multiplier, "LipsUp_multiplier")
                            self.MDG2_mod.doIt()

                            uplipscondition_fs = om2.MFnDependencyNode(uplips_condition)
                            uplipsmultiplier_fs = om2.MFnDependencyNode(uplips_multiplier)
                            uplipsctrl_fs = om2.MFnDependencyNode(lips_obj)

                            uplipstransy_plug = uplipsctrl_fs.findPlug("translateY", False)
                            uplipscondcolortg_plug = uplipscondition_fs.findPlug("colorIfTrueG", False)
                            uplipscondfirstterm_plug = uplipscondition_fs.findPlug("firstTerm", False)
                            uplipscondotp_plug = uplipscondition_fs.findPlug("outColorG", False)
                            uplipsmulti_plug = uplipsctrl_fs.findPlug("moveupmulti", False)
                            uplipsmultiplierinp1y_plug = uplipsmultiplier_fs.findPlug("input1Y", False)
                            uplipsmultiplierinp2y_plug = uplipsmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(uplipstransy_plug, uplipscondcolortg_plug)
                            self.MDG2_mod.connect(uplipstransy_plug, uplipscondfirstterm_plug)
                            self.MDG2_mod.connect(uplipscondotp_plug, uplipsmultiplierinp1y_plug)
                            self.MDG2_mod.connect(uplipsmulti_plug, uplipsmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LipsUp_multiplier.outputY facialBlendShape.blendshape_Lips_Up')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_Lip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LipsUp_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "LipsUp_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "LipsUp_condition.operation" 2')
                            self.MDG2_mod.commandToExecute('setAttr "LipsUp_condition.colorIfFalseG" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lips_Down"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movedownmulti" -niceName "MoveDown Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_Lip_ctrl')
                            downlips_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            downlips_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(downlips_condition, "LipsDown_condition")
                            self.MDG2_mod.renameNode(downlips_multiplier, "LipsDown_multiplier")
                            self.MDG2_mod.doIt()

                            downlipscondition_fs = om2.MFnDependencyNode(downlips_condition)
                            downlipsmultiplier_fs = om2.MFnDependencyNode(downlips_multiplier)
                            downlipsctrl_fs = om2.MFnDependencyNode(lips_obj)

                            downlipstransy_plug = downlipsctrl_fs.findPlug("translateY", False)
                            downlipscondcolortg_plug = downlipscondition_fs.findPlug("colorIfTrueR", False)
                            downlipscondfirstterm_plug = downlipscondition_fs.findPlug("firstTerm", False)
                            downlipscondotp_plug = downlipscondition_fs.findPlug("outColorR", False)
                            downlipsmulti_plug = downlipsctrl_fs.findPlug("movedownmulti", False)
                            downlipsmultiplierinp1y_plug = downlipsmultiplier_fs.findPlug("input1Y", False)
                            downlipsmultiplierinp2y_plug = downlipsmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(downlipstransy_plug, downlipscondcolortg_plug)
                            self.MDG2_mod.connect(downlipstransy_plug, downlipscondfirstterm_plug)
                            self.MDG2_mod.connect(downlipscondotp_plug, downlipsmultiplierinp1y_plug)
                            self.MDG2_mod.connect(downlipsmulti_plug, downlipsmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LipsDown_multiplier.outputY facialBlendShape.blendshape_Lips_Down')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_Lip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LipsDown_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "LipsDown_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "LipsDown_condition.operation" 4')
                            self.MDG2_mod.commandToExecute('setAttr "LipsDown_condition.colorIfFalseR" 0')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_UpperLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_UpperLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            upperlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(upperlip_str)[3:][:-3] == "Biped_UpperLip_ctrl":
                                upperlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Under" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_UpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_UpperLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[-6:-3] == "_Up" and not str(blendshape_str)[-9:-3] == "_Under" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_UpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                upperlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(upperlip_multiplier, "UpperLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                upperlipmultiplier_fs = om2.MFnDependencyNode(upperlip_multiplier)
                                upperlipctrl_fs = om2.MFnDependencyNode(upperlip_obj)

                                upperlipplug = upperlipctrl_fs.findPlug(str_attr_lowercase, False)
                                upperlipmulti_plug = upperlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                upperlipmultiplierinp1y_plug = upperlipmultiplier_fs.findPlug("input1Y", False)
                                upperlipmultiplierinp2y_plug = upperlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(upperlipplug, upperlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(upperlipmulti_plug, upperlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force UpperLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "UpperLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_Up"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "updownmulti" -niceName "UpDown Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_UpperLip_ctrl')
                            lipupdown_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lipupdown_multiplier, "UpperLipUpDown_multiplier")
                            self.MDG2_mod.doIt()

                            lipupdownmultiplier_fs = om2.MFnDependencyNode(lipupdown_multiplier)
                            lipupdownctrl_fs = om2.MFnDependencyNode(upperlip_obj)

                            lipupdowntransz_plug = lipupdownctrl_fs.findPlug("translateY", False)
                            lipupdownmulti_plug = lipupdownctrl_fs.findPlug("updownmulti", False)
                            lipupdownmultiplierinp1y_plug = lipupdownmultiplier_fs.findPlug("input1Y", False)
                            lipupdownmultiplierinp2y_plug = lipupdownmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lipupdowntransz_plug, lipupdownmultiplierinp1y_plug)
                            self.MDG2_mod.connect(lipupdownmulti_plug, lipupdownmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force UpperLipUpDown_multiplier.outputY facialBlendShape.blendshape_Lip_Upper_Up')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_UpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "UpperLipUpDown_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_Under"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "underabovemulti" -niceName "UnderAbove Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_UpperLip_ctrl')
                            lipupdown_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lipupdown_multiplier, "UpperLipUnderAbove_multiplier")
                            self.MDG2_mod.doIt()

                            lipupdownmultiplier_fs = om2.MFnDependencyNode(lipupdown_multiplier)
                            lipupdownctrl_fs = om2.MFnDependencyNode(upperlip_obj)

                            lipupdowntransz_plug = lipupdownctrl_fs.findPlug("translateZ", False)
                            lipupdownmulti_plug = lipupdownctrl_fs.findPlug("underabovemulti", False)
                            lipupdownmultiplierinp1z_plug = lipupdownmultiplier_fs.findPlug("input1Z", False)
                            lipupdownmultiplierinp2z_plug = lipupdownmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(lipupdowntransz_plug, lipupdownmultiplierinp1z_plug)
                            self.MDG2_mod.connect(lipupdownmulti_plug, lipupdownmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force UpperLipUnderAbove_multiplier.outputZ facialBlendShape.blendshape_Lip_Upper_Under')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_UpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "UpperLipUnderAbove_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LowerLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_LowerLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            lowerlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(lowerlip_str)[3:][:-3] == "Biped_LowerLip_ctrl":
                                lowerlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[-8:-3] == "_Down" and not str(blendshape_str)[-9:-3] == "_Trans" and not str(blendshape_str)[-9:-3] == "_Under" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LowerLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and not str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[-8:-3] == "_Down" and not str(blendshape_str)[-9:-3] == "_Trans" and not str(blendshape_str)[-9:-3] == "_Under" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lowerlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lowerlip_multiplier, "LowerLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                lowerlipmultiplier_fs = om2.MFnDependencyNode(lowerlip_multiplier)
                                lowerlipctrl_fs = om2.MFnDependencyNode(lowerlip_obj)

                                lowerlipplug = lowerlipctrl_fs.findPlug(str_attr_lowercase, False)
                                lowerlipmulti_plug = lowerlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                lowerlipmultiplierinp1y_plug = lowerlipmultiplier_fs.findPlug("input1Y", False)
                                lowerlipmultiplierinp2y_plug = lowerlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(lowerlipplug, lowerlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(lowerlipmulti_plug, lowerlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LowerLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LowerLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_Down"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "downupmulti" -niceName "DownUp Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LowerLip_ctrl')
                            lipdownup_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lipdownup_multiplier, "LowerLipDownUp_multiplier")
                            self.MDG2_mod.doIt()

                            lipdownupmultiplier_fs = om2.MFnDependencyNode(lipdownup_multiplier)
                            lipdownupctrl_fs = om2.MFnDependencyNode(lowerlip_obj)

                            lipdownuptransy_plug = lipdownupctrl_fs.findPlug("translateY", False)
                            lipdownupmulti_plug = lipdownupctrl_fs.findPlug("downupmulti", False)
                            lipdownupmultiplierinp1y_plug = lipdownupmultiplier_fs.findPlug("input1Y", False)
                            lipdownupmultiplierinp2y_plug = lipdownupmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(lipdownuptransy_plug, lipdownupmultiplierinp1y_plug)
                            self.MDG2_mod.connect(lipdownupmulti_plug, lipdownupmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LowerLipDownUp_multiplier.outputY facialBlendShape.blendshape_Lip_Lower_Down')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LowerLipDownUp_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_Under"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "underabovemulti" -niceName "UnderAbove Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LowerLip_ctrl')
                            lipunderabove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lipunderabove_multiplier, "LowerLipUnderAbove_multiplier")
                            self.MDG2_mod.doIt()

                            lipunderabovemultiplier_fs = om2.MFnDependencyNode(lipunderabove_multiplier)
                            lipunderabovectrl_fs = om2.MFnDependencyNode(lowerlip_obj)

                            lipunderabovetransz_plug = lipunderabovectrl_fs.findPlug("translateZ", False)
                            lipunderabovemulti_plug = lipunderabovectrl_fs.findPlug("underabovemulti", False)
                            lipunderabovemultiplierinp1z_plug = lipunderabovemultiplier_fs.findPlug("input1Z", False)
                            lipunderabovemultiplierinp2z_plug = lipunderabovemultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(lipunderabovetransz_plug, lipunderabovemultiplierinp1z_plug)
                            self.MDG2_mod.connect(lipunderabovemulti_plug, lipunderabovemultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LowerLipUnderAbove_multiplier.outputZ facialBlendShape.blendshape_Lip_Lower_Under')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_LowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LowerLipUnderAbove_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_Trans"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "sidemulti" -niceName "Side Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LowerLip_ctrl')
                            lipside_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(lipside_multiplier, "LowerLipSide_multiplier")
                            self.MDG2_mod.doIt()

                            lipsidemultiplier_fs = om2.MFnDependencyNode(lipside_multiplier)
                            lipsidectrl_fs = om2.MFnDependencyNode(lowerlip_obj)

                            lipsidetransx_plug = lipsidectrl_fs.findPlug("translateX", False)
                            lipsidemulti_plug = lipsidectrl_fs.findPlug("sidemulti", False)
                            lipsidemultiplierinp1x_plug = lipsidemultiplier_fs.findPlug("input1X", False)
                            lipsidemultiplierinp2x_plug = lipsidemultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(lipsidetransx_plug, lipsidemultiplierinp1x_plug)
                            self.MDG2_mod.connect(lipsidemulti_plug, lipsidemultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LowerLipSide_multiplier.outputX facialBlendShape.blendshape_Lip_Lower_Trans')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LowerLipSide_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftUpperLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftUpperLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            lupperlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(lupperlip_str)[3:][:-3] == "Biped_LeftUpperLip_ctrl":
                                lupperlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_Snarl_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_SnarlFront_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftUpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftUpperLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_Snarl_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_SnarlFront_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                print(blendshape_str)
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftUpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lupperlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lupperlip_multiplier, "LeftUpperLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                lupperlipmultiplier_fs = om2.MFnDependencyNode(lupperlip_multiplier)
                                lupperlipctrl_fs = om2.MFnDependencyNode(lupperlip_obj)

                                lupperlipplug = lupperlipctrl_fs.findPlug(str_attr_lowercase, False)
                                lupperlipmulti_plug = lupperlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                lupperlipmultiplierinp1y_plug = lupperlipmultiplier_fs.findPlug("input1Y", False)
                                lupperlipmultiplierinp2y_plug = lupperlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(lupperlipplug, lupperlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(lupperlipmulti_plug, lupperlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LeftUpperLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_Snarl_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarluppermulti" -niceName "SnarlUp Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftUpperLip_ctrl')
                            llipsnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(llipsnarl_multiplier, "LeftUpperLipSnarlUp_multiplier")
                            self.MDG2_mod.doIt()

                            llipsnarlmultiplier_fs = om2.MFnDependencyNode(llipsnarl_multiplier)
                            llipsnarlctrl_fs = om2.MFnDependencyNode(lupperlip_obj)

                            llipsnarltransy_plug = llipsnarlctrl_fs.findPlug("translateY", False)
                            llipsnarlmulti_plug = llipsnarlctrl_fs.findPlug("snarluppermulti", False)
                            llipsnarlmultiplierinp1y_plug = llipsnarlmultiplier_fs.findPlug("input1Y", False)
                            llipsnarlmultiplierinp2y_plug = llipsnarlmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(llipsnarltransy_plug, llipsnarlmultiplierinp1y_plug)
                            self.MDG2_mod.connect(llipsnarlmulti_plug, llipsnarlmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperLipSnarlUp_multiplier.outputY facialBlendShape.blendshape_Lip_Upper_Snarl_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftUpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftUpperLipSnarlUp_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_SnarlFront_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarlfrontmulti" -niceName "SnarlFront Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftUpperLip_ctrl')
                            llipsnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(llipsnarl_multiplier, "LeftUpperLipSnarlFront_multiplier")
                            self.MDG2_mod.doIt()

                            llipsnarlmultiplier_fs = om2.MFnDependencyNode(llipsnarl_multiplier)
                            llipsnarlctrl_fs = om2.MFnDependencyNode(lupperlip_obj)

                            llipsnarltransz_plug = llipsnarlctrl_fs.findPlug("translateZ", False)
                            llipsnarlmulti_plug = llipsnarlctrl_fs.findPlug("snarlfrontmulti", False)
                            llipsnarlmultiplierinp1z_plug = llipsnarlmultiplier_fs.findPlug("input1Z", False)
                            llipsnarlmultiplierinp2z_plug = llipsnarlmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(llipsnarltransz_plug, llipsnarlmultiplierinp1z_plug)
                            self.MDG2_mod.connect(llipsnarlmulti_plug, llipsnarlmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperLipSnarlFront_multiplier.outputZ facialBlendShape.blendshape_Lip_Upper_SnarlFront_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_LeftUpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftUpperLipSnarlFront_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftLowerLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_LeftLowerLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            llowerlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(llowerlip_str)[3:][:-3] == "Biped_LeftLowerLip_ctrl":
                                llowerlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_Snarl_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_SnarlFront_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftLowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftLowerLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_Snarl_L" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_SnarlFront_L" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftLowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                lupperlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lowerlip_multiplier, "LeftLowerLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                llowerlipmultiplier_fs = om2.MFnDependencyNode(lupperlip_multiplier)
                                llowerlipctrl_fs = om2.MFnDependencyNode(lupperlip_obj)

                                llowerlipplug = llowerlipctrl_fs.findPlug(str_attr_lowercase, False)
                                llowerlipmulti_plug = llowerlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                llowerlipmultiplierinp1y_plug = llowerlipmultiplier_fs.findPlug("input1Y", False)
                                llowerlipmultiplierinp2y_plug = llowerlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(llowerlipplug, llowerlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(llowerlipmulti_plug, llowerlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "LeftLowerLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_Snarl_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarllowermulti" -niceName "SnarlLow Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LeftLowerLip_ctrl')
                            llowersnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(llowersnarl_multiplier, "LeftLowerLipSnarlUp_multiplier")
                            self.MDG2_mod.doIt()

                            llowersnarlmultiplier_fs = om2.MFnDependencyNode(llowersnarl_multiplier)
                            llowersnarlctrl_fs = om2.MFnDependencyNode(llowerlip_obj)

                            llowersnarltransy_plug = llowersnarlctrl_fs.findPlug("translateY", False)
                            llowersnarlmulti_plug = llowersnarlctrl_fs.findPlug("snarllowermulti", False)
                            llowersnarlmultiplierinp1y_plug = llowersnarlmultiplier_fs.findPlug("input1Y", False)
                            llowersnarlmultiplierinp2y_plug = llowersnarlmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(llowersnarltransy_plug, llowersnarlmultiplierinp1y_plug)
                            self.MDG2_mod.connect(llowersnarlmulti_plug, llowersnarlmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerLipSnarlUp_multiplier.outputY facialBlendShape.blendshape_Lip_Lower_Snarl_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftLowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftLowerLipSnarlUp_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_SnarlFront_L"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarlfrontmulti" -niceName "SnarlFront Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftLowerLip_ctrl')
                            llowersnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(llowersnarl_multiplier, "LeftLowerLipSnarlFront_multiplier")
                            self.MDG2_mod.doIt()

                            llowersnarlmultiplier_fs = om2.MFnDependencyNode(llowersnarl_multiplier)
                            llowersnarlctrl_fs = om2.MFnDependencyNode(llowerlip_obj)

                            llowersnarltransz_plug = llowersnarlctrl_fs.findPlug("translateZ", False)
                            llowersnarlmulti_plug = llowersnarlctrl_fs.findPlug("snarlfrontmulti", False)
                            llowersnarlmultiplierinp1z_plug = llowersnarlmultiplier_fs.findPlug("input1Z", False)
                            llowersnarlmultiplierinp2z_plug = llowersnarlmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(llowersnarltransz_plug, llowersnarlmultiplierinp1z_plug)
                            self.MDG2_mod.connect(llowersnarlmulti_plug, llowersnarlmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerLipSnarlFront_multiplier.outputZ facialBlendShape.blendshape_Lip_Lower_SnarlFront_L')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_LeftLowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "LeftLowerLipSnarlFront_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightUpperLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightUpperLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rupperlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rupperlip_str)[3:][:-3] == "Biped_RightUpperLip_ctrl":
                                rupperlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_Snarl_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_SnarlFront_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightUpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightUpperLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Upper_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_Snarl_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Upper_SnarlFront_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightUpperLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rupperlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lowerlip_multiplier, "RightUpperLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rupperlipmultiplier_fs = om2.MFnDependencyNode(rupperlip_multiplier)
                                rupperlipctrl_fs = om2.MFnDependencyNode(rupperlip_obj)

                                rupperlipplug = rupperlipctrl_fs.findPlug(str_attr_lowercase, False)
                                rupperlipmulti_plug = rupperlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rupperlipmultiplierinp1y_plug = rupperlipmultiplier_fs.findPlug("input1Y", False)
                                rupperlipmultiplierinp2y_plug = rupperlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rupperlipplug, rupperlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rupperlipmulti_plug, rupperlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightUpperLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightUpperLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_Snarl_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarluppermulti" -niceName "SnarlUp Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightUpperLip_ctrl')
                            rlipsnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rlipsnarl_multiplier, "RightUpperLipSnarlUp_multiplier")
                            self.MDG2_mod.doIt()

                            rlipsnarlmultiplier_fs = om2.MFnDependencyNode(rlipsnarl_multiplier)
                            rlipsnarlctrl_fs = om2.MFnDependencyNode(rupperlip_obj)

                            rlipsnarltransy_plug = rlipsnarlctrl_fs.findPlug("translateY", False)
                            rlipsnarlmulti_plug = rlipsnarlctrl_fs.findPlug("snarluppermulti", False)
                            rlipsnarlmultiplierinp1y_plug = rlipsnarlmultiplier_fs.findPlug("input1Y", False)
                            rlipsnarlmultiplierinp2y_plug = rlipsnarlmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rlipsnarltransy_plug, rlipsnarlmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rlipsnarlmulti_plug, rlipsnarlmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperLipSnarlUp_multiplier.outputY facialBlendShape.blendshape_Lip_Upper_Snarl_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightUpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightUpperLipSnarlUp_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Upper_SnarlFront_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarlfrontmulti" -niceName "SnarlFront Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightUpperLip_ctrl')
                            rlipsnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rlipsnarl_multiplier, "RightUpperLipSnarlFront_multiplier")
                            self.MDG2_mod.doIt()

                            rlipsnarlmultiplier_fs = om2.MFnDependencyNode(rlipsnarl_multiplier)
                            rlipsnarlctrl_fs = om2.MFnDependencyNode(rupperlip_obj)

                            rlipsnarltransz_plug = rlipsnarlctrl_fs.findPlug("translateZ", False)
                            rlipsnarlmulti_plug = rlipsnarlctrl_fs.findPlug("snarlfrontmulti", False)
                            rlipsnarlmultiplierinp1z_plug = rlipsnarlmultiplier_fs.findPlug("input1Z", False)
                            rlipsnarlmultiplierinp2z_plug = rlipsnarlmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(rlipsnarltransz_plug, rlipsnarlmultiplierinp1z_plug)
                            self.MDG2_mod.connect(rlipsnarlmulti_plug, rlipsnarlmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperLipSnarlFront_multiplier.outputZ facialBlendShape.blendshape_Lip_Upper_SnarlFront_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_RightUpperLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightUpperLipSnarlFront_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightLowerLip_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightLowerLip_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rlowerlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rlowerlip_str)[3:][:-3] == "Biped_RightLowerLip_ctrl":
                                rlowerlip_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_Snarl_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_SnarlFront_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightLowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightLowerLip_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_Lip_Lower_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_Snarl_R" and not str(blendshape_str)[3:-3] == "blendshape_Lip_Lower_SnarlFront_R" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightLowerLip_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rupperlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(lowerlip_multiplier, "RightLowerLip{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rlowerlipmultiplier_fs = om2.MFnDependencyNode(lupperlip_multiplier)
                                rlowerlipctrl_fs = om2.MFnDependencyNode(lupperlip_obj)

                                rlowerlipplug = rlowerlipctrl_fs.findPlug(str_attr_lowercase, False)
                                rlowerlipmulti_plug = rlowerlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rlowerlipmultiplierinp1y_plug = rlowerlipmultiplier_fs.findPlug("input1Y", False)
                                rlowerlipmultiplierinp2y_plug = rlowerlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rlowerlipplug, rlowerlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rlowerlipmulti_plug, rlowerlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightLowerLip{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightLowerLip{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_Snarl_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarllowermulti" -niceName "SnarlLow Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightLowerLip_ctrl')
                            rlowersnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rlowersnarl_multiplier, "RightLowerLipSnarlUp_multiplier")
                            self.MDG2_mod.doIt()

                            rlowersnarlmultiplier_fs = om2.MFnDependencyNode(rlowersnarl_multiplier)
                            rlowersnarlctrl_fs = om2.MFnDependencyNode(rlowerlip_obj)

                            rlowersnarltransy_plug = rlowersnarlctrl_fs.findPlug("translateY", False)
                            rlowersnarlmulti_plug = rlowersnarlctrl_fs.findPlug("snarllowermulti", False)
                            rlowersnarlmultiplierinp1y_plug = rlowersnarlmultiplier_fs.findPlug("input1Y", False)
                            rlowersnarlmultiplierinp2y_plug = rlowersnarlmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rlowersnarltransy_plug, rlowersnarlmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rlowersnarlmulti_plug, rlowersnarlmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerLipSnarlUp_multiplier.outputY facialBlendShape.blendshape_Lip_Lower_Snarl_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightLowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightLowerLipSnarlUp_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Lip_Lower_SnarlFront_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "snarlfrontmulti" -niceName "SnarlFront Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightLowerLip_ctrl')
                            rlowersnarl_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rlowersnarl_multiplier, "RightLowerLipSnarlFront_multiplier")
                            self.MDG2_mod.doIt()

                            rlowersnarlmultiplier_fs = om2.MFnDependencyNode(rlowersnarl_multiplier)
                            rlowersnarlctrl_fs = om2.MFnDependencyNode(rlowerlip_obj)

                            rlowersnarltransz_plug = rlowersnarlctrl_fs.findPlug("translateZ", False)
                            rlowersnarlmulti_plug = rlowersnarlctrl_fs.findPlug("snarlfrontmulti", False)
                            rlowersnarlmultiplierinp1z_plug = rlowersnarlmultiplier_fs.findPlug("input1Z", False)
                            rlowersnarlmultiplierinp2z_plug = rlowersnarlmultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(rlowersnarltransz_plug, rlowersnarlmultiplierinp1z_plug)
                            self.MDG2_mod.connect(rlowersnarlmulti_plug, rlowersnarlmultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerLipSnarlFront_multiplier.outputZ facialBlendShape.blendshape_Lip_Lower_SnarlFront_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_RightLowerLip_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightLowerLipSnarlFront_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_LeftLipCorner_ctrl"):
                         facialctrl_sl_ls.add("Biped_LeftLipCorner_ctrl")

                         for index in range(facialctrl_sl_ls.length()):
                             lcornerlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                             if str(lcornerlip_str)[3:][:-3] == "Biped_LeftLipCorner_ctrl":
                                 lcornerlip_str = facialctrl_sl_ls.getDependNode(index)

                         for index in range(facialblend_sl_ls.length()):
                             blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                             blendshape_obj = facialblend_sl_ls.getDependNode(index)
                             if str(blendshape_str)[3:24] == "blendshape_LipCorner_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Dimple_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Frown_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Smile_L" and  blendshape_obj.hasFn(om2.MFn.kTransform):
                                 str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                 str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                 self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_LeftLipCorner_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                         self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_LeftLipCorner_ctrl')

                         for index in range(facialblend_sl_ls.length()):
                             blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                             blendshape_obj = facialblend_sl_ls.getDependNode(index)
                             if str(blendshape_str)[3:24] == "blendshape_LipCorner_" and str(blendshape_str)[-5:-3] == "_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Dimple_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Frown_L" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Smile_L" and  blendshape_obj.hasFn(om2.MFn.kTransform):
                                 str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                 str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                 self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftLipCorner_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                 lcornerlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                 self.MDG2_mod.renameNode(lcornerlip_multiplier, "LeftLipCorner{0}_multiplier".format(str_attr_upperlowercase))
                                 self.MDG2_mod.doIt()

                                 lcornerlipmultiplier_fs = om2.MFnDependencyNode(lcornerlip_multiplier)
                                 lcornerlipctrl_fs = om2.MFnDependencyNode(lcornerlip_str)

                                 lcornerlipplug = lcornerlipctrl_fs.findPlug(str_attr_lowercase, False)
                                 lcornerlipmulti_plug = lcornerlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                 lcornerlipmultiplierinp1y_plug = lcornerlipmultiplier_fs.findPlug("input1Y", False)
                                 lcornerlipmultiplierinp2y_plug = lcornerlipmultiplier_fs.findPlug("input2Y", False)

                                 self.MDG2_mod.connect(lcornerlipplug, lcornerlipmultiplierinp1y_plug)
                                 self.MDG2_mod.connect(lcornerlipmulti_plug, lcornerlipmultiplierinp2y_plug)
                                 self.MDG2_mod.commandToExecute('connectAttr -force LeftLipCorner{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                 self.MDG2_mod.commandToExecute('setAttr "LeftLipCorner{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                 self.MDG2_mod.doIt()

                         if cmds.objExists("blendshape_LipCorner_Dimple_L"):
                             self.MDG2_mod.commandToExecute('addAttr -longName "dimplemulti" -niceName "Dimple Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftLipCorner_ctrl')
                             lcornerdimple_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                             self.MDG2_mod.renameNode(lcornerdimple_multiplier, "LeftCornerDimple_multiplier")
                             self.MDG2_mod.doIt()

                             lcornerdimplemultiplier_fs = om2.MFnDependencyNode(lcornerdimple_multiplier)
                             lcornerdimplectrl_fs = om2.MFnDependencyNode(lcornerlip_str)

                             lcornerdimpletransx_plug = lcornerdimplectrl_fs.findPlug("translateX", False)
                             lcornerdimplemulti_plug = lcornerdimplectrl_fs.findPlug("dimplemulti", False)
                             lcornerdimplemultiplierinp1x_plug = lcornerdimplemultiplier_fs.findPlug("input1X", False)
                             lcornerdimplemultiplierinp2x_plug = lcornerdimplemultiplier_fs.findPlug("input2X", False)

                             self.MDG2_mod.connect(lcornerdimpletransx_plug, lcornerdimplemultiplierinp1x_plug)
                             self.MDG2_mod.connect(lcornerdimplemulti_plug, lcornerdimplemultiplierinp2x_plug)
                             self.MDG2_mod.commandToExecute('connectAttr -force LeftCornerDimple_multiplier.outputX facialBlendShape.blendshape_LipCorner_Dimple_L')
                             self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_LeftLipCorner_ctrl')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerDimple_multiplier.operation" 1')
                             self.MDG2_mod.doIt()

                         if cmds.objExists("blendshape_LipCorner_Smile_L"):
                             self.MDG2_mod.commandToExecute('addAttr -longName "smilemulti" -niceName "Smile Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_LeftLipCorner_ctrl')
                             lcornersmile_condition = self.MDG2_mod.createNode("condition")
                             lcornersmile_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                             self.MDG2_mod.renameNode(lcornersmile_condition, "LeftCornerSmile_condition")
                             self.MDG2_mod.renameNode(lcornersmile_multiplier, "LeftCornerSmile_multiplier")
                             self.MDG2_mod.doIt()

                             lcornersmilecondition_fs = om2.MFnDependencyNode(lcornersmile_condition)
                             lcornersmilemultiplier_fs = om2.MFnDependencyNode(lcornersmile_multiplier)
                             lcornersmilectrl_fs = om2.MFnDependencyNode(lcornerlip_str)

                             lcornersmiletransy_plug = lcornersmilectrl_fs.findPlug("translateY", False)
                             lcornersmilecondcolortg_plug = lcornersmilecondition_fs.findPlug("colorIfTrueG", False)
                             lcornersmilecondfirstterm_plug = lcornersmilecondition_fs.findPlug("firstTerm", False)
                             lcornersmilecondotp_plug = lcornersmilecondition_fs.findPlug("outColorG", False)
                             lcornersmilemulti_plug = lcornersmilectrl_fs.findPlug("smilemulti", False)
                             lcornersmilemultiplierinp1y_plug = lcornersmilemultiplier_fs.findPlug("input1Y", False)
                             lcornersmilemultiplierinp2y_plug = lcornersmilemultiplier_fs.findPlug("input2Y", False)

                             self.MDG2_mod.connect(lcornersmiletransy_plug, lcornersmilecondcolortg_plug)
                             self.MDG2_mod.connect(lcornersmiletransy_plug, lcornersmilecondfirstterm_plug)
                             self.MDG2_mod.connect(lcornersmilecondotp_plug, lcornersmilemultiplierinp1y_plug)
                             self.MDG2_mod.connect(lcornersmilemulti_plug, lcornersmilemultiplierinp2y_plug)
                             self.MDG2_mod.commandToExecute('connectAttr -force LeftCornerSmile_multiplier.outputY facialBlendShape.blendshape_LipCorner_Smile_L')
                             self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftLipCorner_ctrl')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerSmile_multiplier.operation" 1')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerSmile_condition.secondTerm" 0')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerSmile_condition.operation" 2')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerSmile_condition.colorIfFalseG" 0')
                             self.MDG2_mod.doIt()

                         if cmds.objExists("blendshape_LipCorner_Frown_L"):
                             self.MDG2_mod.commandToExecute('addAttr -longName "frownmulti" -niceName "Frown Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_LeftLipCorner_ctrl')
                             lcornerfrown_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                             lcornerfrown_condition = self.MDG2_mod.createNode("condition")
                             self.MDG2_mod.renameNode(lcornerfrown_multiplier, "LeftCornerFrown_multiplier")
                             self.MDG2_mod.renameNode(lcornerfrown_condition, "LeftCornerFrown_condition")
                             self.MDG2_mod.doIt()

                             lcornerfrowncondition_fs = om2.MFnDependencyNode(lcornerfrown_condition)
                             lcornerfrownmultiplier_fs = om2.MFnDependencyNode(lcornerfrown_multiplier)
                             lcornerfrownctrl_fs = om2.MFnDependencyNode(lcornerlip_str)

                             lcornerfrowntransy_plug = lcornersmilectrl_fs.findPlug("translateY", False)
                             lcornerfrowncondcolortg_plug = lcornerfrowncondition_fs.findPlug("colorIfTrueG", False)
                             lcornerfrowncondfirstterm_plug = lcornerfrowncondition_fs.findPlug("firstTerm", False)
                             lcornerfrowncondotp_plug = lcornerfrowncondition_fs.findPlug("outColorG", False)
                             lcornerfrownmulti_plug = lcornerfrownctrl_fs.findPlug("frownmulti", False)
                             lcornerfrownmultiplierinp1y_plug = lcornerfrownmultiplier_fs.findPlug("input1Y", False)
                             lcornerfrownmultiplierinp2y_plug = lcornerfrownmultiplier_fs.findPlug("input2Y", False)

                             self.MDG2_mod.connect(lcornerfrowntransy_plug, lcornerfrowncondcolortg_plug)
                             self.MDG2_mod.connect(lcornerfrowntransy_plug, lcornerfrowncondfirstterm_plug)
                             self.MDG2_mod.connect(lcornerfrowncondotp_plug, lcornerfrownmultiplierinp1y_plug)
                             self.MDG2_mod.connect(lcornerfrownmulti_plug, lcornerfrownmultiplierinp2y_plug)
                             self.MDG2_mod.commandToExecute('connectAttr -force LeftCornerFrown_multiplier.outputY facialBlendShape.blendshape_LipCorner_Frown_L')
                             self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_LeftLipCorner_ctrl')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerFrown_multiplier.operation" 1')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerFrown_condition.secondTerm" 0')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerFrown_condition.operation" 4')
                             self.MDG2_mod.commandToExecute('setAttr "LeftCornerFrown_condition.colorIfFalseG" 0')
                             self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_RightLipCorner_ctrl"):
                        facialctrl_sl_ls.add("Biped_RightLipCorner_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            rcornerlip_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(rcornerlip_str)[3:][:-3] == "Biped_RightLipCorner_ctrl":
                                rcornerlip_str = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_LipCorner_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Dimple_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Frown_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Smile_R" and  blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_RightLipCorner_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_RightLipCorner_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:24] == "blendshape_LipCorner_" and str(blendshape_str)[-5:-3] == "_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Dimple_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Frown_R" and not str(blendshape_str)[3:-3] == "blendshape_LipCorner_Smile_R" and  blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[24:-5].lower()
                                str_attr_upperlowercase = str(blendshape_str)[24:-5]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightLipCorner_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                rcornerlip_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(rcornerlip_multiplier, "RightLipCorner{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                rcornerlipmultiplier_fs = om2.MFnDependencyNode(rcornerlip_multiplier)
                                rcornerlipctrl_fs = om2.MFnDependencyNode(rcornerlip_str)

                                rcornerlipplug = rcornerlipctrl_fs.findPlug(str_attr_lowercase, False)
                                rcornerlipmulti_plug = rcornerlipctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                rcornerlipmultiplierinp1y_plug = rcornerlipmultiplier_fs.findPlug("input1Y", False)
                                rcornerlipmultiplierinp2y_plug = rcornerlipmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(rcornerlipplug, rcornerlipmultiplierinp1y_plug)
                                self.MDG2_mod.connect(rcornerlipmulti_plug, rcornerlipmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force RightLipCorner{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "RightLipCorner{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_LipCorner_Dimple_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "dimplemulti" -niceName "Dimple Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightLipCorner_ctrl')
                            rcornerdimple_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rcornerdimple_multiplier, "RightCornerDimple_multiplier")
                            self.MDG2_mod.doIt()

                            rcornerdimplemultiplier_fs = om2.MFnDependencyNode(rcornerdimple_multiplier)
                            rcornerdimplectrl_fs = om2.MFnDependencyNode(rcornerlip_str)

                            rcornerdimpletransx_plug = rcornerdimplectrl_fs.findPlug("translateX", False)
                            rcornerdimplemulti_plug = rcornerdimplectrl_fs.findPlug("dimplemulti", False)
                            rcornerdimplemultiplierinp1x_plug = rcornerdimplemultiplier_fs.findPlug("input1X", False)
                            rcornerdimplemultiplierinp2x_plug = rcornerdimplemultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(rcornerdimpletransx_plug, rcornerdimplemultiplierinp1x_plug)
                            self.MDG2_mod.connect(rcornerdimplemulti_plug, rcornerdimplemultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCornerDimple_multiplier.outputX facialBlendShape.blendshape_LipCorner_Dimple_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_RightLipCorner_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerDimple_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_LipCorner_Smile_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "smilemulti" -niceName "Smile Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_RightLipCorner_ctrl')
                            rcornersmile_condition = self.MDG2_mod.createNode("condition")
                            rcornersmile_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(rcornersmile_condition, "RightCornerSmile_condition")
                            self.MDG2_mod.renameNode(rcornersmile_multiplier, "RightCornerSmile_multiplier")
                            self.MDG2_mod.doIt()

                            rcornersmilecondition_fs = om2.MFnDependencyNode(rcornersmile_condition)
                            rcornersmilemultiplier_fs = om2.MFnDependencyNode(rcornersmile_multiplier)
                            rcornersmilectrl_fs = om2.MFnDependencyNode(rcornerlip_str)

                            rcornersmiletransy_plug = rcornersmilectrl_fs.findPlug("translateY", False)
                            rcornersmilecondcolortg_plug = rcornersmilecondition_fs.findPlug("colorIfTrueG", False)
                            rcornersmilecondfirstterm_plug = rcornersmilecondition_fs.findPlug("firstTerm", False)
                            rcornersmilecondotp_plug = rcornersmilecondition_fs.findPlug("outColorG", False)
                            rcornersmilemulti_plug = rcornersmilectrl_fs.findPlug("smilemulti", False)
                            rcornersmilemultiplierinp1y_plug = rcornersmilemultiplier_fs.findPlug("input1Y", False)
                            rcornersmilemultiplierinp2y_plug = rcornersmilemultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rcornersmiletransy_plug, rcornersmilecondcolortg_plug)
                            self.MDG2_mod.connect(rcornersmiletransy_plug, rcornersmilecondfirstterm_plug)
                            self.MDG2_mod.connect(rcornersmilecondotp_plug, rcornersmilemultiplierinp1y_plug)
                            self.MDG2_mod.connect(rcornersmilemulti_plug, rcornersmilemultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCornerSmile_multiplier.outputY facialBlendShape.blendshape_LipCorner_Smile_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightLipCorner_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerSmile_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerSmile_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerSmile_condition.operation" 2')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerSmile_condition.colorIfFalseG" 0')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_LipCorner_Frown_R"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "frownmulti" -niceName "Frown Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_RightLipCorner_ctrl')
                            rcornerfrown_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            rcornerfrown_condition = self.MDG2_mod.createNode("condition")
                            self.MDG2_mod.renameNode(rcornerfrown_multiplier, "RightCornerFrown_multiplier")
                            self.MDG2_mod.renameNode(rcornerfrown_condition, "RightCornerFrown_condition")
                            self.MDG2_mod.doIt()

                            rcornerfrowncondition_fs = om2.MFnDependencyNode(rcornerfrown_condition)
                            rcornerfrownmultiplier_fs = om2.MFnDependencyNode(rcornerfrown_multiplier)
                            rcornerfrownctrl_fs = om2.MFnDependencyNode(rcornerlip_str)

                            rcornerfrowntransy_plug = rcornersmilectrl_fs.findPlug("translateY", False)
                            rcornerfrowncondcolortg_plug = rcornerfrowncondition_fs.findPlug("colorIfTrueG", False)
                            rcornerfrowncondfirstterm_plug = rcornerfrowncondition_fs.findPlug("firstTerm", False)
                            rcornerfrowncondotp_plug = rcornerfrowncondition_fs.findPlug("outColorG", False)
                            rcornerfrownmulti_plug = rcornerfrownctrl_fs.findPlug("frownmulti", False)
                            rcornerfrownmultiplierinp1y_plug = rcornerfrownmultiplier_fs.findPlug("input1Y", False)
                            rcornerfrownmultiplierinp2y_plug = rcornerfrownmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(rcornerfrowntransy_plug, rcornerfrowncondcolortg_plug)
                            self.MDG2_mod.connect(rcornerfrowntransy_plug, rcornerfrowncondfirstterm_plug)
                            self.MDG2_mod.connect(rcornerfrowncondotp_plug, rcornerfrownmultiplierinp1y_plug)
                            self.MDG2_mod.connect(rcornerfrownmulti_plug, rcornerfrownmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightCornerFrown_multiplier.outputY facialBlendShape.blendshape_LipCorner_Frown_R')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 1 -enableTranslationY 1 1 Biped_RightLipCorner_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerFrown_multiplier.operation" 1')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerFrown_condition.secondTerm" 0')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerFrown_condition.operation" 4')
                            self.MDG2_mod.commandToExecute('setAttr "RightCornerFrown_condition.colorIfFalseG" 0')
                            self.MDG2_mod.doIt()

                    if cmds.objExists("Biped_Jaw_ctrl"):
                        facialctrl_sl_ls.add("Biped_Jaw_ctrl")

                        for index in range(facialctrl_sl_ls.length()):
                            jaw_str = facialctrl_sl_ls.getSelectionStrings(index)
                            if str(jaw_str)[3:][:-3] == "Biped_Jaw_ctrl":
                                jaw_obj = facialctrl_sl_ls.getDependNode(index)

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:18] == "blendshape_Jaw_" and not str(blendshape_str)[-8:-3] == "_Open" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[18:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[18:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}" -niceName "{1}" -attributeType double -keyable true -defaultValue 0 -minValue -1 -maxValue 1 Biped_Jaw_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                        self.MDG2_mod.commandToExecute('addAttr -longName "multiplier" -niceName "Multiplier" -attributeType "enum" -en "__________:" -keyable true Biped_Jaw_ctrl')

                        for index in range(facialblend_sl_ls.length()):
                            blendshape_str = facialblend_sl_ls.getSelectionStrings(index)
                            blendshape_obj = facialblend_sl_ls.getDependNode(index)
                            if str(blendshape_str)[3:18] == "blendshape_Jaw_" and not str(blendshape_str)[-8:-3] == "_Open" and not str(blendshape_str)[-8:-3] == "_Left" and not str(blendshape_str)[-9:-3] == "_Front" and blendshape_obj.hasFn(om2.MFn.kTransform):
                                str_attr_lowercase = str(blendshape_str)[18:-3].lower()
                                str_attr_upperlowercase = str(blendshape_str)[18:-3]
                                self.MDG2_mod.commandToExecute('addAttr -longName "{0}multi" -niceName "{1} Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Jaw_ctrl'.format(str_attr_lowercase, str_attr_upperlowercase))
                                jaw_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                                self.MDG2_mod.renameNode(jaw_multiplier, "Jaw{0}_multiplier".format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                                jawmultiplier_fs = om2.MFnDependencyNode(jaw_multiplier)
                                jawctrl_fs = om2.MFnDependencyNode(jaw_obj)

                                jawplug = jawctrl_fs.findPlug(str_attr_lowercase, False)
                                jawmulti_plug = jawctrl_fs.findPlug(str_attr_lowercase + "multi", False)
                                jawmultiplierinp1y_plug = jawmultiplier_fs.findPlug("input1Y", False)
                                jawmultiplierinp2y_plug = jawmultiplier_fs.findPlug("input2Y", False)

                                self.MDG2_mod.connect(jawplug, jawmultiplierinp1y_plug)
                                self.MDG2_mod.connect(jawmulti_plug, jawmultiplierinp2y_plug)
                                self.MDG2_mod.commandToExecute('connectAttr -force Jaw{0}_multiplier.outputY facialBlendShape.{1}'.format(str_attr_upperlowercase, str(blendshape_str)[3:][:-3]))
                                self.MDG2_mod.commandToExecute('setAttr "Jaw{0}_multiplier.operation" 1'.format(str_attr_upperlowercase))
                                self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Jaw_Open"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "jawdropmulti" -niceName "JawDrop Multi" -attributeType double -keyable true -defaultValue -1 -maxValue -1 Biped_Jaw_ctrl')
                            jawdrop_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(jawdrop_multiplier, "JawDrop_multiplier")
                            self.MDG2_mod.doIt()

                            jawdropmultiplier_fs = om2.MFnDependencyNode(jawdrop_multiplier)
                            jawdropctrl_fs = om2.MFnDependencyNode(jaw_obj)

                            jawdroptransy_plug = jawdropctrl_fs.findPlug("translateY", False)
                            jawdropmulti_plug = jawdropctrl_fs.findPlug("jawdropmulti", False)
                            jawdropmultiplierinp1y_plug = jawdropmultiplier_fs.findPlug("input1Y", False)
                            jawdropmultiplierinp2y_plug = jawdropmultiplier_fs.findPlug("input2Y", False)

                            self.MDG2_mod.connect(jawdroptransy_plug, jawdropmultiplierinp1y_plug)
                            self.MDG2_mod.connect(jawdropmulti_plug, jawdropmultiplierinp2y_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force JawDrop_multiplier.outputY facialBlendShape.blendshape_Jaw_Open')
                            self.MDG2_mod.commandToExecute('transformLimits -translationY -1 0 -enableTranslationY 1 1 Biped_Jaw_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "JawDrop_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Jaw_Left"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "moveleftrightmulti" -niceName "MoveLeftRight Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Jaw_ctrl')
                            jawmove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(jawmove_multiplier, "JawLeftRight_multiplier")
                            self.MDG2_mod.doIt()

                            jawmovemultiplier_fs = om2.MFnDependencyNode(jawmove_multiplier)
                            jawmovectrl_fs = om2.MFnDependencyNode(jaw_obj)

                            jawmovetransx_plug = jawmovectrl_fs.findPlug("translateX", False)
                            jawmovemulti_plug = jawmovectrl_fs.findPlug("moveleftrightmulti", False)
                            jawmovemultiplierinp1x_plug = jawmovemultiplier_fs.findPlug("input1X", False)
                            jawmovemultiplierinp2x_plug = jawmovemultiplier_fs.findPlug("input2X", False)

                            self.MDG2_mod.connect(jawmovetransx_plug, jawmovemultiplierinp1x_plug)
                            self.MDG2_mod.connect(jawmovemulti_plug, jawmovemultiplierinp2x_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force JawLeftRight_multiplier.outputX facialBlendShape.blendshape_Jaw_Left')
                            self.MDG2_mod.commandToExecute('transformLimits -translationX -1 1 -enableTranslationX 1 1 Biped_Jaw_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "JawLeftRight_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

                        if cmds.objExists("blendshape_Jaw_Front"):
                            self.MDG2_mod.commandToExecute('addAttr -longName "movefrontbackmulti" -niceName "MoveFrontBack Multi" -attributeType double -keyable true -defaultValue 1 -minValue 1 Biped_Jaw_ctrl')
                            jawmove_multiplier = self.MDG2_mod.createNode("multiplyDivide")
                            self.MDG2_mod.renameNode(jawmove_multiplier, "JawFrontBack_multiplier")
                            self.MDG2_mod.doIt()

                            jawmovemultiplier_fs = om2.MFnDependencyNode(jawmove_multiplier)
                            jawmovectrl_fs = om2.MFnDependencyNode(jaw_obj)

                            jawmovetransz_plug = jawmovectrl_fs.findPlug("translateZ", False)
                            jawmovemulti_plug = jawmovectrl_fs.findPlug("movefrontbackmulti", False)
                            jawmovemultiplierinp1z_plug = jawmovemultiplier_fs.findPlug("input1Z", False)
                            jawmovemultiplierinp2z_plug = jawmovemultiplier_fs.findPlug("input2Z", False)

                            self.MDG2_mod.connect(jawmovetransz_plug, jawmovemultiplierinp1z_plug)
                            self.MDG2_mod.connect(jawmovemulti_plug, jawmovemultiplierinp2z_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force JawFrontBack_multiplier.outputZ facialBlendShape.blendshape_Jaw_Front')
                            self.MDG2_mod.commandToExecute('transformLimits -translationZ -1 1 -enableTranslationZ 1 1 Biped_Jaw_ctrl')
                            self.MDG2_mod.commandToExecute('setAttr "JawFrontBack_multiplier.operation" 1')
                            self.MDG2_mod.doIt()

            for index in range(fklarm_sl_ls.length()):
                jnt_obj = fklarm_sl_ls.getDependNode(index)
                jnt_string = fklarm_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    larmctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    larmctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(larmctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(larmctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    rarmmultMatrix_fs = om2.MFnDependencyNode(larmctrl_multMatrix)
                    rarmdecomposeMatrix_fs = om2.MFnDependencyNode(larmctrl_decomposeMatrix)
                    larmjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    rarmmultMatrixSum_plug = rarmmultMatrix_fs.findPlug("matrixSum", False)
                    rarmdecomposeInpMatrix_plug = rarmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rarmdecomposeOtpTrans_plug = rarmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rarmdecomposeOtpRot_plug = rarmdecomposeMatrix_fs.findPlug("outputRotate", False)
                    larmjntTrans_plug = larmjnt_fs.findPlug("translate", False)
                    larmjntRot_plug = larmjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(rarmmultMatrixSum_plug, rarmdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rarmdecomposeOtpTrans_plug, larmjntTrans_plug)
                    self.MDG2_mod.connect(rarmdecomposeOtpRot_plug, larmjntRot_plug)

                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

            fklarm_sl_ls = om2.MSelectionList()
            fklarm_sl_ls.add("FkLeftArm")
            fklarm_sl_ls.add("FkLeftForeArm")
            fklarm_sl_ls.add("FkLeftHand")

            iklarm_sl_ls = om2.MSelectionList()
            iklarm_sl_ls.add("IkLeftArm")
            iklarm_sl_ls.add("IkLeftForeArm")
            iklarm_sl_ls.add("IkLeftHand")

            noflipiklarm_sl_ls = om2.MSelectionList()
            noflipiklarm_sl_ls.add("IkNoFlipLeftArm")
            noflipiklarm_sl_ls.add("IkNoFlipLeftForeArm")
            noflipiklarm_sl_ls.add("IkNoFlipLeftHand")

            pviklarm_sl_ls = om2.MSelectionList()
            pviklarm_sl_ls.add("IkPVLeftArm")
            pviklarm_sl_ls.add("IkPVLeftForeArm")
            pviklarm_sl_ls.add("IkPVLeftHand")

            if cmds.objExists("NoFlipLeftHand_Ik") or self.autostretch.currentIndex() == 1:

                lhandoptions_sl_ls = om2.MSelectionList()
                lhandoptions_sl_ls.add("Biped_LeftHandOptions_ctrl")
                lhandoptions_obj = lhandoptions_sl_ls.getDependNode(0)

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "armcontrolsvis" -niceName "Arm Controls Vis" -attributeType bool -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkLeftArm_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkLeftForeArm_ctrl')
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftHandOptions_ctrl.armcontrolsvis LeftArmIkCluster_grp.visibility')
                self.MDG2_mod.doIt()

            if cmds.objExists("NoFlipLeftHand_Ik") and cmds.objExists("PVLeftHand_Ik"):
                self.MDG2_mod.commandToExecute('addAttr -longName "fkik" -niceName "Fk/Ik" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "elbowswitch" -niceName "Auto/Manual Elbow" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftHandOptions_ctrl')
                self.MDG2_mod.doIt()

            for index in range(larm_sl_ls.length()):
                fkjnt_obj = fklarm_sl_ls.getDependNode(index)

                ikjnt_obj = iklarm_sl_ls.getDependNode(index)
                ikjnt_string = iklarm_sl_ls.getSelectionStrings(index)

                bindjnt_obj = larm_sl_ls.getDependNode(index)
                bindjnt_string = larm_sl_ls.getSelectionStrings(index)

                noflipjnt_obj = noflipiklarm_sl_ls.getDependNode(index)
                noflipjnt_string = noflipiklarm_sl_ls.getSelectionStrings(index)

                pvjnt_obj = pviklarm_sl_ls.getDependNode(index)
                pvjnt_string = pviklarm_sl_ls.getSelectionStrings(index)

                if bindjnt_obj.hasFn(om2.MFn.kJoint):
                    if cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3])) != 0:
                        jointort_xattr = cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]))
                        jointort_yattr = cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]))
                        jointort_zattr = cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]))

                        cmds.setAttr("{0}.rotateX".format(str(bindjnt_string)[3:][:-3]), jointort_xattr)
                        cmds.setAttr("{0}.rotateY".format(str(bindjnt_string)[3:][:-3]), jointort_yattr)
                        cmds.setAttr("{0}.rotateZ".format(str(bindjnt_string)[3:][:-3]), jointort_zattr)

                        cmds.setAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]), 0)

                    armjoint_fs = om2.MFnDependencyNode(bindjnt_obj)
                    fkarmjoint_fs = om2.MFnDependencyNode(fkjnt_obj)

                    armjointtransinp_plug = armjoint_fs.findPlug("translate", False)
                    armjointrotinp_plug = armjoint_fs.findPlug("rotate", False)
                    fkarmjointtransotp_plug = fkarmjoint_fs.findPlug("translate", False)
                    fkarmjointrototp_plug = fkarmjoint_fs.findPlug("rotate", False)

                    if cmds.objExists("NoFlipLeftHand_Ik") and cmds.objExists("PVLeftHand_Ik"):

                        lhandoptions_fs = om2.MFnDependencyNode(lhandoptions_obj)
                        lhandoptionsfkik_plug = lhandoptions_fs.findPlug("fkik", False)
                        lhandoptionselbowswitch_plug = lhandoptions_fs.findPlug("elbowswitch", False)

                        armrotblendnode = self.MDG2_mod.createNode("blendColors")
                        armtransblendnode = self.MDG2_mod.createNode("blendColors")
                        # armjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        # self.MDG2_mod.renameNode(armjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(armrotblendnode, str(bindjnt_string)[2:][:-3] + "Rot_blend")
                        self.MDG2_mod.renameNode(armtransblendnode, str(bindjnt_string)[2:][:-3]+"Trans_blend")

                        armrotblendnode_fs = om2.MFnDependencyNode(armrotblendnode)
                        armtransblendnode_fs = om2.MFnDependencyNode(armtransblendnode)
                        # armdecomposeMatrix_fs = om2.MFnDependencyNode(armjoint_decomposeMatrix)
                        ikarmjoint_fs = om2.MFnDependencyNode(ikjnt_obj)

                        # armdecomposeInpMatrix_plug = armdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        # armdecomposeOtpRot_plug = armdecomposeMatrix_fs.findPlug("outputRotate", False)
                        # armdecomposeOtpTrans_plug = armdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        armrotblendnodeinp1_plug = armrotblendnode_fs.findPlug("color1", False)
                        armrotblendnodeinp2_plug = armrotblendnode_fs.findPlug("color2", False)
                        armrotblendnodeotp_plug = armrotblendnode_fs.findPlug("output", False)
                        armrotblendnodeblender_plug = armrotblendnode_fs.findPlug("blender", False)
                        armtransblendnodeinp1_plug = armtransblendnode_fs.findPlug("color1", False)
                        armtransblendnodeinp2_plug = armtransblendnode_fs.findPlug("color2", False)
                        armtransblendnodeotp_plug = armtransblendnode_fs.findPlug("output", False)
                        armtransblendnodeblender_plug = armtransblendnode_fs.findPlug("blender", False)
                        # ikarmjointrototp_plug = ikarmjoint_fs.findPlug("matrix", False)
                        ikarmjointinpTrans_plug = ikarmjoint_fs.findPlug("translate", False)
                        ikarmjointinpRot_plug = ikarmjoint_fs.findPlug("jointOrient", False)

                        # self.MDG2_mod.connect(ikarmjointrototp_plug, armdecomposeInpMatrix_plug)
                        # self.MDG2_mod.connect(armdecomposeOtpRot_plug, armrotblendnodeinp1_plug)
                        # self.MDG2_mod.connect(armdecomposeOtpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(ikarmjointinpRot_plug, armrotblendnodeinp1_plug)
                        # self.MDG2_mod.connect(ikarmjointtransotp_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(ikarmjointinpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(fkarmjointrototp_plug, armrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(fkarmjointtransotp_plug, armtransblendnodeinp2_plug)
                        self.MDG2_mod.connect(armrotblendnodeotp_plug, armjointrotinp_plug)
                        self.MDG2_mod.connect(armtransblendnodeotp_plug, armjointtransinp_plug)
                        self.MDG2_mod.connect(lhandoptionsfkik_plug, armrotblendnodeblender_plug)
                        self.MDG2_mod.connect(lhandoptionsfkik_plug, armtransblendnodeblender_plug)

                        armrotblendnode = self.MDG2_mod.createNode("blendColors")
                        armtransblendnode = self.MDG2_mod.createNode("blendColors")
                        nofliparmjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        pvarmjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        self.MDG2_mod.renameNode(nofliparmjoint_decomposeMatrix, str(noflipjnt_string)[2:][:-3]+"Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(pvarmjoint_decomposeMatrix, str(pvjnt_string)[2:][:-3]+"Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(armrotblendnode, str(bindjnt_string)[2:][:-3]+"Rot_elbowblend")
                        self.MDG2_mod.renameNode(armtransblendnode, str(bindjnt_string)[2:][:-3]+"Trans_elbowblend")

                        armrotblendnode_fs = om2.MFnDependencyNode(armrotblendnode)
                        armtransblendnode_fs = om2.MFnDependencyNode(armtransblendnode)
                        nofliparmdecomposeMatrix_fs = om2.MFnDependencyNode(nofliparmjoint_decomposeMatrix)
                        pvarmdecomposeMatrix_fs = om2.MFnDependencyNode(pvarmjoint_decomposeMatrix)
                        noflipikarmjoint_fs = om2.MFnDependencyNode(noflipjnt_obj)
                        pvikarmjoint_fs = om2.MFnDependencyNode(pvjnt_obj)
                        pvikarmctrl_fs = om2.MFnDependencyNode(self.pvlelbowctrl_tn)

                        nofliparmdecomposeInpMatrix_plug = nofliparmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        nofliparmdecomposeOtpRot_plug = nofliparmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        nofliparmdecomposeOtpTrans_plug = nofliparmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvarmdecomposeInpMatrix_plug = pvarmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        pvarmdecomposeOtpRot_plug = pvarmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        pvarmdecomposeOtpTrans_plug = pvarmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        armrotblendnodeinp1_plug = armrotblendnode_fs.findPlug("color1", False)
                        armrotblendnodeinp2_plug = armrotblendnode_fs.findPlug("color2", False)
                        armrotblendnodeotp_plug = armrotblendnode_fs.findPlug("output", False)
                        armrotblendnodeblender_plug = armrotblendnode_fs.findPlug("blender", False)
                        armtransblendnodeinp1_plug = armtransblendnode_fs.findPlug("color1", False)
                        armtransblendnodeinp2_plug = armtransblendnode_fs.findPlug("color2", False)
                        armtransblendnodeotp_plug = armtransblendnode_fs.findPlug("output", False)
                        armtransblendnodeblender_plug = armtransblendnode_fs.findPlug("blender", False)
                        noflipikarmjointotp_plug = noflipikarmjoint_fs.findPlug("matrix", False)
                        pvikarmjointotp_plug = pvikarmjoint_fs.findPlug("matrix", False)
                        pvikarmctrlVis_plug = pvikarmctrl_fs.findPlug("visibility", False)

                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 1 Biped_FkLeftArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 0 Biped_FkLeftArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_FkLeftArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 0 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 1 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.connect(noflipikarmjointotp_plug, nofliparmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(pvikarmjointotp_plug, pvarmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(pvarmdecomposeOtpRot_plug, armrotblendnodeinp1_plug)
                        self.MDG2_mod.connect(pvarmdecomposeOtpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(nofliparmdecomposeOtpRot_plug, armrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(nofliparmdecomposeOtpTrans_plug, armtransblendnodeinp2_plug)
                        if not str(ikjnt_string)[3:-3] == "IkLeftHand":
                            self.MDG2_mod.connect(armrotblendnodeotp_plug, ikarmjointinpRot_plug)
                        self.MDG2_mod.connect(armtransblendnodeotp_plug, ikarmjointinpTrans_plug)
                        self.MDG2_mod.connect(lhandoptionselbowswitch_plug, armrotblendnodeblender_plug)
                        self.MDG2_mod.connect(lhandoptionselbowswitch_plug, armtransblendnodeblender_plug)
                        self.MDG2_mod.connect(lhandoptionselbowswitch_plug, pvikarmctrlVis_plug)

                    else:
                        self.MDG2_mod.connect(fkarmjointtransotp_plug, armjointtransinp_plug)
                        self.MDG2_mod.connect(fkarmjointrototp_plug, armjointrotinp_plug)

                if self.autostretch.currentIndex() == 1:

                    if index < 2:
                        iklarmgrp_sl_lst = om2.MSelectionList()
                        iklarmgrp_sl_lst.add("LeftUpperArmIkCluster_grp")
                        iklarmgrp_sl_lst.add("LeftUpperArmIkCluster2_grp")
                        iklarmgrp_sl_lst.add("LeftLowerArmIkCluster_grp")
                        iklarmgrp_sl_lst.add("LeftLowerArmIkCluster2_grp")
                        iklarmgrp_sl_lst.add("LeftLowerArmIkCluster0_grp")
                        iklarmgrp_sl_lst.add("IkCvSplineLeftUpperArm2")
                        grp_armupperikcluster = iklarmgrp_sl_lst.getDependNode(0)
                        grp_armupperikcluster2 = iklarmgrp_sl_lst.getDependNode(1)
                        grp_armlowerikcluster = iklarmgrp_sl_lst.getDependNode(2)
                        grp_armlowerikcluster2 = iklarmgrp_sl_lst.getDependNode(3)
                        grp_armlowerikcluster0 = iklarmgrp_sl_lst.getDependNode(4)
                        grp_armupperikcvcluster2 = iklarmgrp_sl_lst.getDependNode(5)

                        larmjoint_multMatrix = self.MDG2_mod.createNode("multMatrix")
                        armjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                        larmmultMatrix_fs = om2.MFnDependencyNode(larmjoint_multMatrix)
                        larmdecomposeMatrix_fs = om2.MFnDependencyNode(armjoint_decomposeMatrix)
                        iklupperarmgrp_fs = om2.MFnDependencyNode(grp_armupperikcluster)
                        ikllowerarmgrp_fs = om2.MFnDependencyNode(grp_armlowerikcluster)
                        iklupperrarmcv2_fs = om2.MFnDependencyNode(grp_armupperikcvcluster2)
                        ikllowerarmgrp0_fs = om2.MFnDependencyNode(grp_armlowerikcluster0)

                        larmmultMatrixSum_plug = larmmultMatrix_fs.findPlug("matrixSum", False)
                        larmdecomposeInpMatrix_plug = larmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        larmdecomposeOtpTrans_plug = larmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        larmdecomposeOtpRot_plug = larmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        iklupperarmgrpTrans_plug = iklupperarmgrp_fs.findPlug("translate", False)
                        iklupperarmgrpRot_plug = iklupperarmgrp_fs.findPlug("rotate", False)
                        ikllowerarmgrpTrans_plug = ikllowerarmgrp_fs.findPlug("translate", False)
                        ikllowerarmgrpRot_plug = ikllowerarmgrp_fs.findPlug("rotate", False)
                        iklupperrarmcv2Trans_plug = iklupperrarmcv2_fs.findPlug("translate", False)
                        ikllowerarmgrp0Trans_plug = ikllowerarmgrp0_fs.findPlug("translate", False)
                        iklupperrarmcv2RotY_plug = iklupperrarmcv2_fs.findPlug("rotateY", False)
                        ikllowerarmgrp0RotY_plug = ikllowerarmgrp0_fs.findPlug("rotateY", False)

                        self.MDG2_mod.renameNode(larmjoint_multMatrix, str(bindjnt_string)[2:][:-3]+"_multMatrix")
                        self.MDG2_mod.renameNode(armjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3]+"_decomposeMatrix")
                        self.MDG2_mod.commandToExecute('connectAttr -force {0}.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(bindjnt_string)[3:][:-3]))
                        self.MDG2_mod.connect(larmmultMatrixSum_plug, larmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(iklupperrarmcv2Trans_plug, ikllowerarmgrp0Trans_plug)
                        self.MDG2_mod.connect(iklupperrarmcv2RotY_plug, ikllowerarmgrp0RotY_plug)

                        fklarmstretch_expression = om1.MFnExpression()

                        if index == 0:
                            fklarmstretch_expression.create("Biped_StretchyLeftForeArm_null.translateY = Biped_FkLeftArm_ctrl.stretchy")
                            fklarmstretch_expression.create("Biped_StretchyLeftForeArm_null.translateZ = Biped_StretchyLeftForeArm_null.translateY/10")
                            fklarmstretch_expression.create("Biped_StretchyLeftForeArm_null.translateX = Biped_FkLeftArm_ctrl.stretchy/2")

                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperArmIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(larmdecomposeOtpTrans_plug, iklupperarmgrpTrans_plug)
                            self.MDG2_mod.connect(larmdecomposeOtpRot_plug, iklupperarmgrpRot_plug)

                            lupperarmcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            lupperarmcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            lupperarmcluster2multMatrix_fs = om2.MFnDependencyNode(lupperarmcluster2_multMatrix)
                            lupperarmcluster2decomposeMatrix_fs = om2.MFnDependencyNode(lupperarmcluster2_decomposeMatrix)
                            lupperarmcluster2_fs = om2.MFnDependencyNode(grp_armupperikcluster2)

                            lupperarmcluster2multMatrixSum_plug = lupperarmcluster2multMatrix_fs.findPlug("matrixSum", False)
                            lupperarmcluster2decomposeInpMatrix_plug = lupperarmcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            lupperarmcluster2decomposeOtpTrans_plug = lupperarmcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            lupperarmcluster2Trans_plug = lupperarmcluster2_fs.findPlug("translate", False)

                            self.MDG2_mod.renameNode(lupperarmcluster2_multMatrix, "LeftUpperArmCluster2_multMatrix")
                            self.MDG2_mod.renameNode(lupperarmcluster2_decomposeMatrix,"LeftUpperArmCluster2_decomposeMatrix")
                            self.MDG2_mod.connect(lupperarmcluster2multMatrixSum_plug, lupperarmcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftForeArm.worldMatrix[0] LeftUpperArmCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperArmIkCluster2_grp.parentInverseMatrix[0] LeftUpperArmCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(lupperarmcluster2decomposeOtpTrans_plug, lupperarmcluster2Trans_plug)

                        elif index == 1:
                            fklarmstretch_expression.create("Biped_StretchyLeftHand_null.translateY = Biped_FkLeftForeArm_ctrl.stretchy")

                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerArmIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(larmdecomposeOtpTrans_plug, ikllowerarmgrpTrans_plug)
                            self.MDG2_mod.connect(larmdecomposeOtpRot_plug, ikllowerarmgrpRot_plug)

                            llowerarmcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            llowerarmcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            llowerarmcluster2multMatrix_fs = om2.MFnDependencyNode(llowerarmcluster2_multMatrix)
                            llowerarmcluster2decomposeMatrix_fs = om2.MFnDependencyNode(llowerarmcluster2_decomposeMatrix)
                            llowerarmcluster2_fs = om2.MFnDependencyNode(grp_armlowerikcluster2)

                            llowerarmcluster2multMatrixSum_plug = llowerarmcluster2multMatrix_fs.findPlug("matrixSum", False)
                            llowerarmcluster2decomposeInpMatrix_plug = llowerarmcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            llowerarmcluster2decomposeOtpTrans_plug = llowerarmcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            llowerarmcluster2decomposeOtpRot_plug = llowerarmcluster2decomposeMatrix_fs.findPlug("outputRotateY", False)
                            llowerarmcluster2Trans_plug = llowerarmcluster2_fs.findPlug("translate", False)
                            llowerarmcluster2RotY_plug = llowerarmcluster2_fs.findPlug("rotateY", False)

                            self.MDG2_mod.renameNode(llowerarmcluster2_multMatrix, "LeftLowerArmCluster2_multMatrix")
                            self.MDG2_mod.renameNode(llowerarmcluster2_decomposeMatrix,"LeftLowerArmCluster2_decomposeMatrix")
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftHand.worldMatrix[0] LeftLowerArmCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerArmIkCluster2_grp.parentInverseMatrix[0] LeftLowerArmCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(llowerarmcluster2multMatrixSum_plug, llowerarmcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.connect(llowerarmcluster2decomposeOtpTrans_plug, llowerarmcluster2Trans_plug)
                            self.MDG2_mod.connect(llowerarmcluster2decomposeOtpRot_plug, llowerarmcluster2RotY_plug)

                elif cmds.objExists("LeftArmIkCluster_grp") and cmds.objExists("IkStretchyLeftJointArm_grp"):
                    self.MDG2_mod.commandToExecute('delete "LeftArmIkCluster_grp"')
                    self.MDG2_mod.doIt()

            grp_armupperikcluster1 = om1.MObject()
            grp_armupperikcluster2 = om1.MObject()
            obj_stretchyleftarm1 = om1.MObject()

            if self.autostretch.currentIndex() == 1:

                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftHandOptions_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1.add("Biped_LeftHandOptions_ctrl")
                stretchy_sl_lst1.getDependNode(2, obj_stretchyleftarm1)

                if cmds.objExists("IkSplineLeftUpperArm0"):
                    iklupperarm_sl_lst = om1.MSelectionList()
                    iklupperarm_sl_lst.add("IkSplineLeftUpperArm*")
                    iklupperarm_sl_lst.getDependNode(0, obj_root)
                    iklupperarm_sl_lst.getDependNode(iklupperarm_sl_lst.length()-1, obj_endspine)

                    iklupperarmgrp_sl_lst = om1.MSelectionList()
                    iklupperarmgrp_sl_lst.add("LeftUpperArmIkCluster1_grp")
                    iklupperarmgrp_sl_lst.add("LeftUpperArmIkCluster2_grp")
                    iklupperarmgrp_sl_lst.getDependNode(0, grp_armupperikcluster1)
                    iklupperarmgrp_sl_lst.getDependNode(1, grp_armupperikcluster2)

                    self.MDag_path = om1.MDagPath()
                    rootspine_path = self.MDag_path.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.iklarm_effector = self.IK_Effector.create(obj_endspine)
                    iklarm_effector_path = self.MDag_path.getAPathTo(self.iklarm_effector)

                    self.larm_ik = self.IK_Handle.create(rootspine_path, iklarm_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(iklupperarm_sl_lst.length()):
                        iklupperarm_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "LeftUpperArm_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("LeftUpperArm_SplineCv", "DoNotTouch")

                    larmcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    larmstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    larmstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    larmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    larmscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    likarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    larmcrvinfo_fs = om1.MFnDependencyNode(larmcrv_info)
                    larmstretchpercent_fs = om1.MFnDependencyNode(larmstretchpercent)
                    larmstretchpow_fs = om1.MFnDependencyNode(larmstretchpow)
                    larmstretchdiv_fs = om1.MFnDependencyNode(larmstretchdiv)
                    larmscalediv_fs = om1.MFnDependencyNode(larmscalediv)
                    likarmstretchdiv_fs = om1.MFnDependencyNode(likarmstretchdiv)
                    likarmstretchcluster1_fs = om1.MFnDependencyNode(grp_armupperikcluster1)
                    likarmstretchcluster2_fs = om1.MFnDependencyNode(grp_armupperikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    larmstretchoption_fs = om1.MFnDependencyNode(obj_stretchyleftarm1)

                    larmcrvinfoarc_plug = larmcrvinfo_fs.findPlug("arcLength")
                    larmstretchpercentinp1y_plug = larmstretchpercent_fs.findPlug("input1Y")
                    larmstretchpercentotp_plug = larmstretchpercent_fs.findPlug("outputY")
                    larmstretchpowinp1x_plug = larmstretchpow_fs.findPlug("input1X")
                    larmstretchpowinp1z_plug = larmstretchpow_fs.findPlug("input1Z")
                    larmstretchpowotpx_plug = larmstretchpow_fs.findPlug("outputX")
                    larmstretchpowotpz_plug = larmstretchpow_fs.findPlug("outputZ")
                    larmstretchdivinp2x_plug = larmstretchdiv_fs.findPlug("input2X")
                    larmstretchdivinp2z_plug = larmstretchdiv_fs.findPlug("input2Z")
                    larmstretchdivotox_plug = larmstretchdiv_fs.findPlug("outputX")
                    larmstretchdivotpz_plug = larmstretchdiv_fs.findPlug("outputZ")
                    larmscaledivinp1y_plug = larmscalediv_fs.findPlug("input1Y")
                    larmscaledivinp2y_plug = larmscalediv_fs.findPlug("input2Y")
                    larmscaledivotpy_plug = larmscalediv_fs.findPlug("outputY")
                    likarmstretchdivinp1_plug = likarmstretchdiv_fs.findPlug("input1")
                    likarmstretchdivotp_plug = likarmstretchdiv_fs.findPlug("output")
                    likarmstretchclust1trans_plug = likarmstretchcluster1_fs.findPlug("translate")
                    likarmstretchclust2trans_plug = likarmstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    larmstretchoption_plug = larmstretchoption_fs.findPlug("stretchable")
                    larmsquashoption_plug = larmstretchoption_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(iklupperarm_sl_lst.length()):
                        if index < iklupperarm_sl_lst.length()-1:
                            iklupperarm_sl_lst.getDependNode(index, objparent)
                            iklupperarm_sl_lst.getDependNode(index+1, objchild)
                            larmparentjnt_fs = om1.MFnDependencyNode(objparent)
                            larmchildjnt_fs = om1.MFnDependencyNode(objchild)
                            larmjnt_syplug = larmparentjnt_fs.findPlug("scaleY")
                            larmjnt_sxplug = larmparentjnt_fs.findPlug("scaleX")
                            larmjnt_szplug = larmparentjnt_fs.findPlug("scaleZ")
                            larmjnt_sotpplug = larmparentjnt_fs.findPlug("scale")
                            larmjnt_invsplug = larmchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(larmstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(larmstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(larmstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, larmjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, larmjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, larmjnt_szplug)
                            ikspinedg_modifier.connect(larmjnt_sotpplug, larmjnt_invsplug)

                    ikspinedg_modifier.renameNode(larmcrv_info, "LeftUpperArmSpline_Info")
                    ikspinedg_modifier.renameNode(larmstretchpercent, "LeftUpperArmStretch_Percent")
                    ikspinedg_modifier.renameNode(larmstretchpow, "LeftUpperArmStretch_Power")
                    ikspinedg_modifier.renameNode(larmstretchdiv, "LeftUpperArmStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "LeftUpperArm_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.larm_ik, "LeftUpperArm_Ik")
                    ikspinedg_modifier.renameNode(self.iklarm_effector, "LeftUpperArm_effector")
                    ikspinedg_modifier.renameNode(larmscalediv, "IkLeftUpperArmGlobalScale_Average")
                    ikspinedg_modifier.renameNode(likarmstretchdiv, "LeftUpperArmStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "LeftUpperArmStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "LeftUpperArmSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "LeftUpperArm_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -force LeftUpperArm_SplineCvShape.worldSpace[0] LeftUpperArm_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "LeftUpperArmIk_skin" IkCvSplineLeftUpperArm0 IkCvSplineLeftUpperArm1 IkCvSplineLeftUpperArm2 LeftUpperArm_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArm_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineLeftUpperArm0.worldMatrix[0] LeftUpperArm_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineLeftUpperArm2.worldMatrix[0] LeftUpperArm_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -force LeftUpperArm_SplineCvShape.worldSpace[0] LeftUpperArmSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(larmcrvinfoarc_plug, larmscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, larmscaledivinp2y_plug)
                    ikspinedg_modifier.connect(larmscaledivotpy_plug, larmstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(larmstretchpercentotp_plug, larmstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(larmstretchpercentotp_plug, larmstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(larmstretchpowotpx_plug, larmstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(larmstretchpowotpz_plug, larmstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(likarmstretchclust2trans_plug, likarmstretchdivinp1_plug)
                    ikspinedg_modifier.connect(likarmstretchdivotp_plug, likarmstretchclust1trans_plug)
                    ikspinedg_modifier.connect(larmstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(larmsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $leftupperarmstretchinput1Y = `getAttr "LeftUpperArmStretch_Percent.input1Y"`; setAttr "LeftUpperArmStretch_Percent.input2Y" $leftupperarmstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkLeftUpperArmGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkNeckGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperArmSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                grp_armlowerikcluster1 = om1.MObject()
                grp_armlowerikcluster2 = om1.MObject()

                if cmds.objExists("IkSplineLeftLowerArm0"):
                    ikllowerarm_sl_lst = om1.MSelectionList()
                    ikllowerarm_sl_lst.add("IkSplineLeftLowerArm*")
                    ikllowerarm_sl_lst.getDependNode(0, obj_root)
                    ikllowerarm_sl_lst.getDependNode(ikllowerarm_sl_lst.length()-1, obj_endspine)

                    ikllowerarmgrp_sl_lst = om1.MSelectionList()
                    ikllowerarmgrp_sl_lst.add("LeftLowerArmIkCluster1_grp")
                    ikllowerarmgrp_sl_lst.add("LeftLowerArmIkCluster2_grp")
                    ikllowerarmgrp_sl_lst.getDependNode(0, grp_armlowerikcluster1)
                    ikllowerarmgrp_sl_lst.getDependNode(1, grp_armlowerikcluster2)

                    rootspine_path = self.MDag_path.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.iklarm_effector = self.IK_Effector.create(obj_endspine)
                    iklarm_effector_path = self.MDag_path.getAPathTo(self.iklarm_effector)

                    self.larm_ik = self.IK_Handle.create(rootspine_path, iklarm_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(ikllowerarm_sl_lst.length()):
                        ikllowerarm_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "LeftLowerArm_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("LeftLowerArm_SplineCv", "DoNotTouch")

                    larmcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    larmstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    larmstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    larmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    larmscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    likarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    larmcrvinfo_fs = om1.MFnDependencyNode(larmcrv_info)
                    larmstretchpercent_fs = om1.MFnDependencyNode(larmstretchpercent)
                    larmstretchpow_fs = om1.MFnDependencyNode(larmstretchpow)
                    larmstretchdiv_fs = om1.MFnDependencyNode(larmstretchdiv)
                    larmscalediv_fs = om1.MFnDependencyNode(larmscalediv)
                    likarmstretchdiv_fs = om1.MFnDependencyNode(likarmstretchdiv)
                    likarmstretchcluster1_fs = om1.MFnDependencyNode(grp_armlowerikcluster1)
                    likarmstretchcluster2_fs = om1.MFnDependencyNode(grp_armlowerikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)

                    larmcrvinfoarc_plug = larmcrvinfo_fs.findPlug("arcLength")
                    larmstretchpercentinp1y_plug = larmstretchpercent_fs.findPlug("input1Y")
                    larmstretchpercentotp_plug = larmstretchpercent_fs.findPlug("outputY")
                    larmstretchpowinp1x_plug = larmstretchpow_fs.findPlug("input1X")
                    larmstretchpowinp1z_plug = larmstretchpow_fs.findPlug("input1Z")
                    larmstretchpowotpx_plug = larmstretchpow_fs.findPlug("outputX")
                    larmstretchpowotpz_plug = larmstretchpow_fs.findPlug("outputZ")
                    larmstretchdivinp2x_plug = larmstretchdiv_fs.findPlug("input2X")
                    larmstretchdivinp2z_plug = larmstretchdiv_fs.findPlug("input2Z")
                    larmstretchdivotox_plug = larmstretchdiv_fs.findPlug("outputX")
                    larmstretchdivotpz_plug = larmstretchdiv_fs.findPlug("outputZ")
                    larmscaledivinp1y_plug = larmscalediv_fs.findPlug("input1Y")
                    larmscaledivinp2y_plug = larmscalediv_fs.findPlug("input2Y")
                    larmscaledivotpy_plug = larmscalediv_fs.findPlug("outputY")
                    likarmstretchdivinp1_plug = likarmstretchdiv_fs.findPlug("input1")
                    likarmstretchdivotp_plug = likarmstretchdiv_fs.findPlug("output")
                    likarmstretchclust1trans_plug = likarmstretchcluster1_fs.findPlug("translate")
                    likarmstretchclust2trans_plug = likarmstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikllowerarm_sl_lst.length()):
                        if index < ikllowerarm_sl_lst.length()-1:
                            ikllowerarm_sl_lst.getDependNode(index, objparent)
                            ikllowerarm_sl_lst.getDependNode(index+1, objchild)
                            larmparentjnt_fs = om1.MFnDependencyNode(objparent)
                            larmchildjnt_fs = om1.MFnDependencyNode(objchild)
                            larmjnt_syplug = larmparentjnt_fs.findPlug("scaleY")
                            larmjnt_sxplug = larmparentjnt_fs.findPlug("scaleX")
                            larmjnt_szplug = larmparentjnt_fs.findPlug("scaleZ")
                            larmjnt_sotpplug = larmparentjnt_fs.findPlug("scale")
                            larmjnt_invsplug = larmchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(larmstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(larmstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(larmstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, larmjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, larmjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, larmjnt_szplug)
                            ikspinedg_modifier.connect(larmjnt_sotpplug, larmjnt_invsplug)

                    ikspinedg_modifier.renameNode(larmcrv_info, "LeftLowerArmSpline_Info")
                    ikspinedg_modifier.renameNode(larmstretchpercent, "LeftLowerArmStretch_Percent")
                    ikspinedg_modifier.renameNode(larmstretchpow, "LeftLowerArmStretch_Power")
                    ikspinedg_modifier.renameNode(larmstretchdiv, "LeftLowerArmStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "LeftLowerArm_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.larm_ik, "LeftLowerArm_Ik")
                    ikspinedg_modifier.renameNode(self.iklarm_effector, "LeftLowerArm_effector")
                    ikspinedg_modifier.renameNode(larmscalediv, "IkLeftLowerArmGlobalScale_Average")
                    ikspinedg_modifier.renameNode(likarmstretchdiv, "LeftLowerArmStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "LeftLowerArmStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "LeftLowerArmSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "LeftLowerArm_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -f LeftLowerArm_SplineCvShape.worldSpace[0] LeftLowerArm_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "LeftLowerArmIk_skin" IkCvSplineLeftLowerArm0 IkCvSplineLeftLowerArm1 IkCvSplineLeftLowerArm2 LeftLowerArm_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArm_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineLeftLowerArm0.worldMatrix[0] LeftLowerArm_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineLeftLowerArm2.worldMatrix[0] LeftLowerArm_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -f LeftLowerArm_SplineCvShape.worldSpace[0] LeftLowerArmSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(larmcrvinfoarc_plug, larmscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, larmscaledivinp2y_plug)
                    ikspinedg_modifier.connect(larmscaledivotpy_plug, larmstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(larmstretchpercentotp_plug, larmstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(larmstretchpercentotp_plug, larmstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(larmstretchpowotpx_plug, larmstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(larmstretchpowotpz_plug, larmstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(likarmstretchclust2trans_plug, likarmstretchdivinp1_plug)
                    ikspinedg_modifier.connect(likarmstretchdivotp_plug, likarmstretchclust1trans_plug)
                    ikspinedg_modifier.connect(larmstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(larmsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $leftlowerarmstretchinput1Y = `getAttr "LeftLowerArmStretch_Percent.input1Y"`; setAttr "LeftLowerArmStretch_Percent.input2Y" $leftlowerarmstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkLeftLowerArmGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftLowerArmSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                ikcvarm_sl_lst = om2.MSelectionList()
                ikcvarm_sl_lst.add("IkCvSplineLeftUpperArm*")
                ikcvarm_sl_lst.add("IkCvSplineLeftLowerArm*")

            if cmds.objExists("NoFlipLeftHand_Ik") and cmds.objExists("PVLeftHand_Ik"):

                self.MDG2_mod.commandToExecute('addAttr -longName "follow" -niceName "Follow Body" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_IkLeftHand_ctrl')
                self.MDG2_mod.commandToExecute('parentConstraint -mo -weight 1 Biped_Root_ctrl Biped_IkLeftHandRot_null')
                self.MDG2_mod.doIt()

                lhandik_sl_ls = om2.MSelectionList()
                lhandik_sl_ls.add("LeftArmIk_grp")
                lhandik_sl_ls.add("Biped_NoFlipLeftElbow_null")
                lhandik_sl_ls.add("Biped_IkLeftHand_ctrl")
                lhandik_sl_ls.add("IkStretchyLeftJointArm_grp")
                likhandlegrp_fs = om2.MFnDependencyNode(lhandik_sl_ls.getDependNode(0))
                noflipleftelbownullobj_fs = om2.MFnDependencyNode(lhandik_sl_ls.getDependNode(1))
                ikarmctrl_fs = om2.MFnDependencyNode(lhandik_sl_ls.getDependNode(2))
                likhand_fs = om2.MFnDependencyNode(iklarm_sl_ls.getDependNode(2))

                if self.typeofLHandIK.currentIndex() == 1:
                    likhandctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    likhandctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    likhandrot_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    likhandrot_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(likhandctrl_multMatrix, "IkLeftHand_multMatrix")
                    self.MDG2_mod.renameNode(likhandctrl_decomposeMatrix, "IkLeftHand_decomposeMatrix")
                    self.MDG2_mod.renameNode(likhandrot_multMatrix, "IkLeftHandRot_multMatrix")
                    self.MDG2_mod.renameNode(likhandrot_decomposeMatrix, "IkLeftHandRot_decomposeMatrix")

                    likhandmultMatrix_fs = om2.MFnDependencyNode(likhandctrl_multMatrix)
                    likhanddecomposeMatrix_fs = om2.MFnDependencyNode(likhandctrl_decomposeMatrix)
                    likhandrotmultMatrix_fs = om2.MFnDependencyNode(likhandrot_multMatrix)
                    likhandrotdecomposeMatrix_fs = om2.MFnDependencyNode(likhandrot_decomposeMatrix)

                    likhandmultMatrixSum_plug = likhandmultMatrix_fs.findPlug("matrixSum", False)
                    likhanddecomposeInpMatrix_plug = likhanddecomposeMatrix_fs.findPlug("inputMatrix", False)
                    likhanddecomposeOtpTrans_plug = likhanddecomposeMatrix_fs.findPlug("outputTranslate", False)
                    likhanddecomposeOtpRot_plug = likhanddecomposeMatrix_fs.findPlug("outputRotate", False)
                    likhandrotmultMatrixSum_plug = likhandrotmultMatrix_fs.findPlug("matrixSum", False)
                    likhandrotdecomposeInpMatrix_plug = likhandrotdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    likhandrotdecomposeOtpRot_plug = likhandrotdecomposeMatrix_fs.findPlug("outputRotate", False)
                    likhandgrpTrans_plug = likhandlegrp_fs.findPlug("translate", False)
                    likhandgrpRot_plug = likhandlegrp_fs.findPlug("rotate", False)
                    ikarmctrlTrans_plug = ikarmctrl_fs.findPlug("translate", False)
                    ikarmctrlRot_plug = ikarmctrl_fs.findPlug("rotate", False)
                    noflipleftelbownullTrans_plug = noflipleftelbownullobj_fs.findPlug("translate", False)
                    noflipleftelbownullRot_plug = noflipleftelbownullobj_fs.findPlug("rotate", False)
                    likhandRot_plug = likhand_fs.findPlug("jointOrient", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkLeftHand_ctrl.worldMatrix[0] IkLeftHand_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkLeftHand_ctrl.worldMatrix[0] IkLeftHandRot_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('connectAttr -force IkLeftHand.parentInverseMatrix[0] IkLeftHandRot_multMatrix.matrixIn[1]')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkLeftHand_ctrl.follow Biped_IkLeftHandRot_null_parentConstraint1.Biped_Root_ctrlW0')
                    self.MDG2_mod.connect(likhandmultMatrixSum_plug, likhanddecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(likhanddecomposeOtpTrans_plug, likhandgrpTrans_plug)
                    self.MDG2_mod.connect(likhanddecomposeOtpRot_plug, likhandgrpRot_plug)
                    self.MDG2_mod.connect(likhandrotmultMatrixSum_plug, likhandrotdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(ikarmctrlTrans_plug, noflipleftelbownullTrans_plug)
                    self.MDG2_mod.connect(ikarmctrlRot_plug, noflipleftelbownullRot_plug)
                    self.MDG2_mod.connect(likhandrotdecomposeOtpRot_plug, likhandRot_plug)
                    self.MDG2_mod.commandToExecute('parent NoFlipLeftHand_Ik LeftArmIk_grp')
                    self.MDG2_mod.commandToExecute('parent PVLeftHand_Ik LeftArmIk_grp')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_NoFlipLeftElbow_ctrl NoFlipLeftHand_Ik')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_PVLeftElbow_ctrl PVLeftHand_Ik')
                    self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftHand_Ik.twist" -90')

                    if self.autostretch.currentIndex() == 1:
                        likarmdistloc = om2.MFnDagNode()

                        likarmdistloc1_tn = likarmdistloc.create("transform", "distloc_L_arm1", lhandik_sl_ls.getDependNode(3))
                        likarmdistloc1_ln = likarmdistloc.create("locator", "L_arm1_Shape", likarmdistloc1_tn)
                        likhanddistloc1_tn = likarmdistloc.create("transform", "distloc_L_hand1")
                        likhanddistloc1_ln = likarmdistloc.create("locator", "L_hand1_Shape", likhanddistloc1_tn)
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "IkLeftArmDistance_Info"')
                        self.MDG2_mod.doIt()

                        larmnull_transform_t = larmnull_transform.translation(om2.MSpace.kTransform)
                        likupperarmdistloc_transform = om2.MFnTransform(likarmdistloc1_tn)
                        likupperarmdistloc_transform.setTranslation(larmnull_transform_t, om2.MSpace.kTransform)

                        IkLeftArmDistance_sl_ls = om2.MSelectionList()
                        IkLeftArmDistance_sl_ls.add("IkLeftArmDistance_InfoShape")

                        likhandDist_fs = om2.MFnDependencyNode(likhanddistloc1_tn)
                        likarmjntDist_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(0))

                        likarmjntDistPoint2_plug = likarmjntDist_fs.findPlug("endPoint", False)
                        likhandDistOtpTrans_plug = likhandDist_fs.findPlug("translate", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force L_arm1_Shape.worldPosition[0] IkLeftArmDistance_InfoShape.startPoint')
                        self.MDG2_mod.connect(likhandDistOtpTrans_plug, likarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(likhanddecomposeOtpTrans_plug, likhandDistOtpTrans_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikleftforearmtranslateY = `getAttr "IkNoFlipLeftForeArm.translateY"`; float $noflipiklefthandtranslateY = `getAttr "IkNoFlipLeftHand.translateY"`; float $totalnoflipikleftarmtranslateY = $noflipikleftforearmtranslateY + $noflipiklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue $totalnoflipikleftarmtranslateY -attribute "translateY" -value $noflipikleftforearmtranslateY IkNoFlipLeftForeArm;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftforearmtranslateY = `getAttr "IkNoFlipLeftForeArm.translateY"`; float $noflipiklefthandtranslateY = `getAttr "IkNoFlipLeftHand.translateY"`; float $totalnoflipikleftarmtranslateY = $noflipikleftforearmtranslateY + $noflipiklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue ($totalnoflipikleftarmtranslateY*2) -attribute "translateY" -value ($noflipikleftforearmtranslateY*2) IkNoFlipLeftForeArm;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftforearmtranslateY = `getAttr "IkNoFlipLeftForeArm.translateY"`; float $noflipiklefthandtranslateY = `getAttr "IkNoFlipLeftHand.translateY"`; float $totalnoflipikleftarmtranslateY = $noflipikleftforearmtranslateY + $noflipiklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue $totalnoflipikleftarmtranslateY -attribute "translateY" -value $noflipiklefthandtranslateY IkNoFlipLeftHand;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftforearmtranslateY = `getAttr "IkNoFlipLeftForeArm.translateY"`; float $noflipiklefthandtranslateY = `getAttr "IkNoFlipLeftHand.translateY"`; float $totalnoflipikleftarmtranslateY = $noflipikleftforearmtranslateY + $noflipiklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue ($totalnoflipikleftarmtranslateY*2) -attribute "translateY" -value ($noflipiklefthandtranslateY*2) IkNoFlipLeftHand;')
                        self.MDG2_mod.commandToExecute('float $pvikleftforearmtranslateY = `getAttr "IkPVLeftForeArm.translateY"`; float $pviklefthandtranslateY = `getAttr "IkPVLeftHand.translateY"`; float $totalpvikleftarmtranslateY = $pvikleftforearmtranslateY + $pviklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue $totalpvikleftarmtranslateY -attribute "translateY" -value $pvikleftforearmtranslateY IkPVLeftForeArm;')
                        self.MDG2_mod.commandToExecute('float $pvikleftforearmtranslateY = `getAttr "IkPVLeftForeArm.translateY"`; float $pviklefthandtranslateY = `getAttr "IkPVLeftHand.translateY"`; float $totalpvikleftarmtranslateY = $pvikleftforearmtranslateY + $pviklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue ($totalpvikleftarmtranslateY*2) -attribute "translateY" -value ($pvikleftforearmtranslateY*2) IkPVLeftForeArm;')
                        self.MDG2_mod.commandToExecute('float $pvikleftforearmtranslateY = `getAttr "IkPVLeftForeArm.translateY"`; float $pviklefthandtranslateY = `getAttr "IkPVLeftHand.translateY"`; float $totalpvikleftarmtranslateY = $pvikleftforearmtranslateY + $pviklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue $totalpvikleftarmtranslateY -attribute "translateY" -value $pviklefthandtranslateY IkPVLeftHand;')
                        self.MDG2_mod.commandToExecute('float $pvikleftforearmtranslateY = `getAttr "IkPVLeftForeArm.translateY"`; float $pviklefthandtranslateY = `getAttr "IkPVLeftHand.translateY"`; float $totalpvikleftarmtranslateY = $pvikleftforearmtranslateY + $pviklefthandtranslateY; setDrivenKeyframe -currentDriver IkLeftArmDistance_InfoShape.distance -driverValue ($totalpvikleftarmtranslateY*2) -attribute "translateY" -value ($pviklefthandtranslateY*2) IkPVLeftHand;')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipLeftForeArm; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVLeftForeArm; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipLeftHand; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVLeftHand; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('parent "IkLeftArmDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_hand1" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "elbowsnap" -niceName "Elbow Snap" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_PVLeftElbow_ctrl')

                        likarmdistloc2_tn = likarmdistloc.create("transform", "distloc_L_uparm2", lhandik_sl_ls.getDependNode(3))
                        likarmdistloc2_ln = likarmdistloc.create("locator", "L_uparm2_Shape", likarmdistloc2_tn)
                        likelbowdistloc_tn = likarmdistloc.create("transform", "distloc_L_legelbow")
                        likelbowdistloc_ln = likarmdistloc.create("locator", "L_legelbow_Shape", likelbowdistloc_tn)
                        likhanddistloc2_tn = likarmdistloc.create("transform", "distloc_L_leghand2")
                        likhanddistloc2_ln = likarmdistloc.create("locator", "L_leghand2_Shape", likhanddistloc2_tn)
                        pvleftelbowctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        likpvupperarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvlowerarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvupperarmstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvlowerarmstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.renameNode(pvleftelbowctrl_decomposeMatrix, "PVLeftElbow_decomposeMatrix")
                        self.MDG2_mod.renameNode(likpvupperarmtransblendnode, "PVLeftUpperArmTrans_blend")
                        self.MDG2_mod.renameNode(likpvlowerarmtransblendnode, "PVLeftLowerArmTrans_blend")
                        self.MDG2_mod.renameNode(likpvupperarmstretchblendnode, "PVLeftUpperArmStretch_blend")
                        self.MDG2_mod.renameNode(likpvlowerarmstretchblendnode, "PVLeftLowerArmStretch_blend")
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "LeftUpperArmDistance_Info"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension2" "LeftLowerArmDistance_Info"')
                        self.MDG2_mod.doIt()

                        likupperarmdistloc2_transform = om2.MFnTransform(likarmdistloc2_tn)
                        likupperarmdistloc2_transform.setTranslation(larmnull_transform_t, om2.MSpace.kTransform)

                        IkLeftArmDistance_sl_ls.add("LeftUpperArmDistance_InfoShape")
                        IkLeftArmDistance_sl_ls.add("LeftLowerArmDistance_InfoShape")
                        IkLeftArmDistance_sl_ls.add("IkPVLeftForeArm_translateY")
                        IkLeftArmDistance_sl_ls.add("IkPVLeftHand_translateY")
                        IkLeftArmDistance_sl_ls.add("Biped_PVLeftElbow_ctrl")
                        IkLeftArmDistance_sl_ls.add("IkNoFlipLeftForeArm_translateY")
                        IkLeftArmDistance_sl_ls.add("IkNoFlipLeftHand_translateY")

                        likelbowDist_fs = om2.MFnDependencyNode(likelbowdistloc_tn)
                        likhandDist_fs = om2.MFnDependencyNode(likhanddistloc2_tn)
                        likupperarmjntDist_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(1))
                        liklowerarmjntDist_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(2))
                        pvleftelbowkey_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(3))
                        pvlefthandkey_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(4))
                        pvleftelbowctrlDecomposeMatrix_fs = om2.MFnDependencyNode(pvleftelbowctrl_decomposeMatrix)
                        likpvupperarmtransblendnode_fs = om2.MFnDependencyNode(likpvupperarmtransblendnode)
                        likpvlowerarmtransblendnode_fs = om2.MFnDependencyNode(likpvlowerarmtransblendnode)
                        pvleftelbowctrl_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(5))
                        pvleftelbowjnt_fs = om2.MFnDependencyNode(pviklarm_sl_ls.getDependNode(1))
                        pvlefthandjnt_fs = om2.MFnDependencyNode(pviklarm_sl_ls.getDependNode(2))
                        likupperarmstretchblendnode_fs = om2.MFnDependencyNode(likpvupperarmstretchblendnode)
                        liklowerarmstretchblendnode_fs = om2.MFnDependencyNode(likpvlowerarmstretchblendnode)
                        lefthandoption_fs = om2.MFnDependencyNode(lhandoptions_obj)

                        likupperarmjntDistPoint2_plug = likupperarmjntDist_fs.findPlug("endPoint", False)
                        liklowerarmjntDistPoint1_plug = liklowerarmjntDist_fs.findPlug("startPoint", False)
                        liklowerarmjntDistPoint2_plug = liklowerarmjntDist_fs.findPlug("endPoint", False)
                        likelbowDistOtpTrans_plug = likelbowDist_fs.findPlug("translate", False)
                        likhandDistOtpTrans_plug = likhandDist_fs.findPlug("translate", False)
                        pvleftelbowctrlDecomposeMatrixOtpTrans_plug = pvleftelbowctrlDecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvleftelbowkeyotp_plug = pvleftelbowkey_fs.findPlug("output", False)
                        pvlefthandkeyotp_plug = pvlefthandkey_fs.findPlug("output", False)
                        likpvupperarmtransblendnodeinp1g_plug = likpvupperarmtransblendnode_fs.findPlug("color1G", False)
                        likpvupperarmtransblendnodeinp2g_plug = likpvupperarmtransblendnode_fs.findPlug("color2G", False)
                        likpvupperarmtransblendnodeotp_plug = likpvupperarmtransblendnode_fs.findPlug("outputG", False)
                        likpvupperarmtransblendnodeblender_plug = likpvupperarmtransblendnode_fs.findPlug("blender", False)
                        likpvlowerarmtransblendnodeinp1g_plug = likpvlowerarmtransblendnode_fs.findPlug("color1G", False)
                        likpvlowerarmtransblendnodeinp2g_plug = likpvlowerarmtransblendnode_fs.findPlug("color2G", False)
                        likpvlowerarmtransblendnodeotp_plug = likpvlowerarmtransblendnode_fs.findPlug("outputG", False)
                        likpvlowerarmtransblendnodeblender_plug = likpvlowerarmtransblendnode_fs.findPlug("blender", False)
                        pvleftelbowctrl_fs_plug = pvleftelbowctrl_fs.findPlug("elbowsnap", False)
                        likpvupperarmstretchblendnodeinp1g_plug = likupperarmstretchblendnode_fs.findPlug("color1G", False)
                        likpvupperarmstretchblendnodeotp_plug = likupperarmstretchblendnode_fs.findPlug("outputG", False)
                        likpvupperarmstretchblendnodeblender_plug = likupperarmstretchblendnode_fs.findPlug("blender", False)
                        likpvlowerarmstretchblendnodeinp1g_plug = liklowerarmstretchblendnode_fs.findPlug("color1G", False)
                        likpvlowerarmstretchblendnodeotp_plug = liklowerarmstretchblendnode_fs.findPlug("outputG", False)
                        likpvlowerarmstretchblendnodeblender_plug = liklowerarmstretchblendnode_fs.findPlug("blender", False)
                        iklefthandstretch_plug = lefthandoption_fs.findPlug("stretchable", False)
                        pvleftelbowjntTrans_plug = pvleftelbowjnt_fs.findPlug("translateY", False)
                        pvlefthandjntTrans_plug = pvlefthandjnt_fs.findPlug("translateY", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force L_uparm2_Shape.worldPosition[0] LeftUpperArmDistance_InfoShape.startPoint')
                        self.MDG2_mod.commandToExecute('connectAttr -force Biped_PVLeftElbow_ctrl.worldMatrix[0] PVLeftElbow_decomposeMatrix.inputMatrix')
                        self.MDG2_mod.connect(likelbowDistOtpTrans_plug, likupperarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(likelbowDistOtpTrans_plug, liklowerarmjntDistPoint1_plug)
                        self.MDG2_mod.connect(likhandDistOtpTrans_plug, liklowerarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(likhanddecomposeOtpTrans_plug, likhandDistOtpTrans_plug)
                        self.MDG2_mod.connect(pvleftelbowctrlDecomposeMatrixOtpTrans_plug, likelbowDistOtpTrans_plug)

                        self.MDG2_mod.disconnect(pvleftelbowkeyotp_plug, pvleftelbowjntTrans_plug)
                        self.MDG2_mod.disconnect(pvlefthandkeyotp_plug, pvlefthandjntTrans_plug)
                        self.MDG2_mod.connect(pvleftelbowkeyotp_plug, likpvupperarmtransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvlefthandkeyotp_plug, likpvlowerarmtransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvleftelbowctrl_fs_plug, likpvupperarmtransblendnodeblender_plug)
                        self.MDG2_mod.connect(pvleftelbowctrl_fs_plug, likpvlowerarmtransblendnodeblender_plug)
                        self.MDG2_mod.connect(likpvupperarmtransblendnodeotp_plug, likpvupperarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likpvlowerarmtransblendnodeotp_plug, likpvlowerarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likpvupperarmstretchblendnodeotp_plug, pvleftelbowjntTrans_plug)
                        self.MDG2_mod.connect(likpvlowerarmstretchblendnodeotp_plug, pvlefthandjntTrans_plug)
                        self.MDG2_mod.connect(iklefthandstretch_plug, likpvupperarmstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(iklefthandstretch_plug, likpvlowerarmstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $pvikleftforearmtranslateY = `getAttr "PVLeftUpperArmStretch_blend.color1G"`; setAttr "PVLeftUpperArmStretch_blend.color2G" $pvikleftforearmtranslateY;')
                        self.MDG2_mod.commandToExecute('float $pviklefthandtranslateY = `getAttr "PVLeftLowerArmStretch_blend.color1G"`; setAttr "PVLeftLowerArmStretch_blend.color2G" $pviklefthandtranslateY;')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_legelbow" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_leghand2" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "LeftUpperArmDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "LeftLowerArmDistance_Info" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "forearmlength" -niceName "AutoElbow ForeArm Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.commandToExecute('addAttr -longName "wristlength" -niceName "AutoElbow Wrist Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkLeftHand_ctrl')
                        self.MDG2_mod.doIt()

                        likautokneeupperlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        likautokneelowerlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        liknoflipupperarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        liknofliplowerarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.renameNode(likautokneeupperlegnode, "NoFlipLeftForeArmTrans_multiply")
                        self.MDG2_mod.renameNode(likautokneelowerlegnode, "NoFlipLeftHandTrans_multiply")
                        self.MDG2_mod.renameNode(liknoflipupperarmtransblendnode, "NoFlipLeftUpperArmStretch_blend")
                        self.MDG2_mod.renameNode(liknofliplowerarmtransblendnode, "NoFlipLeftLowerArmStretch_blend")

                        likautoelbowupperleg_fs = om2.MFnDependencyNode(likautokneeupperlegnode)
                        likautoelbowlowerleg_fs = om2.MFnDependencyNode(likautokneelowerlegnode)
                        noflipleftelbowkey_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(6))
                        nofliplefthandkey_fs = om2.MFnDependencyNode(IkLeftArmDistance_sl_ls.getDependNode(7))
                        nofliplefelbowjntTrans_fs = om2.MFnDependencyNode(noflipiklarm_sl_ls.getDependNode(1))
                        nofliplefthandjntTrans_fs = om2.MFnDependencyNode(noflipiklarm_sl_ls.getDependNode(2))
                        liknoflipupperarmstretchblendnode_fs = om2.MFnDependencyNode(liknoflipupperarmtransblendnode)
                        liknofliplowerarmstretchblendnode_fs = om2.MFnDependencyNode(liknofliplowerarmtransblendnode)

                        ikautoelbowupperarmInp1Y_plug = likautoelbowupperleg_fs.findPlug("input1Y", False)
                        ikautoelbowupperarmInp2Y_plug = likautoelbowupperleg_fs.findPlug("input2Y", False)
                        likautoelbowupperarmOtp_plug = likautoelbowupperleg_fs.findPlug("outputY", False)
                        ikautoelbowlowerarmInp1Y_plug = likautoelbowlowerleg_fs.findPlug("input1Y", False)
                        ikautoelbowlowerarmInp2Y_plug = likautoelbowlowerleg_fs.findPlug("input2Y", False)
                        likautoelbowlowerarmOtp_plug = likautoelbowlowerleg_fs.findPlug("outputY", False)
                        noflipleftelbowkeyotp_plug = noflipleftelbowkey_fs.findPlug("output", False)
                        nofliplefthandkeyotp_plug = nofliplefthandkey_fs.findPlug("output", False)
                        noflipleftelbowjnttty_plug = nofliplefelbowjntTrans_fs.findPlug("translateY", False)
                        nofliplefthandjntty_plug = nofliplefthandjntTrans_fs.findPlug("translateY", False)
                        likctrlelbowupperarm_plug = ikarmctrl_fs.findPlug("forearmlength", False)
                        likctrlelbowlowerarm_plug = ikarmctrl_fs.findPlug("wristlength", False)
                        liknoflipupperarmstretchblendnodeinp1g_plug = liknoflipupperarmstretchblendnode_fs.findPlug("color1G", False)
                        liknoflipupperarmstretchblendnodeotp_plug = liknoflipupperarmstretchblendnode_fs.findPlug("outputG", False)
                        liknoflipupperarmstretchblendnodeblender_plug = liknoflipupperarmstretchblendnode_fs.findPlug("blender", False)
                        liknofliplowerarmstretchblendnodeinp1g_plug = liknofliplowerarmstretchblendnode_fs.findPlug("color1G", False)
                        liknofliplowerarmstretchblendnodeotp_plug = liknofliplowerarmstretchblendnode_fs.findPlug("outputG", False)
                        liknofliplowerarmstretchblendnodeblender_plug = liknofliplowerarmstretchblendnode_fs.findPlug("blender", False)

                        self.MDG2_mod.disconnect(noflipleftelbowkeyotp_plug, noflipleftelbowjnttty_plug)
                        self.MDG2_mod.disconnect(nofliplefthandkeyotp_plug, nofliplefthandjntty_plug)
                        self.MDG2_mod.connect(likctrlelbowupperarm_plug, ikautoelbowupperarmInp1Y_plug)
                        self.MDG2_mod.connect(noflipleftelbowkeyotp_plug, ikautoelbowupperarmInp2Y_plug)
                        self.MDG2_mod.connect(likctrlelbowlowerarm_plug, ikautoelbowlowerarmInp1Y_plug)
                        self.MDG2_mod.connect(nofliplefthandkeyotp_plug, ikautoelbowlowerarmInp2Y_plug)
                        self.MDG2_mod.connect(likautoelbowupperarmOtp_plug, liknoflipupperarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likautoelbowlowerarmOtp_plug, liknofliplowerarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(liknoflipupperarmstretchblendnodeotp_plug, noflipleftelbowjnttty_plug)
                        self.MDG2_mod.connect(liknofliplowerarmstretchblendnodeotp_plug, nofliplefthandjntty_plug)
                        self.MDG2_mod.connect(iklefthandstretch_plug, liknoflipupperarmstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(iklefthandstretch_plug, liknofliplowerarmstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikleftforearmtranslateY = `getAttr "NoFlipLeftUpperArmStretch_blend.color1G"`; setAttr "NoFlipLeftUpperArmStretch_blend.color2G" $noflipikleftforearmtranslateY;')
                        self.MDG2_mod.commandToExecute('float $noflipiklefthandtranslateY = `getAttr "NoFlipLeftLowerArmStretch_blend.color1G"`; setAttr "NoFlipLeftLowerArmStretch_blend.color2G" $noflipiklefthandtranslateY;')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftForeArmTrans_multiply.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftHandTrans_multiply.operation" 1')

                        leftarmlobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        noflipleftlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        noflipleftfootlobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(leftarmlobalscalenode, "IKLeftArmGlobalScale_Average")
                        self.MDG2_mod.renameNode(noflipleftlegglobalscalenode, "IKNoFlipLeftForeArmGlobalScale_Average")
                        self.MDG2_mod.renameNode(noflipleftfootlobalscalenode, "IKNoFlipLeftHandGlobalScale_Average")

                        leftarmglobalscale_fs = om2.MFnDependencyNode(leftarmlobalscalenode)
                        noflipleftarmglobalscale_fs = om2.MFnDependencyNode(noflipleftlegglobalscalenode)
                        nofliplefthandlobalscale_fs = om2.MFnDependencyNode(noflipleftfootlobalscalenode)
                        masterlctrl_fs = om2.MFnDependencyNode(obj_masterctrl2)

                        likupperarmjntDist_plug = likupperarmjntDist_fs.findPlug("distance", False)
                        liklowerarmjntDist_plug = liklowerarmjntDist_fs.findPlug("distance", False)
                        likarmjntDist_plug = likarmjntDist_fs.findPlug("distance", False)
                        masterlctrlsy_plug = masterlctrl_fs.findPlug("scaleY", False)
                        leftarmglobalscaleInp1Y_plug = leftarmglobalscale_fs.findPlug("input1Y", False)
                        leftarmglobalscaleInp2Y_plug = leftarmglobalscale_fs.findPlug("input2Y", False)
                        leftarmglobalscaleOtpY_plug = leftarmglobalscale_fs.findPlug("outputY", False)
                        noflipleftarmglobalscaleInp1Y_plug = noflipleftarmglobalscale_fs.findPlug("input1Y", False)
                        noflipleftarmglobalscaleInp2Y_plug = noflipleftarmglobalscale_fs.findPlug("input2Y", False)
                        noflipleftarmglobalscaleOtpY_plug = noflipleftarmglobalscale_fs.findPlug("outputY", False)
                        nofliplefthandlobalscaleInp1Y_plug = nofliplefthandlobalscale_fs.findPlug("input1Y", False)
                        nofliplefthandlobalscaleInp2Y_plug = nofliplefthandlobalscale_fs.findPlug("input2Y", False)
                        nofliplefthandlobalscaleOtpY_plug = nofliplefthandlobalscale_fs.findPlug("outputY", False)
                        noflipleftelbowkeyinp_plug = noflipleftelbowkey_fs.findPlug("input", False)
                        nofliplefthandkeyinp_plug = nofliplefthandkey_fs.findPlug("input", False)
                        pvleftelbowkeyinp_plug = pvleftelbowkey_fs.findPlug("input", False)
                        pvlefthandkeyinp_plug = pvlefthandkey_fs.findPlug("input", False)

                        self.MDG2_mod.disconnect(likarmjntDist_plug, noflipleftelbowkeyinp_plug)
                        self.MDG2_mod.disconnect(likarmjntDist_plug, nofliplefthandkeyinp_plug)
                        self.MDG2_mod.disconnect(likarmjntDist_plug, pvleftelbowkeyinp_plug)
                        self.MDG2_mod.disconnect(likarmjntDist_plug, pvlefthandkeyinp_plug)
                        self.MDG2_mod.connect(liklowerarmjntDist_plug, nofliplefthandlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(likupperarmjntDist_plug, noflipleftarmglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(liklowerarmjntDist_plug, nofliplefthandlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, noflipleftarmglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, nofliplefthandlobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(noflipleftarmglobalscaleOtpY_plug, likpvupperarmtransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(nofliplefthandlobalscaleOtpY_plug, likpvlowerarmtransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likarmjntDist_plug, leftarmglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, leftarmglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(leftarmglobalscaleOtpY_plug, noflipleftelbowkeyinp_plug)
                        self.MDG2_mod.connect(leftarmglobalscaleOtpY_plug, nofliplefthandkeyinp_plug)
                        self.MDG2_mod.connect(leftarmglobalscaleOtpY_plug, pvleftelbowkeyinp_plug)
                        self.MDG2_mod.connect(leftarmglobalscaleOtpY_plug, pvlefthandkeyinp_plug)
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipLeftForeArmGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipLeftHandGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKLeftArmGlobalScale_Average.operation" 2')

                    # else:
                    #     self.MDG2_mod.commandToExecute('delete "IkStretchyLeftJointArm_grp"')
                    #     self.MDG2_mod.commandToExecute('delete "LeftArmIkCluster_grp"')
            else:
                self.MDG2_mod.commandToExecute('delete "Biped_IkLeftHand_null"')
                self.MDG2_mod.commandToExecute('setAttr "IkLeftArm.visibility" 0')

            lfinger_sl_ls = om2.MSelectionList()
            lfinger_sl_ls.add("LeftFinger*")

            for index in range(lfinger_sl_ls.length()):
                jnt_obj = lfinger_sl_ls.getDependNode(index)
                jnt_string = lfinger_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    lfingerctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    lfingerctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(lfingerctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(lfingerctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    lfingermultMatrix_fs = om2.MFnDependencyNode(lfingerctrl_multMatrix)
                    lfingerdecomposeMatrix_fs = om2.MFnDependencyNode(lfingerctrl_decomposeMatrix)
                    lfingerjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    lfingermultMatrixSum_plug = lfingermultMatrix_fs.findPlug("matrixSum", False)
                    lfingerdecomposeInpMatrix_plug = lfingerdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    lfingerdecomposeOtpTrans_plug = lfingerdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    lfingerdecomposeOtpRot_plug = lfingerdecomposeMatrix_fs.findPlug("outputRotate", False)
                    lfingerjntTrans_plug = lfingerjnt_fs.findPlug("translate", False)
                    lfingerjntRot_plug = lfingerjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(lfingermultMatrixSum_plug, lfingerdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(lfingerdecomposeOtpTrans_plug, lfingerjntTrans_plug)
                    self.MDG2_mod.connect(lfingerdecomposeOtpRot_plug, lfingerjntRot_plug)
                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

                    if cmds.objExists("Biped_{0}4_ctrl".format(str(jnt_string)[3:][:-4])):
                        self.MDG2_mod.commandToExecute('setAttr "Biped_{0}4_ctrl.visibility" 0'.format(str(jnt_string)[3:][:-4]))

            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "spread" -niceName "Spread" -attributeType double -keyable true -defaultValue 0 Biped_LeftFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "relax" -niceName "Relax" -attributeType double -minValue -10 -maxValue 10 -keyable true -defaultValue 0 Biped_LeftFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftThumbOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftIndexOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftMiddleOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftRingOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_LeftPinkyOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_LeftThumbOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_LeftIndexOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_LeftMiddleOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_LeftRingOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_LeftPinkyOptions_ctrl')
            self.MDG2_mod.doIt()

            lfingercurl_sl_ls = om2.MSelectionList()
            lfingercurl_sl_ls.add("Biped_LeftFinger*_curl")

            # self.MDG2_mod.commandToExecute('float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerthumbrotateZ = `getAttr "Biped_LeftFingerThumb1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $leftfingeroptionsspread -attribute "rotateZ" -value $leftfingerthumbrotateZ Biped_LeftFingerThumb1_globalcurl;')
            # self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 20.0; float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerthumbrotateZ = `getAttr "Biped_LeftFingerThumb1_globalcurl.rotateZ"`; float $totalleftfingeroptionsspread = $leftfingeroptionsspread + $add1; float $totalleftthumbrotateZ = $leftfingerthumbrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $totalleftfingeroptionsspread -attribute "rotateZ" -value $totalleftthumbrotateZ Biped_LeftFingerThumb1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerindexrotateZ = `getAttr "Biped_LeftFingerIndex1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $leftfingeroptionsspread -attribute "rotateZ" -value $leftfingerindexrotateZ Biped_LeftFingerIndex1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 10.0; float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerindexrotateZ = `getAttr "Biped_LeftFingerIndex1_globalcurl.rotateZ"`; float $totalleftfingeroptionsspread = $leftfingeroptionsspread + $add1; float $totalleftindexrotateZ = $leftfingerindexrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $totalleftfingeroptionsspread -attribute "rotateZ" -value $totalleftindexrotateZ Biped_LeftFingerIndex1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingermiddlerotateZ = `getAttr "Biped_LeftFingerMiddle1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $leftfingeroptionsspread -attribute "rotateZ" -value $leftfingermiddlerotateZ Biped_LeftFingerMiddle1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 2.0; float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingermiddlerotateZ = `getAttr "Biped_LeftFingerMiddle1_globalcurl.rotateZ"`; float $totalleftfingeroptionsspread = $leftfingeroptionsspread + $add1; float $totalleftmiddlerotateZ = $leftfingermiddlerotateZ + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $totalleftfingeroptionsspread -attribute "rotateZ" -value $totalleftmiddlerotateZ Biped_LeftFingerMiddle1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerringrotateZ = `getAttr "Biped_LeftFingerRing1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $leftfingeroptionsspread -attribute "rotateZ" -value $leftfingerringrotateZ Biped_LeftFingerRing1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = -8.0; float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerringrotateZ = `getAttr "Biped_LeftFingerRing1_globalcurl.rotateZ"`; float $totalleftfingeroptionsspread = $leftfingeroptionsspread + $add1; float $totalleftringrotateZ = $leftfingerringrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $totalleftfingeroptionsspread -attribute "rotateZ" -value $totalleftringrotateZ Biped_LeftFingerRing1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerpinkyrotateZ = `getAttr "Biped_LeftFingerPinky1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $leftfingeroptionsspread -attribute "rotateZ" -value $leftfingerpinkyrotateZ Biped_LeftFingerPinky1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = -15.0; float $leftfingeroptionsspread = `getAttr "Biped_LeftFingerOptions_ctrl.spread"`; float $leftfingerpinkyrotateZ = `getAttr "Biped_LeftFingerPinky1_globalcurl.rotateZ"`; float $totalleftfingeroptionsspread = $leftfingeroptionsspread + $add1; float $totalleftpinkyrotateZ = $leftfingerpinkyrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.spread -driverValue $totalleftfingeroptionsspread -attribute "rotateZ" -value $totalleftpinkyrotateZ Biped_LeftFingerPinky1_globalcurl;')

            for index in range(lfingercurl_sl_ls.length()):
                lfingercurl_obj = lfingercurl_sl_ls.getDependNode(index)
                lfingercurl_string = lfingercurl_sl_ls.getSelectionStrings(index)

                if lfingercurl_obj.hasFn(om2.MFn.kTransform):
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_Left{0}Options_ctrl.curl Biped_LeftFinger{1}_curl.rotateX'.format(str(lfingercurl_string)[19:][:-9], str(lfingercurl_string)[19:][:-8]))
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_Left{0}Options_ctrl.lean Biped_LeftFinger{1}_curl.rotateZ'.format(str(lfingercurl_string)[19:][:-9], str(lfingercurl_string)[19:][:-8]))
                    # self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftFingerOptions_ctrl.curl Biped_LeftFinger{1}_globalcurl.rotateX'.format(str(lfingercurl_string)[19:][:-9], str(lfingercurl_string)[19:][:-8]))

                for index in range(1,5):
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $leftfingeroptionscurl -attribute "rotateX" -value $leftfingerindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftindexrotateX = $leftfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftindexrotateX = $leftfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $leftfingeroptionscurl -attribute "rotateX" -value $leftfingermiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftmiddlerotateX = $leftfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftmiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftmiddlerotateX = $leftfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftmiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $leftfingeroptionscurl -attribute "rotateX" -value $leftfingerringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftringrotateX = $leftfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftringrotateX = $leftfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $leftfingeroptionscurl -attribute "rotateX" -value $leftfingerpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftpinkyrotateX = $leftfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $leftfingeroptionscurl = `getAttr "Biped_LeftFingerOptions_ctrl.curl"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; float $totalleftfingeroptionscurl = $leftfingeroptionscurl + $add1; float $totalleftpinkyrotateX = $leftfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.curl -driverValue $totalleftfingeroptionscurl -attribute "rotateX" -value $totalleftpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))

                    self.MDG2_mod.commandToExecute('float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $leftfingeroptionsrelax -attribute "rotateX" -value $leftfingerindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 15.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftindexrotateX = $leftfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 5.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerindexrotateX = `getAttr "Biped_LeftFingerIndex{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftindexrotateX = $leftfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftindexrotateX Biped_LeftFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $leftfingeroptionsrelax -attribute "rotateX" -value $leftfingermiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 10.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftmiddlerotateX = $leftfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftmiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 8.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingermiddlerotateX = `getAttr "Biped_LeftFingerMiddle{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftmiddlerotateX = $leftfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftmiddlerotateX Biped_LeftFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $leftfingeroptionsrelax -attribute "rotateX" -value $leftfingerringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 8.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftringrotateX = $leftfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 10.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerringrotateX = `getAttr "Biped_LeftFingerRing{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftringrotateX = $leftfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftringrotateX Biped_LeftFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $leftfingeroptionsrelax -attribute "rotateX" -value $leftfingerpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 5.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftpinkyrotateX = $leftfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 15.0; float $leftfingeroptionsrelax = `getAttr "Biped_LeftFingerOptions_ctrl.relax"`; float $leftfingerpinkyrotateX = `getAttr "Biped_LeftFingerPinky{0}_globalcurl.rotateX"`; float $totalleftfingeroptionsrelax = $leftfingeroptionsrelax + $add1; float $totalleftpinkyrotateX = $leftfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_LeftFingerOptions_ctrl.relax -driverValue $totalleftfingeroptionsrelax -attribute "rotateX" -value $totalleftpinkyrotateX Biped_LeftFingerPinky{0}_globalcurl;'.format(index))

                    self.MDG2_mod.commandToExecute('selectKey Biped_LeftFingerThumb{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_LeftFingerIndex{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_LeftFingerMiddle{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_LeftFingerRing{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_LeftFingerPinky{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))

            lfingergrp_sl_ls = om2.MSelectionList()
            lfingergrp_sl_ls.add("Biped_LeftFingers_null")
            grp_obj = lfingergrp_sl_ls.getDependNode(0)

            lfingergrp_multMatrix = self.MDG2_mod.createNode("multMatrix")
            lfingergrp_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(lfingergrp_multMatrix, "LeftFingers_multMatrix")
            self.MDG2_mod.renameNode(lfingergrp_decomposeMatrix, "LeftFingers_decomposeMatrix")

            lfingergrpmultMatrix_fs = om2.MFnDependencyNode(lfingergrp_multMatrix)
            lfingergrpdecomposeMatrix_fs = om2.MFnDependencyNode(lfingergrp_decomposeMatrix)
            lfingergrp_fs = om2.MFnDependencyNode(grp_obj)

            lfingergrpmultMatrixSum_plug = lfingergrpmultMatrix_fs.findPlug("matrixSum", False)
            lfingergrpdecomposeInpMatrix_plug = lfingergrpdecomposeMatrix_fs.findPlug("inputMatrix", False)
            lfingergrpdecomposeOtpTrans_plug = lfingergrpdecomposeMatrix_fs.findPlug("outputTranslate", False)
            lfingergrpdecomposeOtpRot_plug = lfingergrpdecomposeMatrix_fs.findPlug("outputRotate", False)
            lfingergrpjntTrans_plug = lfingergrp_fs.findPlug("translate", False)
            lfingergrpjntRot_plug = lfingergrp_fs.findPlug("rotate", False)

            self.MDG2_mod.commandToExecute('connectAttr -force LeftHand.worldMatrix[0] LeftFingers_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftFingers_null.parentInverseMatrix[0] LeftFingers_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(lfingergrpmultMatrixSum_plug, lfingergrpdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(lfingergrpdecomposeOtpTrans_plug, lfingergrpjntTrans_plug)
            self.MDG2_mod.connect(lfingergrpdecomposeOtpRot_plug, lfingergrpjntRot_plug)

            iklleg_sl_ls = om2.MSelectionList()
            iklleg_sl_ls.add("IkLeftUpLeg")
            iklleg_sl_ls.add("IkLeftLeg")
            iklleg_sl_ls.add("IkLeftFoot")
            iklleg_sl_ls.add("IkLeftToeBase")

            noflipiklleg_sl_ls = om2.MSelectionList()
            noflipiklleg_sl_ls.add("IkNoFlipLeftUpLeg")
            noflipiklleg_sl_ls.add("IkNoFlipLeftLeg")
            noflipiklleg_sl_ls.add("IkNoFlipLeftFoot")

            pviklleg_sl_ls = om2.MSelectionList()
            pviklleg_sl_ls.add("IkPVLeftUpLeg")
            pviklleg_sl_ls.add("IkPVLeftLeg")
            pviklleg_sl_ls.add("IkPVLeftFoot")

            if cmds.objExists("NoFlipLeftLeg_Ik") or self.autostretch.currentIndex() == 1:
                llegoptions_sl_ls = om2.MSelectionList()
                llegoptions_sl_ls.add("Biped_LeftFootOptions_ctrl")
                llegoptions_obj = llegoptions_sl_ls.getDependNode(0)

            if cmds.objExists("NoFlipLeftLeg_Ik") and cmds.objExists("PVLeftLeg_Ik"):
                self.MDG2_mod.commandToExecute('addAttr -longName "fkik" -niceName "Fk/Ik" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "kneeswitch" -niceName "Auto/Manual Knee" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')
                self.MDG2_mod.doIt()

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "legcontrolsvis" -niceName "Leg Controls Vis" -attributeType bool -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkLeftUpLeg_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkLeftLeg_ctrl')
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_LeftFootOptions_ctrl.legcontrolsvis LeftLegIkCluster_grp.visibility')
                self.MDG2_mod.doIt()

            for index in range(fklleg_sl_ls.length()):
                jnt_obj = fklleg_sl_ls.getDependNode(index)
                jnt_string = fklleg_sl_ls.getSelectionStrings(index)

                ikjnt_obj = iklleg_sl_ls.getDependNode(index)
                ikjnt_string = fklleg_sl_ls.getSelectionStrings(index)

                bindjnt_obj = lleg_sl_ls.getDependNode(index)
                bindjnt_string = lleg_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    llegctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    llegctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(llegctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(llegctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    llegmultMatrix_fs = om2.MFnDependencyNode(llegctrl_multMatrix)
                    llegdecomposeMatrix_fs = om2.MFnDependencyNode(llegctrl_decomposeMatrix)
                    llegjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    llegmultMatrixSum_plug = llegmultMatrix_fs.findPlug("matrixSum", False)
                    llegdecomposeInpMatrix_plug = llegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    llegdecomposeOtpTrans_plug = llegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    llegdecomposeOtpRot_plug = llegdecomposeMatrix_fs.findPlug("outputRotate", False)
                    llegjntTrans_plug = llegjnt_fs.findPlug("translate", False)
                    llegjntRot_plug = llegjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(llegmultMatrixSum_plug, llegdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(llegdecomposeOtpTrans_plug, llegjntTrans_plug)
                    self.MDG2_mod.connect(llegdecomposeOtpRot_plug, llegjntRot_plug)

                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

                if bindjnt_obj.hasFn(om2.MFn.kJoint):
                    if cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3])) != 0:
                        jointort_xattr = cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]))
                        jointort_yattr = cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]))
                        jointort_zattr = cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]))

                        cmds.setAttr("{0}.rotateX".format(str(bindjnt_string)[3:][:-3]), jointort_xattr)
                        cmds.setAttr("{0}.rotateY".format(str(bindjnt_string)[3:][:-3]), jointort_yattr)
                        cmds.setAttr("{0}.rotateZ".format(str(bindjnt_string)[3:][:-3]), jointort_zattr)

                        cmds.setAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]), 0)

                    legjoint_fs = om2.MFnDependencyNode(bindjnt_obj)
                    fklegjoint_fs = om2.MFnDependencyNode(jnt_obj)

                    legjointtransinp_plug = legjoint_fs.findPlug("translate", False)
                    legjointrotinp_plug = legjoint_fs.findPlug("rotate", False)
                    fklegjointtransotp_plug = fklegjoint_fs.findPlug("translate", False)
                    fklegjointrototp_plug = fklegjoint_fs.findPlug("rotate", False)

                    if cmds.objExists("NoFlipLeftLeg_Ik") and cmds.objExists("PVLeftLeg_Ik"):

                        llegoptions_fs = om2.MFnDependencyNode(llegoptions_obj)
                        llegoptionsfkik_plug = llegoptions_fs.findPlug("fkik", False)
                        llegoptionskneeswitch_plug = llegoptions_fs.findPlug("kneeswitch", False)

                        legrotblendnode = self.MDG2_mod.createNode("blendColors")
                        legtransblendnode = self.MDG2_mod.createNode("blendColors")
                        legjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        self.MDG2_mod.renameNode(legjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(legrotblendnode, str(bindjnt_string)[2:][:-3] + "Rot_blend")
                        self.MDG2_mod.renameNode(legtransblendnode, str(bindjnt_string)[2:][:-3] + "Trans_blend")

                        legrotblendnode_fs = om2.MFnDependencyNode(legrotblendnode)
                        legtransblendnode_fs = om2.MFnDependencyNode(legtransblendnode)
                        legdecomposeMatrix_fs = om2.MFnDependencyNode(legjoint_decomposeMatrix)
                        iklegjoint_fs = om2.MFnDependencyNode(ikjnt_obj)

                        legdecomposeInpMatrix_plug = legdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        legdecomposeOtpRot_plug = legdecomposeMatrix_fs.findPlug("outputRotate", False)
                        legdecomposeOtpTrans_plug = legdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        legrotblendnodeinp1_plug = legrotblendnode_fs.findPlug("color1", False)
                        legrotblendnodeinp2_plug = legrotblendnode_fs.findPlug("color2", False)
                        legrotblendnodeotp_plug = legrotblendnode_fs.findPlug("output", False)
                        legrotblendnodeblender_plug = legrotblendnode_fs.findPlug("blender", False)
                        legtransblendnodeinp1_plug = legtransblendnode_fs.findPlug("color1", False)
                        legtransblendnodeinp2_plug = legtransblendnode_fs.findPlug("color2", False)
                        legtransblendnodeotp_plug = legtransblendnode_fs.findPlug("output", False)
                        legtransblendnodeblender_plug = legtransblendnode_fs.findPlug("blender", False)
                        iklegjointotp_plug = iklegjoint_fs.findPlug("matrix", False)

                        self.MDG2_mod.connect(iklegjointotp_plug, legdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(legdecomposeOtpRot_plug, legrotblendnodeinp1_plug)
                        self.MDG2_mod.connect(legdecomposeOtpTrans_plug, legtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(fklegjointrototp_plug, legrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(fklegjointtransotp_plug, legtransblendnodeinp2_plug)
                        self.MDG2_mod.connect(legrotblendnodeotp_plug, legjointrotinp_plug)
                        self.MDG2_mod.connect(legtransblendnodeotp_plug, legjointtransinp_plug)
                        self.MDG2_mod.connect(llegoptionsfkik_plug, legrotblendnodeblender_plug)
                        self.MDG2_mod.connect(llegoptionsfkik_plug, legtransblendnodeblender_plug)

                        if index < 3:
                            noflipjnt_obj = noflipiklleg_sl_ls.getDependNode(index)
                            noflipjnt_string = noflipiklleg_sl_ls.getSelectionStrings(index)

                            pvjnt_obj = pviklleg_sl_ls.getDependNode(index)
                            pvjnt_string = pviklleg_sl_ls.getSelectionStrings(index)

                            legrotblendnode = self.MDG2_mod.createNode("blendColors")
                            legtransblendnode = self.MDG2_mod.createNode("blendColors")
                            nofliplegjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                            pvlegjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                            self.MDG2_mod.renameNode(nofliplegjoint_decomposeMatrix, str(noflipjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                            self.MDG2_mod.renameNode(pvlegjoint_decomposeMatrix, str(pvjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                            self.MDG2_mod.renameNode(legrotblendnode, str(bindjnt_string)[2:][:-3] + "Rot_kneeblend")
                            self.MDG2_mod.renameNode(legtransblendnode, str(bindjnt_string)[2:][:-3] + "Trans_kneeblend")

                            legrotblendnode_fs = om2.MFnDependencyNode(legrotblendnode)
                            legtransblendnode_fs = om2.MFnDependencyNode(legtransblendnode)
                            nofliplegdecomposeMatrix_fs = om2.MFnDependencyNode(nofliplegjoint_decomposeMatrix)
                            pvlegdecomposeMatrix_fs = om2.MFnDependencyNode(pvlegjoint_decomposeMatrix)
                            noflipiklegjoint_fs = om2.MFnDependencyNode(noflipjnt_obj)
                            pviklegjoint_fs = om2.MFnDependencyNode(pvjnt_obj)
                            pviklegctrl_fs = om2.MFnDependencyNode(self.pvllegkneectrl_tn)

                            nofliplegdecomposeInpMatrix_plug = nofliplegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                            nofliplegdecomposeOtpRot_plug = nofliplegdecomposeMatrix_fs.findPlug("outputRotate", False)
                            nofliplegdecomposeOtpTrans_plug = nofliplegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                            pvlegdecomposeInpMatrix_plug = pvlegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                            pvlegdecomposeOtpRot_plug = pvlegdecomposeMatrix_fs.findPlug("outputRotate", False)
                            pvlegdecomposeOtpTrans_plug = pvlegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                            legrotblendnodeinp1_plug = legrotblendnode_fs.findPlug("color1", False)
                            legrotblendnodeinp2_plug = legrotblendnode_fs.findPlug("color2", False)
                            legrotblendnodeotp_plug = legrotblendnode_fs.findPlug("output", False)
                            legrotblendnodeblender_plug = legrotblendnode_fs.findPlug("blender", False)
                            legtransblendnodeinp1_plug = legtransblendnode_fs.findPlug("color1", False)
                            legtransblendnodeinp2_plug = legtransblendnode_fs.findPlug("color2", False)
                            legtransblendnodeotp_plug = legtransblendnode_fs.findPlug("output", False)
                            legtransblendnodeblender_plug = legtransblendnode_fs.findPlug("blender", False)
                            noflipiklegjointotp_plug = noflipiklegjoint_fs.findPlug("matrix", False)
                            pviklegjointotp_plug = pviklegjoint_fs.findPlug("matrix", False)
                            iklegjointinpTrans_plug = iklegjoint_fs.findPlug("translate", False)
                            iklegjointinpRot_plug = iklegjoint_fs.findPlug("jointOrient", False)
                            pviklegctrlVis_plug = pviklegctrl_fs.findPlug("visibility", False)

                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 1 Biped_FkLeftUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 0 Biped_FkLeftUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_FkLeftUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 0 Biped_IkLeftFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 1 Biped_IkLeftFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkLeftFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_LeftFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkLeftFoot_ctrl')
                            self.MDG2_mod.connect(noflipiklegjointotp_plug, nofliplegdecomposeInpMatrix_plug)
                            self.MDG2_mod.connect(pviklegjointotp_plug, pvlegdecomposeInpMatrix_plug)
                            self.MDG2_mod.connect(pvlegdecomposeOtpRot_plug, legrotblendnodeinp1_plug)
                            self.MDG2_mod.connect(pvlegdecomposeOtpTrans_plug, legtransblendnodeinp1_plug)
                            self.MDG2_mod.connect(nofliplegdecomposeOtpRot_plug, legrotblendnodeinp2_plug)
                            self.MDG2_mod.connect(nofliplegdecomposeOtpTrans_plug, legtransblendnodeinp2_plug)
                            self.MDG2_mod.connect(legrotblendnodeotp_plug, iklegjointinpRot_plug)
                            self.MDG2_mod.connect(legtransblendnodeotp_plug, iklegjointinpTrans_plug)
                            self.MDG2_mod.connect(llegoptionskneeswitch_plug, legrotblendnodeblender_plug)
                            self.MDG2_mod.connect(llegoptionskneeswitch_plug, legtransblendnodeblender_plug)
                            self.MDG2_mod.connect(llegoptionskneeswitch_plug, pviklegctrlVis_plug)

                    else:
                        self.MDG2_mod.connect(fklegjointtransotp_plug, legjointtransinp_plug)
                        self.MDG2_mod.connect(fklegjointrototp_plug, legjointrotinp_plug)

                if self.autostretch.currentIndex() == 1:
                    if index < 2:
                        iklleggrp_sl_lst = om2.MSelectionList()
                        iklleggrp_sl_lst.add("LeftUpperLegIkCluster_grp")
                        iklleggrp_sl_lst.add("LeftUpperLegIkCluster2_grp")
                        iklleggrp_sl_lst.add("LeftLowerLegIkCluster_grp")
                        iklleggrp_sl_lst.add("LeftLowerLegIkCluster2_grp")
                        iklleggrp_sl_lst.add("LeftLowerLegIkCluster0_grp")
                        iklleggrp_sl_lst.add("IkCvSplineLeftUpperLeg2")
                        grp_legupperikcluster = iklleggrp_sl_lst.getDependNode(0)
                        grp_legupperikcluster2 = iklleggrp_sl_lst.getDependNode(1)
                        grp_leglowerikcluster = iklleggrp_sl_lst.getDependNode(2)
                        grp_leglowerikcluster2 = iklleggrp_sl_lst.getDependNode(3)
                        grp_leglowerikcluster0 = iklleggrp_sl_lst.getDependNode(4)
                        grp_legupperikcvcluster2 = iklleggrp_sl_lst.getDependNode(5)

                        llegjoint_multMatrix = self.MDG2_mod.createNode("multMatrix")
                        legjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                        llegmultMatrix_fs = om2.MFnDependencyNode(llegjoint_multMatrix)
                        llegdecomposeMatrix_fs = om2.MFnDependencyNode(legjoint_decomposeMatrix)
                        iklupperleggrp_fs = om2.MFnDependencyNode(grp_legupperikcluster)
                        ikllowerleggrp_fs = om2.MFnDependencyNode(grp_leglowerikcluster)
                        iklupperlegcv2_fs = om2.MFnDependencyNode(grp_legupperikcvcluster2)
                        ikllowerleggrp0_fs = om2.MFnDependencyNode(grp_leglowerikcluster0)

                        llegmultMatrixSum_plug = llegmultMatrix_fs.findPlug("matrixSum", False)
                        llegdecomposeInpMatrix_plug = llegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        llegdecomposeOtpTrans_plug = llegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        llegdecomposeOtpRot_plug = llegdecomposeMatrix_fs.findPlug("outputRotate", False)
                        iklupperleggrpTrans_plug = iklupperleggrp_fs.findPlug("translate", False)
                        iklupperleggrpRot_plug = iklupperleggrp_fs.findPlug("rotate", False)
                        ikllowerleggrpTrans_plug = ikllowerleggrp_fs.findPlug("translate", False)
                        ikllowerleggrpRot_plug = ikllowerleggrp_fs.findPlug("rotate", False)
                        iklupperrlegcv2Trans_plug = iklupperlegcv2_fs.findPlug("translate", False)
                        ikllowerleggrp0Trans_plug = ikllowerleggrp0_fs.findPlug("translate", False)
                        iklupperrlegcv2RotY_plug = iklupperlegcv2_fs.findPlug("rotateY", False)
                        ikllowerleggrp0RotY_plug = ikllowerleggrp0_fs.findPlug("rotateY", False)

                        self.MDG2_mod.renameNode(llegjoint_multMatrix, str(bindjnt_string)[2:][:-3] + "_multMatrix")
                        self.MDG2_mod.renameNode(legjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3] + "_decomposeMatrix")
                        self.MDG2_mod.commandToExecute('connectAttr -force {0}.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(bindjnt_string)[3:][:-3]))
                        self.MDG2_mod.connect(llegmultMatrixSum_plug, llegdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(iklupperrlegcv2Trans_plug, ikllowerleggrp0Trans_plug)
                        self.MDG2_mod.connect(iklupperrlegcv2RotY_plug, ikllowerleggrp0RotY_plug)

                        fkllegstretch_expression = om1.MFnExpression()

                        if index == 0:
                            fkllegstretch_expression.create("Biped_StretchyLeftLeg_null.translateY = Biped_FkLeftUpLeg_ctrl.stretchy")
                            fkllegstretch_expression.create("Biped_StretchyLeftLeg_null.translateZ = Biped_FkLeftLeg_ctrl.translateY/10")

                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperLegIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(llegdecomposeOtpTrans_plug, iklupperleggrpTrans_plug)
                            self.MDG2_mod.connect(llegdecomposeOtpRot_plug, iklupperleggrpRot_plug)

                            lupperlegcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            lupperlegcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            lupperlegcluster2multMatrix_fs = om2.MFnDependencyNode(lupperlegcluster2_multMatrix)
                            lupperlegcluster2decomposeMatrix_fs = om2.MFnDependencyNode(lupperlegcluster2_decomposeMatrix)
                            lupperlegcluster2_fs = om2.MFnDependencyNode(grp_legupperikcluster2)

                            lupperlegcluster2multMatrixSum_plug = lupperlegcluster2multMatrix_fs.findPlug("matrixSum", False)
                            lupperlegcluster2decomposeInpMatrix_plug = lupperlegcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            lupperlegcluster2decomposeOtpTrans_plug = lupperlegcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            lupperlegcluster2Trans_plug = lupperlegcluster2_fs.findPlug("translate", False)

                            self.MDG2_mod.renameNode(lupperlegcluster2_multMatrix, "LeftUpperLegCluster2_multMatrix")
                            self.MDG2_mod.renameNode(lupperlegcluster2_decomposeMatrix, "LeftUpperLegCluster2_decomposeMatrix")
                            self.MDG2_mod.connect(lupperlegcluster2multMatrixSum_plug, lupperlegcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLeg.worldMatrix[0] LeftUpperLegCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftUpperLegIkCluster2_grp.parentInverseMatrix[0] LeftUpperLegCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(lupperlegcluster2decomposeOtpTrans_plug, lupperlegcluster2Trans_plug)

                        elif index == 1:
                            fkllegstretch_expression.create("Biped_StretchyLeftFoot_null.translateY = Biped_FkLeftLeg_ctrl.stretchy")
                            fkllegstretch_expression.create("Biped_StretchyLeftFoot_null.translateZ = Biped_StretchyLeftFoot_null.translateY*(-1.5)")

                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerLegIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(llegdecomposeOtpTrans_plug, ikllowerleggrpTrans_plug)
                            self.MDG2_mod.connect(llegdecomposeOtpRot_plug, ikllowerleggrpRot_plug)

                            llowerlegcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            llowerlegcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            llowerlegcluster2multMatrix_fs = om2.MFnDependencyNode(llowerlegcluster2_multMatrix)
                            llowerlegcluster2decomposeMatrix_fs = om2.MFnDependencyNode(llowerlegcluster2_decomposeMatrix)
                            llowerlegcluster2_fs = om2.MFnDependencyNode(grp_leglowerikcluster2)

                            llowerlegcluster2multMatrixSum_plug = llowerlegcluster2multMatrix_fs.findPlug("matrixSum", False)
                            llowerlegcluster2decomposeInpMatrix_plug = llowerlegcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            llowerlegcluster2decomposeOtpTrans_plug = llowerlegcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            llowerlegcluster2decomposeOtpRot_plug = llowerlegcluster2decomposeMatrix_fs.findPlug("outputRotateY", False)
                            llowerlegcluster2Trans_plug = llowerlegcluster2_fs.findPlug("translate", False)
                            llowerlegcluster2RotY_plug = llowerlegcluster2_fs.findPlug("rotateY", False)

                            self.MDG2_mod.renameNode(llowerlegcluster2_multMatrix, "LeftLowerLegCluster2_multMatrix")
                            self.MDG2_mod.renameNode(llowerlegcluster2_decomposeMatrix, "LeftLowerLegCluster2_decomposeMatrix")
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftFoot.worldMatrix[0] LeftLowerLegCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force LeftLowerLegIkCluster2_grp.parentInverseMatrix[0] LeftLowerLegCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(llowerlegcluster2multMatrixSum_plug, llowerlegcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.connect(llowerlegcluster2decomposeOtpTrans_plug, llowerlegcluster2Trans_plug)
                            self.MDG2_mod.connect(llowerlegcluster2decomposeOtpRot_plug, llowerlegcluster2RotY_plug)

                elif cmds.objExists("LeftLegIkCluster_grp") and cmds.objExists("IkStretchyLeftJointLeg_grp"):
                    self.MDG2_mod.commandToExecute('delete "LeftLegIkCluster_grp"')
                    self.MDG2_mod.doIt()

            lleggrp_sl_ls = om2.MSelectionList()
            lleggrp_sl_ls.add("FkLeftJointLeg_grp")
            lleggrp_sl_ls.add("LeftJointLeg_grp")
            fklleggrp_obj = lleggrp_sl_ls.getDependNode(0)
            lleggrp_obj = lleggrp_sl_ls.getDependNode(1)

            fklleggrp_fs = om2.MFnDependencyNode(fklleggrp_obj)
            lleggrp_fs = om2.MFnDependencyNode(lleggrp_obj)

            fklleggrpScal_plug = fklleggrp_fs.findPlug("scale", False)
            lleggrpScal_plug = lleggrp_fs.findPlug("scale", False)

            self.MDG2_mod.connect(masterdecomposeOtpScale_plug, fklleggrpScal_plug)
            self.MDG2_mod.connect(masterdecomposeOtpScale_plug, lleggrpScal_plug)

            grp_legupperikcluster1 = om1.MObject()
            grp_legupperikcluster2 = om1.MObject()
            obj_stretchyleftleg1 = om1.MObject()

            if self.autostretch.currentIndex() == 1:

                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1.add("Biped_LeftFootOptions_ctrl")
                stretchy_sl_lst1.getDependNode(3, obj_stretchyleftleg1)

                if cmds.objExists("IkSplineLeftUpperLeg0"):
                    iklupperleg_sl_lst = om1.MSelectionList()
                    iklupperleg_sl_lst.add("IkSplineLeftUpperLeg*")
                    iklupperleg_sl_lst.getDependNode(0, obj_root)
                    iklupperleg_sl_lst.getDependNode(iklupperleg_sl_lst.length()-1, obj_endspine)

                    iklupperleggrp_sl_lst = om1.MSelectionList()
                    iklupperleggrp_sl_lst.add("LeftUpperLegIkCluster1_grp")
                    iklupperleggrp_sl_lst.add("LeftUpperLegIkCluster2_grp")
                    iklupperleggrp_sl_lst.getDependNode(0, grp_legupperikcluster1)
                    iklupperleggrp_sl_lst.getDependNode(1, grp_legupperikcluster2)

                    self.MDag_path = om1.MDagPath()
                    rootspine_path = self.MDag_path.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.iklleg_effector = self.IK_Effector.create(obj_endspine)
                    iklleg_effector_path = self.MDag_path.getAPathTo(self.iklleg_effector)

                    self.lleg_ik = self.IK_Handle.create(rootspine_path, iklleg_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(iklupperleg_sl_lst.length()):
                        iklupperleg_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "LeftUpperLeg_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("LeftUpperLeg_SplineCv", "DoNotTouch")

                    llegcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    llegstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    llegstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    llegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    llegscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    liklegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    llegcrvinfo_fs = om1.MFnDependencyNode(llegcrv_info)
                    llegstretchpercent_fs = om1.MFnDependencyNode(llegstretchpercent)
                    llegstretchpow_fs = om1.MFnDependencyNode(llegstretchpow)
                    llegstretchdiv_fs = om1.MFnDependencyNode(llegstretchdiv)
                    llegscalediv_fs = om1.MFnDependencyNode(llegscalediv)
                    liklegstretchdiv_fs = om1.MFnDependencyNode(liklegstretchdiv)
                    liklegstretchcluster1_fs = om1.MFnDependencyNode(grp_legupperikcluster1)
                    liklegstretchcluster2_fs = om1.MFnDependencyNode(grp_legupperikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    llegstretchoption_fs = om1.MFnDependencyNode(obj_stretchyleftleg1)

                    llegcrvinfoarc_plug = llegcrvinfo_fs.findPlug("arcLength")
                    llegstretchpercentinp1y_plug = llegstretchpercent_fs.findPlug("input1Y")
                    llegstretchpercentotp_plug = llegstretchpercent_fs.findPlug("outputY")
                    llegstretchpowinp1x_plug = llegstretchpow_fs.findPlug("input1X")
                    llegstretchpowinp1z_plug = llegstretchpow_fs.findPlug("input1Z")
                    llegstretchpowotpx_plug = llegstretchpow_fs.findPlug("outputX")
                    llegstretchpowotpz_plug = llegstretchpow_fs.findPlug("outputZ")
                    llegstretchdivinp2x_plug = llegstretchdiv_fs.findPlug("input2X")
                    llegstretchdivinp2z_plug = llegstretchdiv_fs.findPlug("input2Z")
                    llegstretchdivotox_plug = llegstretchdiv_fs.findPlug("outputX")
                    llegstretchdivotpz_plug = llegstretchdiv_fs.findPlug("outputZ")
                    llegscaledivinp1y_plug = llegscalediv_fs.findPlug("input1Y")
                    llegscaledivinp2y_plug = llegscalediv_fs.findPlug("input2Y")
                    llegscaledivotpy_plug = llegscalediv_fs.findPlug("outputY")
                    liklegstretchdivinp1_plug = liklegstretchdiv_fs.findPlug("input1")
                    liklegstretchdivotp_plug = liklegstretchdiv_fs.findPlug("output")
                    liklegstretchclust1trans_plug = liklegstretchcluster1_fs.findPlug("translate")
                    liklegstretchclust2trans_plug = liklegstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    llegstretchoption_plug = llegstretchoption_fs.findPlug("stretchable")
                    llegsquashoption_plug = llegstretchoption_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(iklupperleg_sl_lst.length()):
                        if index < iklupperleg_sl_lst.length()-1:
                            iklupperleg_sl_lst.getDependNode(index, objparent)
                            iklupperleg_sl_lst.getDependNode(index+1, objchild)
                            llegparentjnt_fs = om1.MFnDependencyNode(objparent)
                            llegchildjnt_fs = om1.MFnDependencyNode(objchild)
                            llegjnt_syplug = llegparentjnt_fs.findPlug("scaleY")
                            llegjnt_sxplug = llegparentjnt_fs.findPlug("scaleX")
                            llegjnt_szplug = llegparentjnt_fs.findPlug("scaleZ")
                            llegjnt_sotpplug = llegparentjnt_fs.findPlug("scale")
                            llegjnt_invsplug = llegchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(llegstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(llegstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(llegstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, llegjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, llegjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, llegjnt_szplug)
                            ikspinedg_modifier.connect(llegjnt_sotpplug, llegjnt_invsplug)

                    ikspinedg_modifier.renameNode(llegcrv_info, "LeftUpperLegSpline_Info")
                    ikspinedg_modifier.renameNode(llegstretchpercent, "LeftUpperLegStretch_Percent")
                    ikspinedg_modifier.renameNode(llegstretchpow, "LeftUpperLegStretch_Power")
                    ikspinedg_modifier.renameNode(llegstretchdiv, "LeftUpperLegStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "LeftUpperLeg_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.lleg_ik, "LeftUpperLeg_Ik")
                    ikspinedg_modifier.renameNode(self.iklleg_effector, "LeftUpperLeg_effector")
                    ikspinedg_modifier.renameNode(llegscalediv, "IkLeftUpperLegGlobalScale_Average")
                    ikspinedg_modifier.renameNode(liklegstretchdiv, "LeftUpperLegStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "LeftUpperLegStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "LeftUpperLegSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "LeftUpperLeg_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -force LeftUpperLeg_SplineCvShape.worldSpace[0] LeftUpperLeg_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "LeftUpperLegIk_skin" IkCvSplineLeftUpperLeg0 IkCvSplineLeftUpperLeg1 IkCvSplineLeftUpperLeg2 LeftUpperLeg_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLeg_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineLeftUpperLeg0.worldMatrix[0] LeftUpperLeg_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineLeftUpperLeg2.worldMatrix[0] LeftUpperLeg_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -force LeftUpperLeg_SplineCvShape.worldSpace[0] LeftUpperLegSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(llegcrvinfoarc_plug, llegscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, llegscaledivinp2y_plug)
                    ikspinedg_modifier.connect(llegscaledivotpy_plug, llegstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(llegstretchpercentotp_plug, llegstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(llegstretchpercentotp_plug, llegstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(llegstretchpowotpx_plug, llegstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(llegstretchpowotpz_plug, llegstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(liklegstretchclust2trans_plug, liklegstretchdivinp1_plug)
                    ikspinedg_modifier.connect(liklegstretchdivotp_plug, liklegstretchclust1trans_plug)
                    ikspinedg_modifier.connect(llegstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(llegsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $leftupperlegstretchinput1Y = `getAttr "LeftUpperLegStretch_Percent.input1Y"`; setAttr "LeftUpperLegStretch_Percent.input2Y" $leftupperlegstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkLeftUpperLegGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "LeftUpperLegSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                    grp_leglowerikcluster1 = om1.MObject()
                    grp_leglowerikcluster2 = om1.MObject()

                    if cmds.objExists("IkSplineLeftLowerLeg0"):
                        ikllowerleg_sl_lst = om1.MSelectionList()
                        ikllowerleg_sl_lst.add("IkSplineLeftLowerLeg*")
                        ikllowerleg_sl_lst.getDependNode(0, obj_root)
                        ikllowerleg_sl_lst.getDependNode(ikllowerleg_sl_lst.length()-1, obj_endspine)

                        ikllowerleggrp_sl_lst = om1.MSelectionList()
                        ikllowerleggrp_sl_lst.add("LeftLowerLegIkCluster1_grp")
                        ikllowerleggrp_sl_lst.add("LeftLowerLegIkCluster2_grp")
                        ikllowerleggrp_sl_lst.getDependNode(0, grp_leglowerikcluster1)
                        ikllowerleggrp_sl_lst.getDependNode(1, grp_leglowerikcluster2)

                        rootspine_path = self.MDag_path.getAPathTo(obj_root)

                        try:
                            ikspineiksolver_lst.add("ikSplineSolver*")
                        except:
                            cmds.createNode("ikSplineSolver")

                        self.iklleg_effector = self.IK_Effector.create(obj_endspine)
                        iklleg_effector_path = self.MDag_path.getAPathTo(self.iklleg_effector)

                        self.lleg_ik = self.IK_Handle.create(rootspine_path, iklleg_effector_path)

                        obj_array = om1.MPointArray()
                        obj_lst_mpoint = []
                        obj = om1.MObject()
                        for index in range(ikllowerleg_sl_lst.length()):
                            ikllowerleg_sl_lst.getDependNode(index, obj)
                            obj_path = self.MDag_path.getAPathTo(obj)
                            obj_tn = om1.MFnTransform(obj_path)
                            obj_t = obj_tn.translation(om1.MSpace.kWorld)
                            obj_lst_mpoint.append(om1.MPoint(obj_t))
                            obj_array.append(obj_lst_mpoint[index])

                        self.ikspline_cv_tn = ikspinedag_n.create("transform", "LeftLowerLeg_SplineCv")
                        ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                        cmds.parent("LeftLowerLeg_SplineCv", "DoNotTouch")

                        llegcrv_info = ikspinedg_modifier.createNode("curveInfo")
                        llegstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                        llegstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                        llegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                        llegscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                        liklegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                        blendstretch = ikspinedg_modifier.createNode("blendColors")
                        blendsquash = ikspinedg_modifier.createNode("blendColors")

                        llegcrvinfo_fs = om1.MFnDependencyNode(llegcrv_info)
                        llegstretchpercent_fs = om1.MFnDependencyNode(llegstretchpercent)
                        llegstretchpow_fs = om1.MFnDependencyNode(llegstretchpow)
                        llegstretchdiv_fs = om1.MFnDependencyNode(llegstretchdiv)
                        llegscalediv_fs = om1.MFnDependencyNode(llegscalediv)
                        liklegstretchdiv_fs = om1.MFnDependencyNode(liklegstretchdiv)
                        liklegstretchcluster1_fs = om1.MFnDependencyNode(grp_leglowerikcluster1)
                        liklegstretchcluster2_fs = om1.MFnDependencyNode(grp_leglowerikcluster2)
                        blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                        blendsquash_fs = om1.MFnDependencyNode(blendsquash)

                        llegcrvinfoarc_plug = llegcrvinfo_fs.findPlug("arcLength")
                        llegstretchpercentinp1y_plug = llegstretchpercent_fs.findPlug("input1Y")
                        llegstretchpercentotp_plug = llegstretchpercent_fs.findPlug("outputY")
                        llegstretchpowinp1x_plug = llegstretchpow_fs.findPlug("input1X")
                        llegstretchpowinp1z_plug = llegstretchpow_fs.findPlug("input1Z")
                        llegstretchpowotpx_plug = llegstretchpow_fs.findPlug("outputX")
                        llegstretchpowotpz_plug = llegstretchpow_fs.findPlug("outputZ")
                        llegstretchdivinp2x_plug = llegstretchdiv_fs.findPlug("input2X")
                        llegstretchdivinp2z_plug = llegstretchdiv_fs.findPlug("input2Z")
                        llegstretchdivotox_plug = llegstretchdiv_fs.findPlug("outputX")
                        llegstretchdivotpz_plug = llegstretchdiv_fs.findPlug("outputZ")
                        llegscaledivinp1y_plug = llegscalediv_fs.findPlug("input1Y")
                        llegscaledivinp2y_plug = llegscalediv_fs.findPlug("input2Y")
                        llegscaledivotpy_plug = llegscalediv_fs.findPlug("outputY")
                        liklegstretchdivinp1_plug = liklegstretchdiv_fs.findPlug("input1")
                        liklegstretchdivotp_plug = liklegstretchdiv_fs.findPlug("output")
                        liklegstretchclust1trans_plug = liklegstretchcluster1_fs.findPlug("translate")
                        liklegstretchclust2trans_plug = liklegstretchcluster2_fs.findPlug("translate")
                        blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                        blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                        blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                        blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                        blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                        blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                        blendstretch_plug = blendstretch_fs.findPlug("blender")
                        blendsquash_plug = blendsquash_fs.findPlug("blender")

                        objparent = om1.MObject()
                        objchild = om1.MObject()
                        for index in range(ikllowerleg_sl_lst.length()):
                            if index < ikllowerleg_sl_lst.length()-1:
                                ikllowerleg_sl_lst.getDependNode(index, objparent)
                                ikllowerleg_sl_lst.getDependNode(index+1, objchild)
                                llegparentjnt_fs = om1.MFnDependencyNode(objparent)
                                llegchildjnt_fs = om1.MFnDependencyNode(objchild)
                                llegjnt_syplug = llegparentjnt_fs.findPlug("scaleY")
                                llegjnt_sxplug = llegparentjnt_fs.findPlug("scaleX")
                                llegjnt_szplug = llegparentjnt_fs.findPlug("scaleZ")
                                llegjnt_sotpplug = llegparentjnt_fs.findPlug("scale")
                                llegjnt_invsplug = llegchildjnt_fs.findPlug("inverseScale")
                                ikspinedg_modifier.connect(llegstretchpercentotp_plug, blendstretchinp1g_plug)
                                ikspinedg_modifier.connect(llegstretchdivotox_plug, blendsquashinp1r_plug)
                                ikspinedg_modifier.connect(llegstretchdivotpz_plug, blendsquashinp1b_plug)
                                ikspinedg_modifier.connect(blendstretchotpg_plug, llegjnt_syplug)
                                ikspinedg_modifier.connect(blendsquashotpr_plug, llegjnt_sxplug)
                                ikspinedg_modifier.connect(blendsquashotpb_plug, llegjnt_szplug)
                                ikspinedg_modifier.connect(llegjnt_sotpplug, llegjnt_invsplug)

                        ikspinedg_modifier.renameNode(llegcrv_info, "LeftLowerLegSpline_Info")
                        ikspinedg_modifier.renameNode(llegstretchpercent, "LeftLowerLegStretch_Percent")
                        ikspinedg_modifier.renameNode(llegstretchpow, "LeftLowerLegStretch_Power")
                        ikspinedg_modifier.renameNode(llegstretchdiv, "LeftLowerLegStretch_Divide")
                        ikspinedg_modifier.renameNode(ikspline_cv, "LeftLowerLeg_SplineCvShape")
                        ikspinedg_modifier.renameNode(self.lleg_ik, "LeftLowerLeg_Ik")
                        ikspinedg_modifier.renameNode(self.iklleg_effector, "LeftLowerLeg_effector")
                        ikspinedg_modifier.renameNode(llegscalediv, "IkLeftLowerLegGlobalScale_Average")
                        ikspinedg_modifier.renameNode(liklegstretchdiv, "LeftLowerLegStretch_Divide2")
                        ikspinedg_modifier.renameNode(blendstretch, "LeftLowerLegStretch_Blend")
                        ikspinedg_modifier.renameNode(blendsquash, "LeftLowerLegSquash_Blend")
                        ikspinedg_modifier.commandToExecute('parent "LeftLowerLeg_Ik" "DoNotTouch"')
                        ikspinedg_modifier.commandToExecute('connectAttr -f LeftLowerLeg_SplineCvShape.worldSpace[0] LeftLowerLeg_Ik.inCurve')
                        ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "LeftLowerLegIk_skin" IkCvSplineLeftLowerLeg0 IkCvSplineLeftLowerLeg1 IkCvSplineLeftLowerLeg2 LeftLowerLeg_SplineCv')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dTwistControlEnable" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpType" 4')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dForwardAxis" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpAxis" 4')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpVectorY" 0')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpVectorEndY" 0')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpVectorZ" -1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLeg_Ik.dWorldUpVectorEndZ" -1')
                        ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineLeftLowerLeg0.worldMatrix[0] LeftLowerLeg_Ik.dWorldUpMatrix')
                        ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineLeftLowerLeg2.worldMatrix[0] LeftLowerLeg_Ik.dWorldUpMatrixEnd')
                        ikspinedg_modifier.commandToExecute('connectAttr -f LeftLowerLeg_SplineCvShape.worldSpace[0] LeftLowerLegSpline_Info.inputCurve')
                        ikspinedg_modifier.connect(llegcrvinfoarc_plug, llegscaledivinp1y_plug)
                        ikspinedg_modifier.connect(masterctrlsy_plug, llegscaledivinp2y_plug)
                        ikspinedg_modifier.connect(llegscaledivotpy_plug, llegstretchpercentinp1y_plug)
                        ikspinedg_modifier.connect(llegstretchpercentotp_plug, llegstretchpowinp1x_plug)
                        ikspinedg_modifier.connect(llegstretchpercentotp_plug, llegstretchpowinp1z_plug)
                        ikspinedg_modifier.connect(llegstretchpowotpx_plug, llegstretchdivinp2x_plug)
                        ikspinedg_modifier.connect(llegstretchpowotpz_plug, llegstretchdivinp2z_plug)
                        ikspinedg_modifier.connect(liklegstretchclust2trans_plug, liklegstretchdivinp1_plug)
                        ikspinedg_modifier.connect(liklegstretchdivotp_plug, liklegstretchclust1trans_plug)
                        ikspinedg_modifier.connect(llegstretchoption_plug, blendstretch_plug)
                        ikspinedg_modifier.connect(llegsquashoption_plug, blendsquash_plug)
                        ikspinedg_modifier.commandToExecute('float $leftlowerlegstretchinput1Y = `getAttr "LeftLowerLegStretch_Percent.input1Y"`; setAttr "LeftLowerLegStretch_Percent.input2Y" $leftlowerlegstretchinput1Y')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Power.input2X" 0.5')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Power.input2Z" 0.5')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide.input1X" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide.input1Z" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Percent.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Power.operation" 3')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "IkLeftLowerLegGlobalScale_Average.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide2.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide2.input2X" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide2.input2Y" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Divide2.input2Z" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegSquash_Blend.color2R" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegStretch_Blend.color2G" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "LeftLowerLegSquash_Blend.color2B" 1')
                        ikspinedg_modifier.doIt()

                        ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                        self.IK_Handle.setSolver(ikspline_solver)

                ikcvleg_sl_lst = om2.MSelectionList()
                ikcvleg_sl_lst.add("IkCvSplineLeftUpperLeg*")
                ikcvleg_sl_lst.add("IkCvSplineLeftLowerLeg*")

            if cmds.objExists("NoFlipLeftLeg_Ik") and cmds.objExists("PVLeftLeg_Ik"):

                self.MDG2_mod.commandToExecute('addAttr -longName "follow" -niceName "Follow Body" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                self.MDG2_mod.commandToExecute('parentConstraint -mo -weight 1 Biped_Root_ctrl Biped_IkLeftFootRot_null')
                self.MDG2_mod.doIt()

                llegik_sl_ls = om2.MSelectionList()
                llegik_sl_ls.add("LeftLegIk_grp")
                llegik_sl_ls.add("Biped_NoFlipLeftKnee_null")
                llegik_sl_ls.add("Biped_IkLeftFoot_ctrl")
                llegik_sl_ls.add("IkLeftJointLeg_grp")
                llegik_sl_ls.add("IkStretchyLeftJointLeg_grp")
                likleggrpobj_fs = om2.MFnDependencyNode(llegik_sl_ls.getDependNode(0))
                noflipleftkneenullobj_fs = om2.MFnDependencyNode(llegik_sl_ls.getDependNode(1))
                iklegctrl_fs = om2.MFnDependencyNode(llegik_sl_ls.getDependNode(2))
                ikleftjointleggrp_fs = om2.MFnDependencyNode(llegik_sl_ls.getDependNode(3))

                if self.typeofLLegIK.currentIndex() == 1 or 2:
                    liklegctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    liklegctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(liklegctrl_multMatrix, "IkLeftLegCtrl_multMatrix")
                    self.MDG2_mod.renameNode(liklegctrl_decomposeMatrix, "IkLeftLegCtrl_decomposeMatrix")

                    liklegmultMatrix_fs = om2.MFnDependencyNode(liklegctrl_multMatrix)
                    liklegdecomposeMatrix_fs = om2.MFnDependencyNode(liklegctrl_decomposeMatrix)

                    liklegmultMatrixSum_plug = liklegmultMatrix_fs.findPlug("matrixSum", False)
                    liklegdecomposeInpMatrix_plug = liklegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    liklegdecomposeOtpTrans_plug = liklegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    liklegdecomposeOtpRot_plug = liklegdecomposeMatrix_fs.findPlug("outputRotate", False)
                    likleggrpTrans_plug = likleggrpobj_fs.findPlug("translate", False)
                    likleggrpRot_plug = likleggrpobj_fs.findPlug("rotate", False)
                    noflipleftkneenullTrans_plug = noflipleftkneenullobj_fs.findPlug("translate", False)
                    noflipleftkneenullRot_plug = noflipleftkneenullobj_fs.findPlug("rotate", False)
                    iklegctrlTrans_plug = iklegctrl_fs.findPlug("translate", False)
                    iklegctrlRot_plug = iklegctrl_fs.findPlug("rotate", False)
                    liklegjntScal_plug = likleggrpobj_fs.findPlug("scale", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkLeftFoot_ctrl.worldMatrix[0] IkLeftLegCtrl_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('parent LeftReverseFootHeel LeftLegIk_grp')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_NoFlipLeftKnee_ctrl NoFlipLeftLeg_Ik')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_PVLeftKnee_ctrl PVLeftLeg_Ik')
                    self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftLeg_Ik.twist" 90')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkLeftFoot_ctrl.follow Biped_IkLeftFootRot_null_parentConstraint1.Biped_Root_ctrlW0')
                    self.MDG2_mod.connect(liklegmultMatrixSum_plug, liklegdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(liklegdecomposeOtpTrans_plug, likleggrpTrans_plug)
                    self.MDG2_mod.connect(iklegctrlTrans_plug, noflipleftkneenullTrans_plug)
                    self.MDG2_mod.connect(iklegctrlRot_plug, noflipleftkneenullRot_plug)
                    self.MDG2_mod.connect(masterdecomposeOtpScale_plug, liklegjntScal_plug)

                    if self.autostretch.currentIndex() == 1:
                        liklegdistloc = om2.MFnDagNode()

                        likupperlegdistloc1_tn = liklegdistloc.create("transform", "distloc_L_upleg1", llegik_sl_ls.getDependNode(4))
                        likupperlegdistloc_ln = liklegdistloc.create("locator", "L_upleg1_Shape", likupperlegdistloc1_tn)
                        likfootlegdistloc1_tn = liklegdistloc.create("transform", "distloc_L_legfoot1")
                        likfootlegdistloc_ln = liklegdistloc.create("locator", "L_foot1_Shape", likfootlegdistloc1_tn)
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "IkLeftLegDistance_Info"')
                        self.MDG2_mod.doIt()

                        luplegnull_transform_t = luplegnull_transform.translation(om2.MSpace.kTransform)
                        likupperlegdistloc_transform = om2.MFnTransform(likupperlegdistloc1_tn)
                        likupperlegdistloc_transform.setTranslation(luplegnull_transform_t, om2.MSpace.kTransform)

                        IkLeftLegDistance_sl_ls = om2.MSelectionList()
                        IkLeftLegDistance_sl_ls.add("IkLeftLegDistance_InfoShape")

                        likfootlegDist_fs = om2.MFnDependencyNode(likfootlegdistloc1_tn)
                        liklegjntDist_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(0))

                        liklegjntDistPoint2_plug = liklegjntDist_fs.findPlug("endPoint", False)
                        likfootlegDistOtpTrans_plug = likfootlegDist_fs.findPlug("translate", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force L_upleg1_Shape.worldPosition[0] IkLeftLegDistance_InfoShape.startPoint')
                        self.MDG2_mod.connect(likfootlegDistOtpTrans_plug, liklegjntDistPoint2_plug)
                        self.MDG2_mod.connect(liklegdecomposeOtpTrans_plug, likfootlegDistOtpTrans_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikleftlegtranslateY = `getAttr "IkNoFlipLeftLeg.translateY"`; float $noflipikleftfoottranslateY = `getAttr "IkNoFlipLeftFoot.translateY"`; float $totalnoflipikleftlegtranslateY = $noflipikleftlegtranslateY + $noflipikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue $totalnoflipikleftlegtranslateY -attribute "translateY" -value $noflipikleftlegtranslateY IkNoFlipLeftLeg;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftlegtranslateY = `getAttr "IkNoFlipLeftLeg.translateY"`; float $noflipikleftfoottranslateY = `getAttr "IkNoFlipLeftFoot.translateY"`; float $totalnoflipikleftlegtranslateY = $noflipikleftlegtranslateY + $noflipikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue ($totalnoflipikleftlegtranslateY*2) -attribute "translateY" -value ($noflipikleftlegtranslateY*2) IkNoFlipLeftLeg;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftlegtranslateY = `getAttr "IkNoFlipLeftLeg.translateY"`; float $noflipikleftfoottranslateY = `getAttr "IkNoFlipLeftFoot.translateY"`; float $totalnoflipikleftlegtranslateY = $noflipikleftlegtranslateY + $noflipikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue $totalnoflipikleftlegtranslateY -attribute "translateY" -value $noflipikleftfoottranslateY IkNoFlipLeftFoot;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftlegtranslateY = `getAttr "IkNoFlipLeftLeg.translateY"`; float $noflipikleftfoottranslateY = `getAttr "IkNoFlipLeftFoot.translateY"`; float $totalnoflipikleftlegtranslateY = $noflipikleftlegtranslateY + $noflipikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue ($totalnoflipikleftlegtranslateY*2) -attribute "translateY" -value ($noflipikleftfoottranslateY*2) IkNoFlipLeftFoot;')
                        self.MDG2_mod.commandToExecute('float $pvikleftlegtranslateY = `getAttr "IkPVLeftLeg.translateY"`; float $pvikleftfoottranslateY = `getAttr "IkPVLeftFoot.translateY"`; float $totalpvikleftlegtranslateY = $pvikleftlegtranslateY + $pvikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue $totalpvikleftlegtranslateY -attribute "translateY" -value $pvikleftlegtranslateY IkPVLeftLeg;')
                        self.MDG2_mod.commandToExecute('float $pvikleftlegtranslateY = `getAttr "IkPVLeftLeg.translateY"`; float $pvikleftfoottranslateY = `getAttr "IkPVLeftFoot.translateY"`; float $totalpvikleftlegtranslateY = $pvikleftlegtranslateY + $pvikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue ($totalpvikleftlegtranslateY*2) -attribute "translateY" -value ($pvikleftlegtranslateY*2) IkPVLeftLeg;')
                        self.MDG2_mod.commandToExecute('float $pvikleftlegtranslateY = `getAttr "IkPVLeftLeg.translateY"`; float $pvikleftfoottranslateY = `getAttr "IkPVLeftFoot.translateY"`; float $totalpvikleftlegtranslateY = $pvikleftlegtranslateY + $pvikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue $totalpvikleftlegtranslateY -attribute "translateY" -value $pvikleftfoottranslateY IkPVLeftFoot;')
                        self.MDG2_mod.commandToExecute('float $pvikleftlegtranslateY = `getAttr "IkPVLeftLeg.translateY"`; float $pvikleftfoottranslateY = `getAttr "IkPVLeftFoot.translateY"`; float $totalpvikleftlegtranslateY = $pvikleftlegtranslateY + $pvikleftfoottranslateY; setDrivenKeyframe -currentDriver IkLeftLegDistance_InfoShape.distance -driverValue ($totalpvikleftlegtranslateY*2) -attribute "translateY" -value ($pvikleftfoottranslateY*2) IkPVLeftFoot;')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipLeftLeg; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVLeftLeg; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipLeftFoot; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVLeftFoot; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('parent "IkLeftLegDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_legfoot1" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "kneesnap" -niceName "Knee Snap" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_PVLeftKnee_ctrl')

                        likupperlegdistloc2_tn = liklegdistloc.create("transform", "distloc_L_upleg2", llegik_sl_ls.getDependNode(4))
                        likupperlegdistloc_ln = liklegdistloc.create("locator", "L_upleg2_Shape", likupperlegdistloc2_tn)
                        likkneedistloc_tn = liklegdistloc.create("transform", "distloc_L_legknee")
                        likkneedistloc_ln = liklegdistloc.create("locator", "L_legknee_Shape", likkneedistloc_tn)
                        likfootlegdistloc2_tn = liklegdistloc.create("transform", "distloc_L_legfoot2")
                        likfootlegdistloc_ln = liklegdistloc.create("locator", "L_legfoot2_Shape", likfootlegdistloc2_tn)
                        pvleftkneectrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        likpvupperlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvlowerlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvupperlegstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        likpvlowerlegstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.renameNode(pvleftkneectrl_decomposeMatrix, "PVLeftKnee_decomposeMatrix")
                        self.MDG2_mod.renameNode(likpvupperlegtransblendnode, "PVLeftUpperLegTrans_blend")
                        self.MDG2_mod.renameNode(likpvlowerlegtransblendnode, "PVLeftLowerLegTrans_blend")
                        self.MDG2_mod.renameNode(likpvupperlegstretchblendnode, "PVLeftUpperLegStretch_blend")
                        self.MDG2_mod.renameNode(likpvlowerlegstretchblendnode, "PVLeftLowerLegStretch_blend")
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "LeftUpperLegDistance_Info"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension2" "LeftLowerLegDistance_Info"')
                        self.MDG2_mod.doIt()

                        likupperlegdistloc2_transform = om2.MFnTransform(likupperlegdistloc2_tn)
                        likupperlegdistloc2_transform.setTranslation(luplegnull_transform_t, om2.MSpace.kTransform)

                        IkLeftLegDistance_sl_ls.add("LeftUpperLegDistance_InfoShape")
                        IkLeftLegDistance_sl_ls.add("LeftLowerLegDistance_InfoShape")
                        IkLeftLegDistance_sl_ls.add("IkPVLeftLeg_translateY")
                        IkLeftLegDistance_sl_ls.add("IkPVLeftFoot_translateY")
                        IkLeftLegDistance_sl_ls.add("Biped_PVLeftKnee_ctrl")
                        IkLeftLegDistance_sl_ls.add("IkNoFlipLeftLeg_translateY")
                        IkLeftLegDistance_sl_ls.add("IkNoFlipLeftFoot_translateY")

                        likkneeDist_fs = om2.MFnDependencyNode(likkneedistloc_tn)
                        likfootlegDist_fs = om2.MFnDependencyNode(likfootlegdistloc2_tn)
                        likupperlegjntDist_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(1))
                        liklowerlegjntDist_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(2))
                        pvleftkneekey_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(3))
                        pvleftfootkey_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(4))
                        pvleftkneectrlDecomposeMatrix_fs = om2.MFnDependencyNode(pvleftkneectrl_decomposeMatrix)
                        likpvuppertransblendnode_fs = om2.MFnDependencyNode(likpvupperlegtransblendnode)
                        likpvlowertransblendnode_fs = om2.MFnDependencyNode(likpvlowerlegtransblendnode)
                        pvleftkneectrl_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(5))
                        pvlefkneejnt_fs = om2.MFnDependencyNode(pviklleg_sl_ls.getDependNode(1))
                        pvleftfootjnt_fs = om2.MFnDependencyNode(pviklleg_sl_ls.getDependNode(2))
                        likupperlegstretchblendnode_fs = om2.MFnDependencyNode(likpvupperlegstretchblendnode)
                        liklowerlegstretchblendnode_fs = om2.MFnDependencyNode(likpvlowerlegstretchblendnode)
                        leftlegoption_fs = om2.MFnDependencyNode(llegoptions_obj)

                        likupperlegjntDistPoint2_plug = likupperlegjntDist_fs.findPlug("endPoint", False)
                        liklowerlegjntDistPoint1_plug = liklowerlegjntDist_fs.findPlug("startPoint", False)
                        liklowerlegjntDistPoint2_plug = liklowerlegjntDist_fs.findPlug("endPoint", False)
                        likkneeDistOtpTrans_plug = likkneeDist_fs.findPlug("translate", False)
                        likfootlegDistOtpTrans_plug = likfootlegDist_fs.findPlug("translate", False)
                        pvleftkneectrlDecomposeMatrixOtpTrans_plug = pvleftkneectrlDecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvleftkneekeyotp_plug = pvleftkneekey_fs.findPlug("output", False)
                        pvleftfootkeyotp_plug = pvleftfootkey_fs.findPlug("output", False)
                        likpvuppertransblendnodeinp1g_plug = likpvuppertransblendnode_fs.findPlug("color1G", False)
                        likpvuppertransblendnodeinp2g_plug = likpvuppertransblendnode_fs.findPlug("color2G", False)
                        likpvuppertransblendnodeotp_plug = likpvuppertransblendnode_fs.findPlug("outputG", False)
                        likpvuppertransblendnodeblender_plug = likpvuppertransblendnode_fs.findPlug("blender", False)
                        likpvlowertransblendnodeinp1g_plug = likpvlowertransblendnode_fs.findPlug("color1G", False)
                        likpvlowertransblendnodeinp2g_plug = likpvlowertransblendnode_fs.findPlug("color2G", False)
                        likpvlowertransblendnodeotp_plug = likpvlowertransblendnode_fs.findPlug("outputG", False)
                        likpvlowertransblendnodeblender_plug = likpvlowertransblendnode_fs.findPlug("blender", False)
                        pvleftkneectrl_fs_plug = pvleftkneectrl_fs.findPlug("kneesnap", False)
                        likpvupperlegstretchblendnodeinp1g_plug = likupperlegstretchblendnode_fs.findPlug("color1G", False)
                        likpvupperlegstretchblendnodeotp_plug = likupperlegstretchblendnode_fs.findPlug("outputG", False)
                        likpvupperlegstretchblendnodeblender_plug = likupperlegstretchblendnode_fs.findPlug("blender", False)
                        likpvlowerlegstretchblendnodeinp1g_plug = liklowerlegstretchblendnode_fs.findPlug("color1G", False)
                        likpvlowerlegstretchblendnodeotp_plug = liklowerlegstretchblendnode_fs.findPlug("outputG", False)
                        likpvlowerlegstretchblendnodeblender_plug = liklowerlegstretchblendnode_fs.findPlug("blender", False)
                        ikleftlegstretch_plug = leftlegoption_fs.findPlug("stretchable", False)
                        pvleftkneejntTrans_plug = pvlefkneejnt_fs.findPlug("translateY", False)
                        pvleftfootjntTrans_plug = pvleftfootjnt_fs.findPlug("translateY", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force L_upleg2_Shape.worldPosition[0] LeftUpperLegDistance_InfoShape.startPoint')
                        self.MDG2_mod.commandToExecute('connectAttr -force Biped_PVLeftKnee_ctrl.worldMatrix[0] PVLeftKnee_decomposeMatrix.inputMatrix')
                        self.MDG2_mod.connect(likkneeDistOtpTrans_plug, likupperlegjntDistPoint2_plug)
                        self.MDG2_mod.connect(likkneeDistOtpTrans_plug, liklowerlegjntDistPoint1_plug)
                        self.MDG2_mod.connect(likfootlegDistOtpTrans_plug, liklowerlegjntDistPoint2_plug)
                        self.MDG2_mod.connect(liklegdecomposeOtpTrans_plug, likfootlegDistOtpTrans_plug)
                        self.MDG2_mod.connect(pvleftkneectrlDecomposeMatrixOtpTrans_plug, likkneeDistOtpTrans_plug)

                        self.MDG2_mod.disconnect(pvleftkneekeyotp_plug, pvleftkneejntTrans_plug)
                        self.MDG2_mod.disconnect(pvleftfootkeyotp_plug, pvleftfootjntTrans_plug)
                        self.MDG2_mod.connect(pvleftkneekeyotp_plug, likpvuppertransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvleftfootkeyotp_plug, likpvlowertransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvleftkneectrl_fs_plug, likpvuppertransblendnodeblender_plug)
                        self.MDG2_mod.connect(pvleftkneectrl_fs_plug, likpvlowertransblendnodeblender_plug)
                        self.MDG2_mod.connect(likpvuppertransblendnodeotp_plug, likpvupperlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likpvlowertransblendnodeotp_plug, likpvlowerlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likpvupperlegstretchblendnodeotp_plug, pvleftkneejntTrans_plug)
                        self.MDG2_mod.connect(likpvlowerlegstretchblendnodeotp_plug, pvleftfootjntTrans_plug)
                        self.MDG2_mod.connect(ikleftlegstretch_plug, likpvupperlegstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikleftlegstretch_plug, likpvlowerlegstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $pvikleftlegtranslateY = `getAttr "PVLeftUpperLegStretch_blend.color1G"`; setAttr "PVLeftUpperLegStretch_blend.color2G" $pvikleftlegtranslateY;')
                        self.MDG2_mod.commandToExecute('float $pvikleftfoottranslateY = `getAttr "PVLeftLowerLegStretch_blend.color1G"`; setAttr "PVLeftLowerLegStretch_blend.color2G" $pvikleftfoottranslateY;')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_legknee" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_L_legfoot2" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "LeftUpperLegDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "LeftLowerLegDistance_Info" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "thighlength" -niceName "AutoKnee Thigh Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkLeftFoot_ctrl')
                        self.MDG2_mod.commandToExecute('addAttr -longName "calflength" -niceName "AutoKnee Calf Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkLeftFoot_ctrl')
                        self.MDG2_mod.doIt()

                        rikautokneeupperlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        rikautokneelowerlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        liknoflipupperlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        liknofliplowerlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.renameNode(rikautokneeupperlegnode, "NoFlipLeftLegTrans_multiply")
                        self.MDG2_mod.renameNode(rikautokneelowerlegnode, "NoFlipLeftFootTrans_multiply")
                        self.MDG2_mod.renameNode(liknoflipupperlegtransblendnode, "NoFlipLeftUpperLegStretch_blend")
                        self.MDG2_mod.renameNode(liknofliplowerlegtransblendnode, "NoFlipLeftLowerLegStretch_blend")

                        likautokneeupperleg_fs = om2.MFnDependencyNode(rikautokneeupperlegnode)
                        likautokneelowerleg_fs = om2.MFnDependencyNode(rikautokneelowerlegnode)
                        noflipleftkneekey_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(6))
                        noflipleftfootkey_fs = om2.MFnDependencyNode(IkLeftLegDistance_sl_ls.getDependNode(7))
                        nofliplefkneejntTrans_fs = om2.MFnDependencyNode(noflipiklleg_sl_ls.getDependNode(1))
                        noflipleftfootjntTrans_fs = om2.MFnDependencyNode(noflipiklleg_sl_ls.getDependNode(2))
                        liknoflipupperlegstretchblendnode_fs = om2.MFnDependencyNode(liknoflipupperlegtransblendnode)
                        liknofliplowerlegstretchblendnode_fs = om2.MFnDependencyNode(liknofliplowerlegtransblendnode)

                        ikautokneeupperlegInp1Y_plug = likautokneeupperleg_fs.findPlug("input1Y", False)
                        ikautokneeupperlegInp2Y_plug = likautokneeupperleg_fs.findPlug("input2Y", False)
                        ikautokneeupperlegOtp_plug = likautokneeupperleg_fs.findPlug("outputY", False)
                        ikautokneelowerlegInp1Y_plug = likautokneelowerleg_fs.findPlug("input1Y", False)
                        ikautokneelowerlegInp2Y_plug = likautokneelowerleg_fs.findPlug("input2Y", False)
                        ikautokneelowerlegOtp_plug = likautokneelowerleg_fs.findPlug("outputY", False)
                        noflipleftkneekeyotp_plug = noflipleftkneekey_fs.findPlug("output", False)
                        noflipleftfootkeyotp_plug = noflipleftfootkey_fs.findPlug("output", False)
                        nofliplefkneejnttty_plug = nofliplefkneejntTrans_fs.findPlug("translateY", False)
                        noflipleftfootjntty_plug = noflipleftfootjntTrans_fs.findPlug("translateY", False)
                        iklegctrlkneeupperleg_plug = iklegctrl_fs.findPlug("thighlength", False)
                        iklegctrlkneelowerleg_plug = iklegctrl_fs.findPlug("calflength", False)
                        liknoflipupperlegstretchblendnodeinp1g_plug = liknoflipupperlegstretchblendnode_fs.findPlug("color1G", False)
                        liknoflipupperlegstretchblendnodeotp_plug = liknoflipupperlegstretchblendnode_fs.findPlug("outputG", False)
                        liknoflipupperlegstretchblendnodeblender_plug = liknoflipupperlegstretchblendnode_fs.findPlug("blender", False)
                        liknofliplowerlegstretchblendnodeinp1g_plug = liknofliplowerlegstretchblendnode_fs.findPlug("color1G", False)
                        liknofliplowerlegstretchblendnodeotp_plug = liknofliplowerlegstretchblendnode_fs.findPlug("outputG", False)
                        liknofliplowerlegstretchblendnodeblender_plug = liknofliplowerlegstretchblendnode_fs.findPlug("blender", False)

                        self.MDG2_mod.disconnect(noflipleftkneekeyotp_plug, nofliplefkneejnttty_plug)
                        self.MDG2_mod.disconnect(noflipleftfootkeyotp_plug, noflipleftfootjntty_plug)
                        self.MDG2_mod.connect(iklegctrlkneeupperleg_plug, ikautokneeupperlegInp1Y_plug)
                        self.MDG2_mod.connect(noflipleftkneekeyotp_plug, ikautokneeupperlegInp2Y_plug)
                        self.MDG2_mod.connect(iklegctrlkneelowerleg_plug, ikautokneelowerlegInp1Y_plug)
                        self.MDG2_mod.connect(noflipleftfootkeyotp_plug, ikautokneelowerlegInp2Y_plug)
                        self.MDG2_mod.connect(ikautokneeupperlegOtp_plug, liknoflipupperlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(ikautokneelowerlegOtp_plug, liknofliplowerlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(liknoflipupperlegstretchblendnodeotp_plug, nofliplefkneejnttty_plug)
                        self.MDG2_mod.connect(liknofliplowerlegstretchblendnodeotp_plug, noflipleftfootjntty_plug)
                        self.MDG2_mod.connect(ikleftlegstretch_plug, liknoflipupperlegstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikleftlegstretch_plug, liknofliplowerlegstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikleftlegtranslateY = `getAttr "NoFlipLeftUpperLegStretch_blend.color1G"`; setAttr "NoFlipLeftUpperLegStretch_blend.color2G" $noflipikleftlegtranslateY;')
                        self.MDG2_mod.commandToExecute('float $noflipikleftfoottranslateY = `getAttr "NoFlipLeftLowerLegStretch_blend.color1G"`; setAttr "NoFlipLeftLowerLegStretch_blend.color2G" $noflipikleftfoottranslateY;')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftLegTrans_multiply.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipLeftFootTrans_multiply.operation" 1')

                        rightlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprightlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprightfootlobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(rightlegglobalscalenode, "IKLeftLegGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprightlegglobalscalenode, "IKNoFlipLeftLegGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprightfootlobalscalenode, "IKNoFlipLeftFootGlobalScale_Average")

                        leftlegglobalscale_fs = om2.MFnDependencyNode(rightlegglobalscalenode)
                        noflipleftlegglobalscale_fs = om2.MFnDependencyNode(nofliprightlegglobalscalenode)
                        noflipleftfootlobalscale_fs = om2.MFnDependencyNode(nofliprightfootlobalscalenode)
                        masterlctrl_fs = om2.MFnDependencyNode(obj_masterctrl2)

                        likupperlegjntDist_plug = likupperlegjntDist_fs.findPlug("distance", False)
                        liklowerlegjntDist_plug = liklowerlegjntDist_fs.findPlug("distance", False)
                        liklegjntDist_plug = liklegjntDist_fs.findPlug("distance", False)
                        masterlctrlsy_plug = masterlctrl_fs.findPlug("scaleY", False)
                        leftlegglobalscaleInp1Y_plug = leftlegglobalscale_fs.findPlug("input1Y", False)
                        leftlegglobalscaleInp2Y_plug = leftlegglobalscale_fs.findPlug("input2Y", False)
                        leftlegglobalscaleOtpY_plug = leftlegglobalscale_fs.findPlug("outputY", False)
                        noflipleftlegglobalscaleInp1Y_plug = noflipleftlegglobalscale_fs.findPlug("input1Y", False)
                        noflipleftlegglobalscaleInp2Y_plug = noflipleftlegglobalscale_fs.findPlug("input2Y", False)
                        noflipleftlegglobalscaleOtpY_plug = noflipleftlegglobalscale_fs.findPlug("outputY", False)
                        noflipleftfootlobalscaleInp1Y_plug = noflipleftfootlobalscale_fs.findPlug("input1Y", False)
                        noflipleftfootlobalscaleInp2Y_plug = noflipleftfootlobalscale_fs.findPlug("input2Y", False)
                        noflipleftfootlobalscaleOtpY_plug = noflipleftfootlobalscale_fs.findPlug("outputY", False)
                        noflipleftkneekeyinp_plug = noflipleftkneekey_fs.findPlug("input", False)
                        noflipleftfootkeyinp_plug = noflipleftfootkey_fs.findPlug("input", False)
                        pvleftkneekeyinp_plug = pvleftkneekey_fs.findPlug("input", False)
                        pvleftfootkeyinp_plug = pvleftfootkey_fs.findPlug("input", False)
                        ikleftjointleggrps_plug = ikleftjointleggrp_fs.findPlug("scale", False)

                        self.MDG2_mod.disconnect(liklegjntDist_plug, noflipleftkneekeyinp_plug)
                        self.MDG2_mod.disconnect(liklegjntDist_plug, noflipleftfootkeyinp_plug)
                        self.MDG2_mod.disconnect(liklegjntDist_plug, pvleftkneekeyinp_plug)
                        self.MDG2_mod.disconnect(liklegjntDist_plug, pvleftfootkeyinp_plug)
                        self.MDG2_mod.connect(liklowerlegjntDist_plug, noflipleftfootlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(likupperlegjntDist_plug, noflipleftlegglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(liklowerlegjntDist_plug, noflipleftfootlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, noflipleftlegglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, noflipleftfootlobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(noflipleftlegglobalscaleOtpY_plug, likpvuppertransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(noflipleftfootlobalscaleOtpY_plug, likpvlowertransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(liklegjntDist_plug, leftlegglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, leftlegglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(leftlegglobalscaleOtpY_plug, noflipleftkneekeyinp_plug)
                        self.MDG2_mod.connect(leftlegglobalscaleOtpY_plug, noflipleftfootkeyinp_plug)
                        self.MDG2_mod.connect(leftlegglobalscaleOtpY_plug, pvleftkneekeyinp_plug)
                        self.MDG2_mod.connect(leftlegglobalscaleOtpY_plug, pvleftfootkeyinp_plug)
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipLeftLegGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipLeftFootGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKLeftLegGlobalScale_Average.operation" 2')
                        self.MDG2_mod.connect(masterdecomposeOtpScale_plug, ikleftjointleggrps_plug)

                    # else:
                    #     self.MDG2_mod.commandToExecute('delete "IkStretchyLeftJointLeg_grp"')
                    #     self.MDG2_mod.commandToExecute('delete "LeftLegIkCluster_grp"')

                    self.MDG2_mod.commandToExecute('addAttr -longName "footrollswitch" -niceName "Auto/Manual Foot Roll" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_LeftFootOptions_ctrl')

                    self.MDG2_mod.commandToExecute('addAttr -longName "autoroll" -niceName "Auto Roll" -attributeType "enum" -en "__________:" -keyable true Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "roll" -niceName "Roll" -attributeType double -minValue -90 -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "bendlimitangle" -niceName "Bend Limit Angle" -attributeType double -keyable true -defaultValue 45 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toestraightangle" -niceName "Toe Straight Angle" -attributeType double -keyable true -defaultValue 70 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "manualroll" -niceName "Manual Roll" -attributeType "enum" -en "__________:" -keyable true Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "heelroll" -niceName "Heel Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.doIt()

                    likheelclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(likheelclampnode, "LeftHeel_rotclamp")
                    likheelblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(likheelblendernode, "LeftHeel_blend")
                    leg_reverse_sl_ls = om2.MSelectionList()
                    leg_reverse_sl_ls.add("LeftReverseFootHeel")
                    reverse_heel_obj = leg_reverse_sl_ls.getDependNode(0)

                    likheelclamp_fs = om2.MFnDependencyNode(likheelclampnode)
                    likheelblender_fs = om2.MFnDependencyNode(likheelblendernode)
                    reverseheel_fs = om2.MFnDependencyNode(reverse_heel_obj)

                    llegoptionsfootrollswitch_plug = llegoptions_fs.findPlug("footrollswitch", False)
                    likheelblender_plug = likheelblender_fs.findPlug("blender", False)
                    iklegctrlRoll_plug = iklegctrl_fs.findPlug("roll", False)
                    likheelclampInpR_plug = likheelclamp_fs.findPlug("inputR", False)
                    likheelclampOtpR_plug = likheelclamp_fs.findPlug("outputR", False)
                    likheelblendCol2R_plug = likheelblender_fs.findPlug("color2R", False)
                    iklegctrlHeelRoll_plug = iklegctrl_fs.findPlug("heelroll", False)
                    likheelblendCol1R_plug = likheelblender_fs.findPlug("color1R", False)
                    likheelblendOtpR_plug = likheelblender_fs.findPlug("outputR", False)
                    likheelclampInpX_plug = reverseheel_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(llegoptionsfootrollswitch_plug, likheelblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, likheelclampInpR_plug)
                    self.MDG2_mod.connect(likheelclampOtpR_plug, likheelblendCol2R_plug)
                    self.MDG2_mod.connect(iklegctrlHeelRoll_plug, likheelblendCol1R_plug)
                    self.MDG2_mod.connect(likheelblendOtpR_plug, likheelclampInpX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "LeftHeel_rotclamp.minR" -90')

                    self.MDG2_mod.commandToExecute('addAttr -longName "footroll" -niceName "Foot Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.doIt()

                    likballclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(likballclampnode, "LeftBall_rotclamp")
                    likballrangenode = self.MDG2_mod.createNode("setRange")
                    self.MDG2_mod.renameNode(likballrangenode, "LeftBall_range")
                    likballblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(likballblendernode, "LeftBall_blend")
                    likballminusnode = self.MDG2_mod.createNode("plusMinusAverage")
                    self.MDG2_mod.renameNode(likballminusnode, "LeftBall_minus")
                    likballmultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(likballmultnode, "LeftBall_percetmult")
                    likballrollmultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(likballrollmultnode, "LeftBall_rollmult")
                    leg_reverse_sl_ls.add("LeftReverseFootToe")
                    reverse_toe_obj = leg_reverse_sl_ls.getDependNode(1)

                    likballclamp_fs = om2.MFnDependencyNode(likballclampnode)
                    likballrange_fs = om2.MFnDependencyNode(likballrangenode)
                    likballsub_fs = om2.MFnDependencyNode(likballminusnode)
                    likballmult_fs = om2.MFnDependencyNode(likballmultnode)
                    likballrollmult_fs = om2.MFnDependencyNode(likballrollmultnode)
                    likballblender_fs = om2.MFnDependencyNode(likballblendernode)
                    reversetoe_fs = om2.MFnDependencyNode(reverse_toe_obj)

                    likballblender_plug = likballblender_fs.findPlug("blender", False)
                    likballclampInpR_plug = likballclamp_fs.findPlug("inputR", False)
                    likballclampMinR_plug = likballclamp_fs.findPlug("minR", False)
                    iklegctrlBendLimit_plug = iklegctrl_fs.findPlug("bendlimitangle", False)
                    likballclampMaxR_plug = likballclamp_fs.findPlug("maxR", False)
                    likballrangeValueX_plug = likballrange_fs.findPlug("valueX", False)
                    likballrangeOldMinX_plug = likballrange_fs.findPlug("oldMinX", False)
                    likballrangeOldMaxX_plug = likballrange_fs.findPlug("oldMaxX", False)
                    likballrangeOutValueX_plug = likballrange_fs.findPlug("outValueX", False)
                    likballmultInp1X_plug = likballmult_fs.findPlug("input1X", False)
                    likballmultInp2X_plug = likballmult_fs.findPlug("input2X", False)
                    likballmultOtpX_plug = likballmult_fs.findPlug("outputX", False)
                    likballsubOtp1D_plug = likballsub_fs.findPlug("output1D", False)
                    likballrollmultInp1X_plug = likballrollmult_fs.findPlug("input1X", False)
                    likballrollmultInp2X_plug = likballrollmult_fs.findPlug("input2X", False)
                    likballrollmultOtpX_plug = likballrollmult_fs.findPlug("outputX", False)
                    likballblendCol2R_plug = likballblender_fs.findPlug("color2R", False)
                    iklegctrlBallRoll_plug = iklegctrl_fs.findPlug("footroll", False)
                    likballblendCol1R_plug = likballblender_fs.findPlug("color1R", False)
                    likballblendOtpR_plug = likballblender_fs.findPlug("outputR", False)
                    likballclampRotX_plug = reversetoe_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(llegoptionsfootrollswitch_plug, likballblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, likballclampInpR_plug)
                    self.MDG2_mod.connect(iklegctrlBendLimit_plug, likballclampMaxR_plug)
                    self.MDG2_mod.connect(likballclampInpR_plug, likballrangeValueX_plug)
                    self.MDG2_mod.connect(likballclampMinR_plug, likballrangeOldMinX_plug)
                    self.MDG2_mod.connect(likballclampMaxR_plug, likballrangeOldMaxX_plug)
                    self.MDG2_mod.connect(likballrangeOutValueX_plug, likballmultInp1X_plug)
                    self.MDG2_mod.connect(likballsubOtp1D_plug, likballmultInp2X_plug)
                    self.MDG2_mod.connect(likballmultOtpX_plug, likballrollmultInp1X_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, likballrollmultInp2X_plug)
                    self.MDG2_mod.connect(likballrollmultOtpX_plug, likballblendCol2R_plug)
                    self.MDG2_mod.connect(iklegctrlBallRoll_plug, likballblendCol1R_plug)
                    self.MDG2_mod.connect(likballblendOtpR_plug, likballclampRotX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_range.minX" 0')
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_range.maxX" 1')
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_minus.input1D[0]" 1')
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_minus.operation" 2')
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_percetmult.operation" 1')
                    self.MDG2_mod.commandToExecute('setAttr "LeftBall_rollmult.operation" 1')

                    self.MDG2_mod.commandToExecute('addAttr -longName "toeroll" -niceName "Toe Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.doIt()

                    liktoeclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(liktoeclampnode, "LeftToe_rotclamp")
                    liktoeblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(liktoeblendernode, "LeftToe_blend")
                    liktoerangernode = self.MDG2_mod.createNode("setRange")
                    self.MDG2_mod.renameNode(liktoerangernode, "LeftToe_range")
                    liktoemultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(liktoemultnode, "LeftToe_percetmultiply")
                    leg_reverse_sl_ls.add("LeftReverseFootToeEnd")
                    reverse_toeend_obj = leg_reverse_sl_ls.getDependNode(2)

                    liktoeclamp_fs = om2.MFnDependencyNode(liktoeclampnode)
                    liktoerange_fs = om2.MFnDependencyNode(liktoerangernode)
                    liktoemult_fs = om2.MFnDependencyNode(liktoemultnode)
                    liktoeblender_fs = om2.MFnDependencyNode(liktoeblendernode)
                    reversetoeend_fs = om2.MFnDependencyNode(reverse_toeend_obj)

                    liktoeblender_plug = liktoeblender_fs.findPlug("blender", False)
                    iklegctrlStraightLimit_plug = iklegctrl_fs.findPlug("toestraightangle", False)
                    liktoeclampInpR_plug = liktoeclamp_fs.findPlug("inputR", False)
                    liktoeclampMinR_plug = liktoeclamp_fs.findPlug("minR", False)
                    liktoeclampMaxR_plug = liktoeclamp_fs.findPlug("maxR", False)
                    liktoerangeValueX_plug = liktoerange_fs.findPlug("valueX", False)
                    liktoerangeOldMinX_plug = liktoerange_fs.findPlug("oldMinX", False)
                    liktoerangeOldMaxX_plug = liktoerange_fs.findPlug("oldMaxX", False)
                    liktoerangeoOutValX_plug = liktoerange_fs.findPlug("outValueX", False)
                    liktoemultInp1X_plug = liktoemult_fs.findPlug("input1X", False)
                    liktoemultInp2X_plug = liktoemult_fs.findPlug("input2X", False)
                    liktoemultOtpX_plug = liktoemult_fs.findPlug("outputX", False)
                    liktoeblendCol2R_plug = liktoeblender_fs.findPlug("color2R", False)
                    iklegctrlToeRoll_plug = iklegctrl_fs.findPlug("toeroll", False)
                    liktoeblendCol1R_plug = liktoeblender_fs.findPlug("color1R", False)
                    liktoeblendOtpR_plug = liktoeblender_fs.findPlug("outputR", False)
                    liktoeclampRotX_plug = reversetoeend_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(llegoptionsfootrollswitch_plug, liktoeblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, liktoeclampInpR_plug)
                    self.MDG2_mod.connect(iklegctrlBendLimit_plug, liktoeclampMinR_plug)
                    self.MDG2_mod.connect(iklegctrlStraightLimit_plug, liktoeclampMaxR_plug)
                    self.MDG2_mod.connect(liktoeclampInpR_plug, liktoerangeValueX_plug)
                    self.MDG2_mod.connect(liktoeclampMinR_plug, liktoerangeOldMinX_plug)
                    self.MDG2_mod.connect(liktoeclampMaxR_plug, liktoerangeOldMaxX_plug)
                    self.MDG2_mod.connect(liktoerangeoOutValX_plug, liktoemultInp1X_plug)
                    self.MDG2_mod.connect(liktoeclampInpR_plug, liktoemultInp2X_plug)
                    self.MDG2_mod.connect(liktoemultOtpX_plug, liktoeblendCol2R_plug)
                    self.MDG2_mod.commandToExecute('connectAttr -force LeftToe_range.outValueX LeftBall_minus.input1D[1]')
                    self.MDG2_mod.connect(iklegctrlToeRoll_plug, liktoeblendCol1R_plug)
                    self.MDG2_mod.connect(liktoeblendOtpR_plug, liktoeclampRotX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "LeftToe_range.minX" 0')
                    self.MDG2_mod.commandToExecute('setAttr "LeftToe_range.maxX" 1')
                    self.MDG2_mod.commandToExecute('setAttr "LeftToe_percetmultiply.operation" 1')

                    self.MDG2_mod.commandToExecute('addAttr -longName "common" -niceName "Common" -attributeType "enum" -en "__________:" -keyable true Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "tilt" -niceName "Tilt" -attributeType double -minValue -180 -maxValue 180 -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.doIt()

                    likinnerlegtiltclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(likinnerlegtiltclampnode, "LeftInnerLegTilt_clamp")
                    likouterlegtiltclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(likouterlegtiltclampnode, "LeftOuterLegTilt_clamp")
                    leg_reverse_sl_ls.add("LeftReverseInnerFoot")
                    leg_reverse_sl_ls.add("LeftReverseOuterFoot")
                    reverse_inner_obj = leg_reverse_sl_ls.getDependNode(3)
                    reverse_outer_obj = leg_reverse_sl_ls.getDependNode(4)

                    likinnerclamp_fs = om2.MFnDependencyNode(likinnerlegtiltclampnode)
                    likouterclamp_fs = om2.MFnDependencyNode(likouterlegtiltclampnode)
                    reverseinnerfoot_fs = om2.MFnDependencyNode(reverse_inner_obj)
                    reverseouterfoot_fs = om2.MFnDependencyNode(reverse_outer_obj)

                    iklegctrlTilt_plug = iklegctrl_fs.findPlug("tilt", False)
                    likinnerclampInpB_plug = likinnerclamp_fs.findPlug("inputB", False)
                    likouterclampInpB_plug = likouterclamp_fs.findPlug("inputB", False)
                    likinnerclampOtpB_plug = likinnerclamp_fs.findPlug("outputB", False)
                    likinnerclampRotZ_plug = reverseinnerfoot_fs.findPlug("rotateZ", False)
                    likouterclampOtpB_plug = likouterclamp_fs.findPlug("outputB", False)
                    likouterclampRotZ_plug = reverseouterfoot_fs.findPlug("rotateZ", False)

                    self.MDG2_mod.connect(iklegctrlTilt_plug, likinnerclampInpB_plug)
                    self.MDG2_mod.connect(iklegctrlTilt_plug, likouterclampInpB_plug)
                    self.MDG2_mod.connect(likinnerclampOtpB_plug, likinnerclampRotZ_plug)
                    self.MDG2_mod.connect(likouterclampOtpB_plug, likouterclampRotZ_plug)
                    self.MDG2_mod.commandToExecute('setAttr "LeftInnerLegTilt_clamp.maxB" 180')
                    self.MDG2_mod.commandToExecute('setAttr "LeftOuterLegTilt_clamp.minB" -180')

                    self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toespin" -niceName "Toe Spin" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toewiggle" -niceName "Toe Wiggle" -attributeType double -keyable true -defaultValue 0 Biped_IkLeftFoot_ctrl')
                    self.MDG2_mod.doIt()

                    leg_reverse_sl_ls.add("LeftReverseFootToeWiggle")
                    reverse_toewiggle_obj = leg_reverse_sl_ls.getDependNode(5)

                    reversetoewiggle_fs = om2.MFnDependencyNode(reverse_toewiggle_obj)

                    iklegctrlLean_plug = iklegctrl_fs.findPlug("lean", False)
                    likballclampRotZ_plug = reversetoe_fs.findPlug("rotateZ", False)
                    iklegctrlToeSpin_plug = iklegctrl_fs.findPlug("toespin", False)
                    liktoeclampRotY_plug = reversetoeend_fs.findPlug("rotateY", False)
                    iklegctrlToeWiggle_plug = iklegctrl_fs.findPlug("toewiggle", False)
                    reversetoewiggleRotX_plug = reversetoewiggle_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(iklegctrlLean_plug, likballclampRotZ_plug)
                    self.MDG2_mod.connect(iklegctrlToeSpin_plug, liktoeclampRotY_plug)
                    self.MDG2_mod.connect(iklegctrlToeWiggle_plug, reversetoewiggleRotX_plug)
            else:
                self.MDG2_mod.commandToExecute('delete "Biped_IkLeftFoot_null"')
                self.MDG2_mod.commandToExecute('delete "IkLeftJointLeg_grp"')

            for index in range(fkrarm_sl_ls.length()):
                jnt_obj = fkrarm_sl_ls.getDependNode(index)
                jnt_string = fkrarm_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    rarmctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    rarmctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(rarmctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(rarmctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    rarmmultMatrix_fs = om2.MFnDependencyNode(rarmctrl_multMatrix)
                    rarmdecomposeMatrix_fs = om2.MFnDependencyNode(rarmctrl_decomposeMatrix)
                    rarmjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    rarmmultMatrixSum_plug = rarmmultMatrix_fs.findPlug("matrixSum", False)
                    rarmdecomposeInpMatrix_plug = rarmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rarmdecomposeOtpTrans_plug = rarmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rarmdecomposeOtpRot_plug = rarmdecomposeMatrix_fs.findPlug("outputRotate", False)
                    rarmjntTrans_plug = rarmjnt_fs.findPlug("translate", False)
                    rarmjntRot_plug = rarmjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(rarmmultMatrixSum_plug, rarmdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rarmdecomposeOtpTrans_plug, rarmjntTrans_plug)
                    self.MDG2_mod.connect(rarmdecomposeOtpRot_plug, rarmjntRot_plug)
                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

            fkrarm_sl_ls = om2.MSelectionList()
            fkrarm_sl_ls.add("FkRightArm")
            fkrarm_sl_ls.add("FkRightForeArm")
            fkrarm_sl_ls.add("FkRightHand")

            ikrarm_sl_ls = om2.MSelectionList()
            ikrarm_sl_ls.add("IkRightArm")
            ikrarm_sl_ls.add("IkRightForeArm")
            ikrarm_sl_ls.add("IkRightHand")

            noflipikrarm_sl_ls = om2.MSelectionList()
            noflipikrarm_sl_ls.add("IkNoFlipRightArm")
            noflipikrarm_sl_ls.add("IkNoFlipRightForeArm")
            noflipikrarm_sl_ls.add("IkNoFlipRightHand")

            pvikrarm_sl_ls = om2.MSelectionList()
            pvikrarm_sl_ls.add("IkPVRightArm")
            pvikrarm_sl_ls.add("IkPVRightForeArm")
            pvikrarm_sl_ls.add("IkPVRightHand")

            if cmds.objExists("NoFlipRightHand_Ik") or self.autostretch.currentIndex() == 1:
                rhandoptions_sl_ls = om2.MSelectionList()
                rhandoptions_sl_ls.add("Biped_RightHandOptions_ctrl")
                rhandoptions_obj = rhandoptions_sl_ls.getDependNode(0)

            if cmds.objExists("NoFlipRightHand_Ik") and cmds.objExists("PVRightHand_Ik"):
                self.MDG2_mod.commandToExecute('addAttr -longName "fkik" -niceName "Fk/Ik" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "elbowswitch" -niceName "Auto/Manual Elbow" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightHandOptions_ctrl')
                self.MDG2_mod.doIt()

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "armcontrolsvis" -niceName "Arm Controls Vis" -attributeType bool -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkRightArm_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkRightForeArm_ctrl')
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_RightHandOptions_ctrl.armcontrolsvis RightArmIkCluster_grp.visibility')
                self.MDG2_mod.doIt()

            for index in range(rarm_sl_ls.length()):
                fkjnt_obj = fkrarm_sl_ls.getDependNode(index)

                ikjnt_obj = ikrarm_sl_ls.getDependNode(index)
                ikjnt_string = ikrarm_sl_ls.getSelectionStrings(index)

                bindjnt_obj = rarm_sl_ls.getDependNode(index)
                bindjnt_string = rarm_sl_ls.getSelectionStrings(index)

                noflipjnt_obj = noflipikrarm_sl_ls.getDependNode(index)
                noflipjnt_string = noflipikrarm_sl_ls.getSelectionStrings(index)

                pvjnt_obj = pvikrarm_sl_ls.getDependNode(index)
                pvjnt_string = pvikrarm_sl_ls.getSelectionStrings(index)

                if bindjnt_obj.hasFn(om2.MFn.kJoint):
                    if cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3])) != 0:
                        jointort_xattr = cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]))
                        jointort_yattr = cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]))
                        jointort_zattr = cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]))

                        cmds.setAttr("{0}.rotateX".format(str(bindjnt_string)[3:][:-3]), jointort_xattr)
                        cmds.setAttr("{0}.rotateY".format(str(bindjnt_string)[3:][:-3]), jointort_yattr)
                        cmds.setAttr("{0}.rotateZ".format(str(bindjnt_string)[3:][:-3]), jointort_zattr)

                        cmds.setAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]), 0)

                    armjoint_fs = om2.MFnDependencyNode(bindjnt_obj)
                    fkarmjoint_fs = om2.MFnDependencyNode(fkjnt_obj)

                    fkarmjointtransotp_plug = fkarmjoint_fs.findPlug("translate", False)
                    fkarmjointrototp_plug = fkarmjoint_fs.findPlug("rotate", False)
                    armjointtransinp_plug = armjoint_fs.findPlug("translate", False)
                    armjointrotinp_plug = armjoint_fs.findPlug("rotate", False)

                    if cmds.objExists("NoFlipRightHand_Ik") and cmds.objExists("PVRightHand_Ik"):

                        rhandoptions_fs = om2.MFnDependencyNode(rhandoptions_obj)
                        rhandoptionsfkik_plug = rhandoptions_fs.findPlug("fkik", False)
                        rhandoptionselbowswitch_plug = rhandoptions_fs.findPlug("elbowswitch", False)

                        armrotblendnode = self.MDG2_mod.createNode("blendColors")
                        armtransblendnode = self.MDG2_mod.createNode("blendColors")
                        # armjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        # self.MDG2_mod.renameNode(armjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(armrotblendnode, str(bindjnt_string)[2:][:-3] + "_blend")

                        armrotblendnode_fs = om2.MFnDependencyNode(armrotblendnode)
                        armtransblendnode_fs = om2.MFnDependencyNode(armtransblendnode)
                        # armdecomposeMatrix_fs = om2.MFnDependencyNode(armjoint_decomposeMatrix)
                        ikarmjoint_fs = om2.MFnDependencyNode(ikjnt_obj)

                        # armdecomposeInpMatrix_plug = armdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        # armdecomposeOtpRot_plug = armdecomposeMatrix_fs.findPlug("outputRotate", False)
                        # armdecomposeOtpTrans_plug = armdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        armrotblendnodeinp1_plug = armrotblendnode_fs.findPlug("color1", False)
                        armrotblendnodeinp2_plug = armrotblendnode_fs.findPlug("color2", False)
                        armrotblendnodeotp_plug = armrotblendnode_fs.findPlug("output", False)
                        armrotblendnodeblender_plug = armrotblendnode_fs.findPlug("blender", False)
                        armtransblendnodeinp1_plug = armtransblendnode_fs.findPlug("color1", False)
                        armtransblendnodeinp2_plug = armtransblendnode_fs.findPlug("color2", False)
                        armtransblendnodeotp_plug = armtransblendnode_fs.findPlug("output", False)
                        armtransblendnodeblender_plug = armtransblendnode_fs.findPlug("blender", False)
                        # ikarmjointrototp_plug = ikarmjoint_fs.findPlug("matrix", False)
                        ikarmjointinpTrans_plug = ikarmjoint_fs.findPlug("translate", False)
                        ikarmjointinpRot_plug = ikarmjoint_fs.findPlug("jointOrient", False)

                        # self.MDG2_mod.connect(ikarmjointrototp_plug, armdecomposeInpMatrix_plug)
                        # self.MDG2_mod.connect(armdecomposeOtpRot_plug, armrotblendnodeinp1_plug)
                        # self.MDG2_mod.connect(armdecomposeOtpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(ikarmjointinpRot_plug, armrotblendnodeinp1_plug)
                        self.MDG2_mod.connect(ikarmjointinpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(fkarmjointrototp_plug, armrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(fkarmjointtransotp_plug, armtransblendnodeinp2_plug)
                        self.MDG2_mod.connect(armrotblendnodeotp_plug, armjointrotinp_plug)
                        self.MDG2_mod.connect(armtransblendnodeotp_plug, armjointtransinp_plug)
                        self.MDG2_mod.connect(rhandoptionsfkik_plug, armrotblendnodeblender_plug)
                        self.MDG2_mod.connect(rhandoptionsfkik_plug, armtransblendnodeblender_plug)

                        armrotblendnode = self.MDG2_mod.createNode("blendColors")
                        armtransblendnode = self.MDG2_mod.createNode("blendColors")
                        nofliparmjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        pvarmjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        self.MDG2_mod.renameNode(nofliparmjoint_decomposeMatrix, str(noflipjnt_string)[2:][:-3]+"Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(pvarmjoint_decomposeMatrix, str(pvjnt_string)[2:][:-3]+"Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(armrotblendnode, str(bindjnt_string)[2:][:-3]+"Rot_elbowblend")
                        self.MDG2_mod.renameNode(armtransblendnode, str(bindjnt_string)[2:][:-3]+"Trans_elbowblend")

                        armrotblendnode_fs = om2.MFnDependencyNode(armrotblendnode)
                        armtransblendnode_fs = om2.MFnDependencyNode(armtransblendnode)
                        nofliparmdecomposeMatrix_fs = om2.MFnDependencyNode(nofliparmjoint_decomposeMatrix)
                        pvarmdecomposeMatrix_fs = om2.MFnDependencyNode(pvarmjoint_decomposeMatrix)
                        noflipikarmjoint_fs = om2.MFnDependencyNode(noflipjnt_obj)
                        pvikarmjoint_fs = om2.MFnDependencyNode(pvjnt_obj)
                        pvikrarmctrl_fs = om2.MFnDependencyNode(self.pvrelbowctrl_tn)

                        nofliparmdecomposeInpMatrix_plug = nofliparmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        nofliparmdecomposeOtpRot_plug = nofliparmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        nofliparmdecomposeOtpTrans_plug = nofliparmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvarmdecomposeInpMatrix_plug = pvarmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        pvarmdecomposeOtpRot_plug = pvarmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        pvarmdecomposeOtpTrans_plug = pvarmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        armrotblendnodeinp1_plug = armrotblendnode_fs.findPlug("color1", False)
                        armrotblendnodeinp2_plug = armrotblendnode_fs.findPlug("color2", False)
                        armrotblendnodeotp_plug = armrotblendnode_fs.findPlug("output", False)
                        armrotblendnodeblender_plug = armrotblendnode_fs.findPlug("blender", False)
                        armtransblendnodeinp1_plug = armtransblendnode_fs.findPlug("color1", False)
                        armtransblendnodeinp2_plug = armtransblendnode_fs.findPlug("color2", False)
                        armtransblendnodeotp_plug = armtransblendnode_fs.findPlug("output", False)
                        armtransblendnodeblender_plug = armtransblendnode_fs.findPlug("blender", False)
                        noflipikarmjointotp_plug = noflipikarmjoint_fs.findPlug("matrix", False)
                        pvikarmjointotp_plug = pvikarmjoint_fs.findPlug("matrix", False)
                        ikarmjointinpTrans_plug = ikarmjoint_fs.findPlug("translate", False)
                        ikarmjointinpRot_plug = ikarmjoint_fs.findPlug("jointOrient", False)
                        pvikrarmctrlVis_plug = pvikrarmctrl_fs.findPlug("visibility", False)

                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 1 Biped_FkRightArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 0 Biped_FkRightArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_FkRightArm_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 0 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 1 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightHandOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.connect(noflipikarmjointotp_plug, nofliparmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(pvikarmjointotp_plug, pvarmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(pvarmdecomposeOtpRot_plug, armrotblendnodeinp1_plug)
                        self.MDG2_mod.connect(pvarmdecomposeOtpTrans_plug, armtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(nofliparmdecomposeOtpRot_plug, armrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(nofliparmdecomposeOtpTrans_plug, armtransblendnodeinp2_plug)
                        if not str(ikjnt_string)[3:-3] == "IkRightHand":
                            self.MDG2_mod.connect(armrotblendnodeotp_plug, ikarmjointinpRot_plug)
                        self.MDG2_mod.connect(armtransblendnodeotp_plug, ikarmjointinpTrans_plug)
                        self.MDG2_mod.connect(rhandoptionselbowswitch_plug, armrotblendnodeblender_plug)
                        self.MDG2_mod.connect(rhandoptionselbowswitch_plug, armtransblendnodeblender_plug)
                        self.MDG2_mod.connect(rhandoptionselbowswitch_plug, pvikrarmctrlVis_plug)
                    else:
                        self.MDG2_mod.connect(fkarmjointtransotp_plug, armjointtransinp_plug)
                        self.MDG2_mod.connect(fkarmjointrototp_plug, armjointrotinp_plug)

                if self.autostretch.currentIndex() == 1:

                    if index < 2:
                        ikrarmgrp_sl_lst = om2.MSelectionList()
                        ikrarmgrp_sl_lst.add("RightUpperArmIkCluster_grp")
                        ikrarmgrp_sl_lst.add("RightUpperArmIkCluster2_grp")
                        ikrarmgrp_sl_lst.add("RightLowerArmIkCluster_grp")
                        ikrarmgrp_sl_lst.add("RightLowerArmIkCluster2_grp")
                        ikrarmgrp_sl_lst.add("RightLowerArmIkCluster0_grp")
                        ikrarmgrp_sl_lst.add("IkCvSplineRightUpperArm2")
                        grp_armupperikcluster = ikrarmgrp_sl_lst.getDependNode(0)
                        grp_armupperikcluster2 = ikrarmgrp_sl_lst.getDependNode(1)
                        grp_armlowerikcluster = ikrarmgrp_sl_lst.getDependNode(2)
                        grp_armlowerikcluster2 = ikrarmgrp_sl_lst.getDependNode(3)
                        grp_armlowerikcluster0 = ikrarmgrp_sl_lst.getDependNode(4)
                        grp_armupperikcvcluster2 = ikrarmgrp_sl_lst.getDependNode(5)

                        rarmjoint_multMatrix = self.MDG2_mod.createNode("multMatrix")
                        armjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                        rarmmultMatrix_fs = om2.MFnDependencyNode(rarmjoint_multMatrix)
                        rarmdecomposeMatrix_fs = om2.MFnDependencyNode(armjoint_decomposeMatrix)
                        ikrupperarmgrp_fs = om2.MFnDependencyNode(grp_armupperikcluster)
                        ikrlowerarmgrp_fs = om2.MFnDependencyNode(grp_armlowerikcluster)
                        ikrupperarmcv2_fs = om2.MFnDependencyNode(grp_armupperikcvcluster2)
                        ikrlowerarmgrp0_fs = om2.MFnDependencyNode(grp_armlowerikcluster0)

                        rarmmultMatrixSum_plug = rarmmultMatrix_fs.findPlug("matrixSum", False)
                        rarmdecomposeInpMatrix_plug = rarmdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        rarmdecomposeOtpTrans_plug = rarmdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        rarmdecomposeOtpRot_plug = rarmdecomposeMatrix_fs.findPlug("outputRotate", False)
                        ikrupperarmgrpTrans_plug = ikrupperarmgrp_fs.findPlug("translate", False)
                        ikrupperarmgrpRot_plug = ikrupperarmgrp_fs.findPlug("rotate", False)
                        ikrlowerarmgrpTrans_plug = ikrlowerarmgrp_fs.findPlug("translate", False)
                        ikrlowerarmgrpRot_plug = ikrlowerarmgrp_fs.findPlug("rotate", False)
                        ikrupperrarmcv2Trans_plug = iklupperrarmcv2_fs.findPlug("translate", False)
                        ikrlowerarmgrp0Trans_plug = ikrlowerarmgrp0_fs.findPlug("translate", False)
                        ikrupperrarmcv2RotY_plug = ikrupperarmcv2_fs.findPlug("rotateY", False)
                        ikrlowerarmgrp0RotY_plug = ikrlowerarmgrp0_fs.findPlug("rotateY", False)

                        self.MDG2_mod.renameNode(rarmjoint_multMatrix, str(bindjnt_string)[2:][:-3]+"_multMatrix")
                        self.MDG2_mod.renameNode(armjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3]+"_decomposeMatrix")
                        self.MDG2_mod.commandToExecute('connectAttr -force {0}.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(bindjnt_string)[3:][:-3]))
                        self.MDG2_mod.connect(rarmmultMatrixSum_plug, rarmdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(ikrupperrarmcv2Trans_plug, ikrlowerarmgrp0Trans_plug)
                        self.MDG2_mod.connect(ikrupperrarmcv2RotY_plug, ikrlowerarmgrp0RotY_plug)

                        fkrarmstretch_expression = om1.MFnExpression()

                        if index == 0:
                            fkrarmstretch_expression.create("Biped_StretchyRightForeArm_null.translateY = Biped_FkRightArm_ctrl.stretchy")
                            fkrarmstretch_expression.create("Biped_StretchyRightForeArm_null.translateZ = Biped_StretchyRightForeArm_null.translateY/10")
                            fkrarmstretch_expression.create("Biped_StretchyRightForeArm_null.translateX = -(Biped_FkRightArm_ctrl.stretchy/2)")

                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperArmIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(rarmdecomposeOtpTrans_plug, ikrupperarmgrpTrans_plug)
                            self.MDG2_mod.connect(rarmdecomposeOtpRot_plug, ikrupperarmgrpRot_plug)

                            rupperarmcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            rupperarmcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            rupperarmcluster2multMatrix_fs = om2.MFnDependencyNode(rupperarmcluster2_multMatrix)
                            rupperarmcluster2decomposeMatrix_fs = om2.MFnDependencyNode(rupperarmcluster2_decomposeMatrix)
                            rupperarmcluster2_fs = om2.MFnDependencyNode(grp_armupperikcluster2)

                            rupperarmcluster2multMatrixSum_plug = rupperarmcluster2multMatrix_fs.findPlug("matrixSum", False)
                            rupperarmcluster2decomposeInpMatrix_plug = rupperarmcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            rupperarmcluster2decomposeOtpTrans_plug = rupperarmcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            rupperarmcluster2Trans_plug = rupperarmcluster2_fs.findPlug("translate", False)

                            self.MDG2_mod.renameNode(rupperarmcluster2_multMatrix, "RightUpperArmCluster2_multMatrix")
                            self.MDG2_mod.renameNode(rupperarmcluster2_decomposeMatrix,"RightUpperArmCluster2_decomposeMatrix")
                            self.MDG2_mod.connect(rupperarmcluster2multMatrixSum_plug, rupperarmcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightForeArm.worldMatrix[0] RightUpperArmCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperArmIkCluster2_grp.parentInverseMatrix[0] RightUpperArmCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(rupperarmcluster2decomposeOtpTrans_plug, rupperarmcluster2Trans_plug)

                        elif index == 1:
                            fkrarmstretch_expression.create("Biped_StretchyRightHand_null.translateY = Biped_FkRightForeArm_ctrl.stretchy")

                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerArmIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(rarmdecomposeOtpTrans_plug, ikrlowerarmgrpTrans_plug)
                            self.MDG2_mod.connect(rarmdecomposeOtpRot_plug, ikrlowerarmgrpRot_plug)

                            rlowerarmcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            rlowerarmcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            rlowerarmcluster2multMatrix_fs = om2.MFnDependencyNode(rlowerarmcluster2_multMatrix)
                            rlowerarmcluster2decomposeMatrix_fs = om2.MFnDependencyNode(rlowerarmcluster2_decomposeMatrix)
                            rlowerarmcluster2_fs = om2.MFnDependencyNode(grp_armlowerikcluster2)

                            rlowerarmcluster2multMatrixSum_plug = rlowerarmcluster2multMatrix_fs.findPlug("matrixSum", False)
                            rlowerarmcluster2decomposeInpMatrix_plug = rlowerarmcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            rlowerarmcluster2decomposeOtpTrans_plug = rlowerarmcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            rlowerarmcluster2decomposeOtpRot_plug = rlowerarmcluster2decomposeMatrix_fs.findPlug("outputRotateY", False)
                            rlowerarmcluster2Trans_plug = rlowerarmcluster2_fs.findPlug("translate", False)
                            rlowerarmcluster2RotY_plug = rlowerarmcluster2_fs.findPlug("rotateY", False)

                            self.MDG2_mod.renameNode(rlowerarmcluster2_multMatrix, "RightLowerArmCluster2_multMatrix")
                            self.MDG2_mod.renameNode(rlowerarmcluster2_decomposeMatrix,"RightLowerArmCluster2_decomposeMatrix")
                            self.MDG2_mod.commandToExecute('connectAttr -force RightHand.worldMatrix[0] RightLowerArmCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerArmIkCluster2_grp.parentInverseMatrix[0] RightLowerArmCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(rlowerarmcluster2multMatrixSum_plug, rlowerarmcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.connect(rlowerarmcluster2decomposeOtpTrans_plug, rlowerarmcluster2Trans_plug)
                            self.MDG2_mod.connect(rlowerarmcluster2decomposeOtpRot_plug, rlowerarmcluster2RotY_plug)

                elif cmds.objExists("RightArmIkCluster_grp") and cmds.objExists("IkStretchyRightJointArm_grp"):
                    self.MDG2_mod.commandToExecute('delete "RightArmIkCluster_grp"')
                    self.MDG2_mod.doIt()

            grp_armupperikcluster1 = om1.MObject()
            grp_armupperikcluster2 = om1.MObject()
            obj_stretchyrightarm = om1.MObject()

            if self.autostretch.currentIndex() == 1:

                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightHandOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightHandOptions_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1.add("Biped_RightHandOptions_ctrl")
                stretchy_sl_lst1.getDependNode(4, obj_stretchyrightarm)

                if cmds.objExists("IkSplineRightUpperArm0"):
                    ikrupperarm_sl_lst = om1.MSelectionList()
                    ikrupperarm_sl_lst.add("IkSplineRightUpperArm*")
                    ikrupperarm_sl_lst.getDependNode(0, obj_root)
                    ikrupperarm_sl_lst.getDependNode(ikrupperarm_sl_lst.length()-1, obj_endspine)

                    ikrupperarmgrp_sl_lst = om1.MSelectionList()
                    ikrupperarmgrp_sl_lst.add("RightUpperArmIkCluster1_grp")
                    ikrupperarmgrp_sl_lst.add("RightUpperArmIkCluster2_grp")
                    ikrupperarmgrp_sl_lst.getDependNode(0, grp_armupperikcluster1)
                    ikrupperarmgrp_sl_lst.getDependNode(1, grp_armupperikcluster2)

                    self.MDag_path = om1.MDagPath()
                    rootspine_path = self.MDag_path.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.ikrarm_effector = self.IK_Effector.create(obj_endspine)
                    ikrarm_effector_path = self.MDag_path.getAPathTo(self.ikrarm_effector)

                    self.rarm_ik = self.IK_Handle.create(rootspine_path, ikrarm_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(ikrupperarm_sl_lst.length()):
                        ikrupperarm_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "RightUpperArm_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("RightUpperArm_SplineCv", "DoNotTouch")

                    rarmcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    rarmstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    rikarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    rarmcrvinfo_fs = om1.MFnDependencyNode(rarmcrv_info)
                    rarmstretchpercent_fs = om1.MFnDependencyNode(rarmstretchpercent)
                    rarmstretchpow_fs = om1.MFnDependencyNode(rarmstretchpow)
                    rarmstretchdiv_fs = om1.MFnDependencyNode(rarmstretchdiv)
                    rarmscalediv_fs = om1.MFnDependencyNode(rarmscalediv)
                    rikarmstretchdiv_fs = om1.MFnDependencyNode(rikarmstretchdiv)
                    rikarmstretchcluster1_fs = om1.MFnDependencyNode(grp_armupperikcluster1)
                    rikarmstretchcluster2_fs = om1.MFnDependencyNode(grp_armupperikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    rhandstretchoption_fs = om1.MFnDependencyNode(obj_stretchyrightarm)

                    rarmcrvinfoarc_plug = rarmcrvinfo_fs.findPlug("arcLength")
                    rarmstretchpercentinp1y_plug = rarmstretchpercent_fs.findPlug("input1Y")
                    rarmstretchpercentotp_plug = rarmstretchpercent_fs.findPlug("outputY")
                    rarmstretchpowinp1x_plug = rarmstretchpow_fs.findPlug("input1X")
                    rarmstretchpowinp1z_plug = rarmstretchpow_fs.findPlug("input1Z")
                    rarmstretchpowotpx_plug = rarmstretchpow_fs.findPlug("outputX")
                    rarmstretchpowotpz_plug = rarmstretchpow_fs.findPlug("outputZ")
                    rarmstretchdivinp2x_plug = rarmstretchdiv_fs.findPlug("input2X")
                    rarmstretchdivinp2z_plug = rarmstretchdiv_fs.findPlug("input2Z")
                    rarmstretchdivotox_plug = rarmstretchdiv_fs.findPlug("outputX")
                    rarmstretchdivotpz_plug = rarmstretchdiv_fs.findPlug("outputZ")
                    rarmscaledivinp1y_plug = rarmscalediv_fs.findPlug("input1Y")
                    rarmscaledivinp2y_plug = rarmscalediv_fs.findPlug("input2Y")
                    rarmscaledivotpy_plug = rarmscalediv_fs.findPlug("outputY")
                    rikarmstretchdivinp1_plug = rikarmstretchdiv_fs.findPlug("input1")
                    rikarmstretchdivotp_plug = rikarmstretchdiv_fs.findPlug("output")
                    rikarmstretchclust1trans_plug = rikarmstretchcluster1_fs.findPlug("translate")
                    rikarmstretchclust2trans_plug = rikarmstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    rhandstretchoption_plug = rhandstretchoption_fs.findPlug("stretchable")
                    rarmsquashoption_plug = rhandstretchoption_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikrupperarm_sl_lst.length()):
                        if index < ikrupperarm_sl_lst.length()-1:
                            ikrupperarm_sl_lst.getDependNode(index, objparent)
                            ikrupperarm_sl_lst.getDependNode(index+1, objchild)
                            rarmparentjnt_fs = om1.MFnDependencyNode(objparent)
                            rarmchildjnt_fs = om1.MFnDependencyNode(objchild)
                            rarmjnt_syplug = rarmparentjnt_fs.findPlug("scaleY")
                            rarmjnt_sxplug = rarmparentjnt_fs.findPlug("scaleX")
                            rarmjnt_szplug = rarmparentjnt_fs.findPlug("scaleZ")
                            rarmjnt_sotpplug = rarmparentjnt_fs.findPlug("scale")
                            rarmjnt_invsplug = rarmchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(rarmstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(rarmstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(rarmstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, rarmjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, rarmjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, rarmjnt_szplug)
                            ikspinedg_modifier.connect(rarmjnt_sotpplug, rarmjnt_invsplug)

                    ikspinedg_modifier.renameNode(rarmcrv_info, "RightUpperArmSpline_Info")
                    ikspinedg_modifier.renameNode(rarmstretchpercent, "RightUpperArmStretch_Percent")
                    ikspinedg_modifier.renameNode(rarmstretchpow, "RightUpperArmStretch_Power")
                    ikspinedg_modifier.renameNode(rarmstretchdiv, "RightUpperArmStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "RightUpperArm_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.rarm_ik, "RightUpperArm_Ik")
                    ikspinedg_modifier.renameNode(self.ikrarm_effector, "RightUpperArm_effector")
                    ikspinedg_modifier.renameNode(rarmscalediv, "IkRightUpperArmGlobalScale_Average")
                    ikspinedg_modifier.renameNode(rikarmstretchdiv, "RightUpperArmStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "RightUpperArmStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "RightUpperArmSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "RightUpperArm_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -force RightUpperArm_SplineCvShape.worldSpace[0] RightUpperArm_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "RightUpperArmIk_skin" IkCvSplineRightUpperArm0 IkCvSplineRightUpperArm1 IkCvSplineRightUpperArm2 RightUpperArm_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArm_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineRightUpperArm0.worldMatrix[0] RightUpperArm_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineRightUpperArm2.worldMatrix[0] RightUpperArm_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -force RightUpperArm_SplineCvShape.worldSpace[0] RightUpperArmSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(rarmcrvinfoarc_plug, rarmscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, rarmscaledivinp2y_plug)
                    ikspinedg_modifier.connect(rarmscaledivotpy_plug, rarmstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(rarmstretchpercentotp_plug, rarmstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(rarmstretchpercentotp_plug, rarmstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(rarmstretchpowotpx_plug, rarmstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(rarmstretchpowotpz_plug, rarmstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(rikarmstretchclust2trans_plug, rikarmstretchdivinp1_plug)
                    ikspinedg_modifier.connect(rikarmstretchdivotp_plug, rikarmstretchclust1trans_plug)
                    ikspinedg_modifier.connect(rhandstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(rarmsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $rightupperarmstretchinput1Y = `getAttr "RightUpperArmStretch_Percent.input1Y"`; setAttr "RightUpperArmStretch_Percent.input2Y" $rightupperarmstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkRightUpperArmGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperArmSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                grp_armlowerikcluster1 = om1.MObject()
                grp_armlowerikcluster2 = om1.MObject()

                if cmds.objExists("IkSplineRightLowerArm0"):
                    ikrlowerarm_sl_lst = om1.MSelectionList()
                    ikrlowerarm_sl_lst.add("IkSplineRightLowerArm*")
                    ikrlowerarm_sl_lst.getDependNode(0, obj_root)
                    ikrlowerarm_sl_lst.getDependNode(ikrlowerarm_sl_lst.length()-1, obj_endspine)

                    ikrlowerarmgrp_sl_lst = om1.MSelectionList()
                    ikrlowerarmgrp_sl_lst.add("RightLowerArmIkCluster1_grp")
                    ikrlowerarmgrp_sl_lst.add("RightLowerArmIkCluster2_grp")
                    ikrlowerarmgrp_sl_lst.getDependNode(0, grp_armlowerikcluster1)
                    ikrlowerarmgrp_sl_lst.getDependNode(1, grp_armlowerikcluster2)

                    rootspine_path = self.MDag_path.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.ikrarm_effector = self.IK_Effector.create(obj_endspine)
                    ikrarm_effector_path = self.MDag_path.getAPathTo(self.ikrarm_effector)

                    self.rarm_ik = self.IK_Handle.create(rootspine_path, ikrarm_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(ikrlowerarm_sl_lst.length()):
                        ikrlowerarm_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "RightLowerArm_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("RightLowerArm_SplineCv", "DoNotTouch")

                    rarmcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    rarmstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    rarmscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    rikarmstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    rarmcrvinfo_fs = om1.MFnDependencyNode(rarmcrv_info)
                    rarmstretchpercent_fs = om1.MFnDependencyNode(rarmstretchpercent)
                    rarmstretchpow_fs = om1.MFnDependencyNode(rarmstretchpow)
                    rarmstretchdiv_fs = om1.MFnDependencyNode(rarmstretchdiv)
                    rarmscalediv_fs = om1.MFnDependencyNode(rarmscalediv)
                    rikarmstretchdiv_fs = om1.MFnDependencyNode(rikarmstretchdiv)
                    rikarmstretchcluster1_fs = om1.MFnDependencyNode(grp_armlowerikcluster1)
                    rikarmstretchcluster2_fs = om1.MFnDependencyNode(grp_armlowerikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)

                    rarmcrvinfoarc_plug = rarmcrvinfo_fs.findPlug("arcLength")
                    rarmstretchpercentinp1y_plug = rarmstretchpercent_fs.findPlug("input1Y")
                    rarmstretchpercentotp_plug = rarmstretchpercent_fs.findPlug("outputY")
                    rarmstretchpowinp1x_plug = rarmstretchpow_fs.findPlug("input1X")
                    rarmstretchpowinp1z_plug = rarmstretchpow_fs.findPlug("input1Z")
                    rarmstretchpowotpx_plug = rarmstretchpow_fs.findPlug("outputX")
                    rarmstretchpowotpz_plug = rarmstretchpow_fs.findPlug("outputZ")
                    rarmstretchdivinp2x_plug = rarmstretchdiv_fs.findPlug("input2X")
                    rarmstretchdivinp2z_plug = rarmstretchdiv_fs.findPlug("input2Z")
                    rarmstretchdivotox_plug = rarmstretchdiv_fs.findPlug("outputX")
                    rarmstretchdivotpz_plug = rarmstretchdiv_fs.findPlug("outputZ")
                    rarmscaledivinp1y_plug = rarmscalediv_fs.findPlug("input1Y")
                    rarmscaledivinp2y_plug = rarmscalediv_fs.findPlug("input2Y")
                    rarmscaledivotpy_plug = rarmscalediv_fs.findPlug("outputY")
                    rikarmstretchdivinp1_plug = rikarmstretchdiv_fs.findPlug("input1")
                    rikarmstretchdivotp_plug = rikarmstretchdiv_fs.findPlug("output")
                    rikarmstretchclust1trans_plug = rikarmstretchcluster1_fs.findPlug("translate")
                    rikarmstretchclust2trans_plug = rikarmstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikrlowerarm_sl_lst.length()):
                        if index < ikrlowerarm_sl_lst.length()-1:
                            ikrlowerarm_sl_lst.getDependNode(index, objparent)
                            ikrlowerarm_sl_lst.getDependNode(index+1, objchild)
                            rarmparentjnt_fs = om1.MFnDependencyNode(objparent)
                            rarmchildjnt_fs = om1.MFnDependencyNode(objchild)
                            rarmjnt_syplug = rarmparentjnt_fs.findPlug("scaleY")
                            rarmjnt_sxplug = rarmparentjnt_fs.findPlug("scaleX")
                            rarmjnt_szplug = rarmparentjnt_fs.findPlug("scaleZ")
                            rarmjnt_sotpplug = rarmparentjnt_fs.findPlug("scale")
                            rarmjnt_invsplug = rarmchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(rarmstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(rarmstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(rarmstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, rarmjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, rarmjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, rarmjnt_szplug)
                            ikspinedg_modifier.connect(rarmjnt_sotpplug, rarmjnt_invsplug)

                    ikspinedg_modifier.renameNode(rarmcrv_info, "RightLowerArmSpline_Info")
                    ikspinedg_modifier.renameNode(rarmstretchpercent, "RightLowerArmStretch_Percent")
                    ikspinedg_modifier.renameNode(rarmstretchpow, "RightLowerArmStretch_Power")
                    ikspinedg_modifier.renameNode(rarmstretchdiv, "RightLowerArmStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "RightLowerArm_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.rarm_ik, "RightLowerArm_Ik")
                    ikspinedg_modifier.renameNode(self.ikrarm_effector, "RightLowerArm_effector")
                    ikspinedg_modifier.renameNode(rarmscalediv, "IkRightLowerArmGlobalScale_Average")
                    ikspinedg_modifier.renameNode(rikarmstretchdiv, "RightLowerArmStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "RightLowerArmStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "RightLowerArmSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "RightLowerArm_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -f RightLowerArm_SplineCvShape.worldSpace[0] RightLowerArm_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "RightLowerArmIk_skin" IkCvSplineRightLowerArm0 IkCvSplineRightLowerArm1 IkCvSplineRightLowerArm2 RightLowerArm_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArm_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineRightLowerArm0.worldMatrix[0] RightLowerArm_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineRightLowerArm2.worldMatrix[0] RightLowerArm_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -f RightLowerArm_SplineCvShape.worldSpace[0] RightLowerArmSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(rarmcrvinfoarc_plug, rarmscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, rarmscaledivinp2y_plug)
                    ikspinedg_modifier.connect(rarmscaledivotpy_plug, rarmstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(rarmstretchpercentotp_plug, rarmstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(rarmstretchpercentotp_plug, rarmstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(rarmstretchpowotpx_plug, rarmstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(rarmstretchpowotpz_plug, rarmstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(rikarmstretchclust2trans_plug, rikarmstretchdivinp1_plug)
                    ikspinedg_modifier.connect(rikarmstretchdivotp_plug, rikarmstretchclust1trans_plug)
                    ikspinedg_modifier.connect(rhandstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(rarmsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $rightlowerarmstretchinput1Y = `getAttr "RightLowerArmStretch_Percent.input1Y"`; setAttr "RightLowerArmStretch_Percent.input2Y" $rightlowerarmstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkRightLowerArmGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightLowerArmSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                ikcvarm_sl_lst.add("IkCvSplineRightUpperArm*")
                ikcvarm_sl_lst.add("IkCvSplineRightLowerArm*")

                ctrl_master_traingle_points1 = [om2.MPoint(box_transform_s[0]/6, 0.0), om2.MPoint(0.0, 0.0, box_transform_s[0]/6), om2.MPoint(-box_transform_s[0]/6, 0.0), om2.MPoint(0.0, 0.0, -box_transform_s[0]/6), om2.MPoint(box_transform_s[0]/6, 0.0)]

                for index in range(ikcvarm_sl_lst.length()):
                    ikarm_obj = ikcvarm_sl_lst.getDependNode(index)
                    ikarm_str = ikcvarm_sl_lst.getSelectionStrings(index)
                    if not str(ikarm_str)[3:-3] == "IkCvSplineLeftLowerArm0" and not str(ikarm_str)[3:-3] == "IkCvSplineRightLowerArm0":
                        ctrl_traingle_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_traingle_points1, 1, 1, False, True, True, ikarm_obj)
                        self.MDG2_mod.renameNode(ctrl_traingle_comb_cv, "{0}_shape".format(str(ikarm_str)[3:-3]))
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "{0}"'.format(str(ikarm_str)[3:-3]))

            if cmds.objExists("NoFlipRightHand_Ik") and cmds.objExists("PVRightHand_Ik"):

                self.MDG2_mod.commandToExecute('addAttr -longName "follow" -niceName "Follow Body" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_IkRightHand_ctrl')
                self.MDG2_mod.commandToExecute('parentConstraint -mo -weight 1 Biped_Root_ctrl Biped_IkRightHandRot_null')
                self.MDG2_mod.doIt()

                rhandik_sl_ls = om2.MSelectionList()
                rhandik_sl_ls.add("RightArmIk_grp")
                rhandik_sl_ls.add("Biped_NoFlipRightElbow_null")
                rhandik_sl_ls.add("Biped_IkRightHand_ctrl")
                rhandik_sl_ls.add("IkStretchyRightJointArm_grp")
                rikhandgrp_fs = om2.MFnDependencyNode(rhandik_sl_ls.getDependNode(0))
                nofliprightelbownullobj_fs = om2.MFnDependencyNode(rhandik_sl_ls.getDependNode(1))
                ikarmctrl_fs = om2.MFnDependencyNode(rhandik_sl_ls.getDependNode(2))
                rikhand_fs = om2.MFnDependencyNode(ikrarm_sl_ls.getDependNode(2))

                if self.typeofRHandIK.currentIndex() == 1:
                    rikhandctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    rikhandctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    rikhandrot_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    rikhandrot_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(rikhandctrl_multMatrix, "IkRightHand_multMatrix")
                    self.MDG2_mod.renameNode(rikhandctrl_decomposeMatrix, "IkRightHand_decomposeMatrix")
                    self.MDG2_mod.renameNode(rikhandrot_multMatrix, "IkRightHandRot_multMatrix")
                    self.MDG2_mod.renameNode(rikhandrot_decomposeMatrix, "IkRightHandRot_decomposeMatrix")

                    rikhandmultMatrix_fs = om2.MFnDependencyNode(rikhandctrl_multMatrix)
                    rikhanddecomposeMatrix_fs = om2.MFnDependencyNode(rikhandctrl_decomposeMatrix)
                    rikhandrotmultMatrix_fs = om2.MFnDependencyNode(rikhandrot_multMatrix)
                    rikhandrotdecomposeMatrix_fs = om2.MFnDependencyNode(rikhandrot_decomposeMatrix)

                    rikhandmultMatrixSum_plug = rikhandmultMatrix_fs.findPlug("matrixSum", False)
                    rikhanddecomposeInpMatrix_plug = rikhanddecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rikhanddecomposeOtpTrans_plug = rikhanddecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rikhanddecomposeOtpRot_plug = rikhanddecomposeMatrix_fs.findPlug("outputRotate", False)
                    rikhandrotmultMatrixSum_plug = rikhandrotmultMatrix_fs.findPlug("matrixSum", False)
                    rikhandrotdecomposeInpMatrix_plug = rikhandrotdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rikhandrotdecomposeOtpRot_plug = rikhandrotdecomposeMatrix_fs.findPlug("outputRotate", False)
                    rikhandgrpTrans_plug = rikhandgrp_fs.findPlug("translate", False)
                    rikhandgrpRot_plug = rikhandgrp_fs.findPlug("rotate", False)
                    ikarmctrlTrans_plug = ikarmctrl_fs.findPlug("translate", False)
                    ikarmctrlRot_plug = ikarmctrl_fs.findPlug("rotate", False)
                    nofliprightelbownullTrans_plug = nofliprightelbownullobj_fs.findPlug("translate", False)
                    nofliprightelbownullRot_plug = nofliprightelbownullobj_fs.findPlug("rotate", False)
                    rikhandRot_plug = rikhand_fs.findPlug("jointOrient", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkRightHand_ctrl.worldMatrix[0] IkRightHand_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkRightHand_ctrl.worldMatrix[0] IkRightHandRot_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('connectAttr -force IkRightHand.parentInverseMatrix[0] IkRightHandRot_multMatrix.matrixIn[1]')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkRightHand_ctrl.follow Biped_IkRightHandRot_null_parentConstraint1.Biped_Root_ctrlW0')
                    self.MDG2_mod.connect(rikhandmultMatrixSum_plug, rikhanddecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rikhanddecomposeOtpTrans_plug, rikhandgrpTrans_plug)
                    self.MDG2_mod.connect(rikhandrotmultMatrixSum_plug, rikhandrotdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rikhanddecomposeOtpRot_plug, rikhandgrpRot_plug)
                    self.MDG2_mod.connect(ikarmctrlTrans_plug, nofliprightelbownullTrans_plug)
                    self.MDG2_mod.connect(ikarmctrlRot_plug, nofliprightelbownullRot_plug)
                    self.MDG2_mod.connect(rikhandrotdecomposeOtpRot_plug, rikhandRot_plug)
                    self.MDG2_mod.commandToExecute('parent NoFlipRightHand_Ik RightArmIk_grp')
                    self.MDG2_mod.commandToExecute('parent PVRightHand_Ik RightArmIk_grp')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_NoFlipRightElbow_ctrl NoFlipRightHand_Ik')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_PVRightElbow_ctrl PVRightHand_Ik')
                    self.MDG2_mod.commandToExecute('setAttr "NoFlipRightHand_Ik.twist" 90')

                    if self.autostretch.currentIndex() == 1:
                        rikarmdistloc = om2.MFnDagNode()

                        rikarmdistloc1_tn = rikarmdistloc.create("transform", "distloc_R_arm1", rhandik_sl_ls.getDependNode(3))
                        rikarmdistloc1_ln = rikarmdistloc.create("locator", "R_arm1_Shape", rikarmdistloc1_tn)
                        rikhanddistloc1_tn = rikarmdistloc.create("transform", "distloc_R_hand1")
                        rikhanddistloc1_ln = rikarmdistloc.create("locator", "R_hand1_Shape", rikhanddistloc1_tn)
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "IkRightArmDistance_Info"')
                        self.MDG2_mod.doIt()

                        rarmnull_transform_t = larmnull_transform.translation(om2.MSpace.kTransform)
                        rikupperarmdistloc_transform = om2.MFnTransform(rikarmdistloc1_tn)
                        rikupperarmdistloc_transform.setTranslation(rarmnull_transform_t, om2.MSpace.kTransform)

                        IkRightArmDistance_sl_ls = om2.MSelectionList()
                        IkRightArmDistance_sl_ls.add("IkRightArmDistance_InfoShape")

                        rikhandDist_fs = om2.MFnDependencyNode(rikhanddistloc1_tn)
                        rikarmjntDist_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(0))

                        rikarmjntDistPoint2_plug = rikarmjntDist_fs.findPlug("endPoint", False)
                        rikhandDistOtpTrans_plug = rikhandDist_fs.findPlug("translate", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force R_arm1_Shape.worldPosition[0] IkRightArmDistance_InfoShape.startPoint')
                        self.MDG2_mod.connect(rikhandDistOtpTrans_plug, rikarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(rikhanddecomposeOtpTrans_plug, rikhandDistOtpTrans_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikrightforearmtranslateY = `getAttr "IkNoFlipRightForeArm.translateY"`; float $noflipikrighthandtranslateY = `getAttr "IkNoFlipRightHand.translateY"`; float $totalnoflipikrightarmtranslateY = $noflipikrightforearmtranslateY + $noflipikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue $totalnoflipikrightarmtranslateY -attribute "translateY" -value $noflipikrightforearmtranslateY IkNoFlipRightForeArm;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightforearmtranslateY = `getAttr "IkNoFlipRightForeArm.translateY"`; float $noflipikrighthandtranslateY = `getAttr "IkNoFlipRightHand.translateY"`; float $totalnoflipikrightarmtranslateY = $noflipikrightforearmtranslateY + $noflipikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue ($totalnoflipikrightarmtranslateY*2) -attribute "translateY" -value ($noflipikrightforearmtranslateY*2) IkNoFlipRightForeArm;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightforearmtranslateY = `getAttr "IkNoFlipRightForeArm.translateY"`; float $noflipikrighthandtranslateY = `getAttr "IkNoFlipRightHand.translateY"`; float $totalnoflipikrightarmtranslateY = $noflipikrightforearmtranslateY + $noflipikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue $totalnoflipikrightarmtranslateY -attribute "translateY" -value $noflipikrighthandtranslateY IkNoFlipRightHand;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightforearmtranslateY = `getAttr "IkNoFlipRightForeArm.translateY"`; float $noflipikrighthandtranslateY = `getAttr "IkNoFlipRightHand.translateY"`; float $totalnoflipikrightarmtranslateY = $noflipikrightforearmtranslateY + $noflipikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue ($totalnoflipikrightarmtranslateY*2) -attribute "translateY" -value ($noflipikrighthandtranslateY*2) IkNoFlipRightHand;')
                        self.MDG2_mod.commandToExecute('float $pvikrightforearmtranslateY = `getAttr "IkPVRightForeArm.translateY"`; float $pvikrighthandtranslateY = `getAttr "IkPVRightHand.translateY"`; float $totalpvikrightarmtranslateY = $pvikrightforearmtranslateY + $pvikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue $totalpvikrightarmtranslateY -attribute "translateY" -value $pvikrightforearmtranslateY IkPVRightForeArm;')
                        self.MDG2_mod.commandToExecute('float $pvikrightforearmtranslateY = `getAttr "IkPVRightForeArm.translateY"`; float $pvikrighthandtranslateY = `getAttr "IkPVRightHand.translateY"`; float $totalpvikrightarmtranslateY = $pvikrightforearmtranslateY + $pvikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue ($totalpvikrightarmtranslateY*2) -attribute "translateY" -value ($pvikrightforearmtranslateY*2) IkPVRightForeArm;')
                        self.MDG2_mod.commandToExecute('float $pvikrightforearmtranslateY = `getAttr "IkPVRightForeArm.translateY"`; float $pvikrighthandtranslateY = `getAttr "IkPVRightHand.translateY"`; float $totalpvikrightarmtranslateY = $pvikrightforearmtranslateY + $pvikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue $totalpvikrightarmtranslateY -attribute "translateY" -value $pvikrighthandtranslateY IkPVRightHand;')
                        self.MDG2_mod.commandToExecute('float $pvikrightforearmtranslateY = `getAttr "IkPVRightForeArm.translateY"`; float $pvikrighthandtranslateY = `getAttr "IkPVRightHand.translateY"`; float $totalpvikrightarmtranslateY = $pvikrightforearmtranslateY + $pvikrighthandtranslateY; setDrivenKeyframe -currentDriver IkRightArmDistance_InfoShape.distance -driverValue ($totalpvikrightarmtranslateY*2) -attribute "translateY" -value ($pvikrighthandtranslateY*2) IkPVRightHand;')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipRightForeArm; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVRightForeArm; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipRightHand; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVRightHand; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('parent "IkRightArmDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_hand1" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "elbowsnap" -niceName "Elbow Snap" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_PVRightElbow_ctrl')

                        rikarmdistloc2_tn = rikarmdistloc.create("transform", "distloc_R_arm2", rhandik_sl_ls.getDependNode(3))
                        rikarmdistloc2_ln = rikarmdistloc.create("locator", "R_arm2_Shape", rikarmdistloc2_tn)
                        rikelbowdistloc_tn = rikarmdistloc.create("transform", "distloc_R_elbow")
                        rikelbowdistloc_ln = rikarmdistloc.create("locator", "R_elbow_Shape", rikelbowdistloc_tn)
                        rikhanddistloc2_tn = rikarmdistloc.create("transform", "distloc_R_hand2")
                        rikhanddistloc2_ln = rikarmdistloc.create("locator", "R_hand2_Shape", rikhanddistloc2_tn)
                        pvrightelbowctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        rikpvupperarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvlowerlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvupperarmstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvlowerarmstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.renameNode(pvrightelbowctrl_decomposeMatrix, "PVRightElbow_decomposeMatrix")
                        self.MDG2_mod.renameNode(rikpvupperarmtransblendnode, "PVRightUpperArmTrans_blend")
                        self.MDG2_mod.renameNode(rikpvlowerlegtransblendnode, "PVRightLowerArmTrans_blend")
                        self.MDG2_mod.renameNode(rikpvupperarmstretchblendnode, "PVRightUpperArmStretch_blend")
                        self.MDG2_mod.renameNode(rikpvlowerarmstretchblendnode, "PVRightLowerArmStretch_blend")
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "RightUpperArmDistance_Info"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension2" "RightLowerArmDistance_Info"')
                        self.MDG2_mod.doIt()

                        rikupperarmdistloc2_transform = om2.MFnTransform(rikarmdistloc2_tn)
                        rikupperarmdistloc2_transform.setTranslation(rarmnull_transform_t, om2.MSpace.kTransform)

                        IkRightArmDistance_sl_ls.add("RightUpperArmDistance_InfoShape")
                        IkRightArmDistance_sl_ls.add("RightLowerArmDistance_InfoShape")
                        IkRightArmDistance_sl_ls.add("IkPVRightForeArm_translateY")
                        IkRightArmDistance_sl_ls.add("IkPVRightHand_translateY")
                        IkRightArmDistance_sl_ls.add("Biped_PVRightElbow_ctrl")
                        IkRightArmDistance_sl_ls.add("IkNoFlipRightForeArm_translateY")
                        IkRightArmDistance_sl_ls.add("IkNoFlipRightHand_translateY")

                        rikelbowDist_fs = om2.MFnDependencyNode(rikelbowdistloc_tn)
                        rikhandDist_fs = om2.MFnDependencyNode(rikhanddistloc2_tn)
                        rikupperarmjntDist_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(1))
                        riklowerarmjntDist_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(2))
                        pvrightelbowkey_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(3))
                        pvrighthandkey_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(4))
                        pvrightelbowctrlDecomposeMatrix_fs = om2.MFnDependencyNode(pvrightelbowctrl_decomposeMatrix)
                        rikpvupperarmtransblendnode_fs = om2.MFnDependencyNode(rikpvupperarmtransblendnode)
                        rikpvlowerarmtransblendnode_fs = om2.MFnDependencyNode(rikpvlowerlegtransblendnode)
                        pvrightelbowctrl_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(5))
                        pvrightelbowjnt_fs = om2.MFnDependencyNode(pvikrarm_sl_ls.getDependNode(1))
                        pvrighthandjnt_fs = om2.MFnDependencyNode(pvikrarm_sl_ls.getDependNode(2))
                        rikupperarmstretchblendnode_fs = om2.MFnDependencyNode(rikpvupperarmstretchblendnode)
                        riklowerarmstretchblendnode_fs = om2.MFnDependencyNode(rikpvlowerarmstretchblendnode)
                        righthandoption_fs = om2.MFnDependencyNode(rhandoptions_obj)

                        rikupperarmjntDistPoint2_plug = rikupperarmjntDist_fs.findPlug("endPoint", False)
                        riklowerarmjntDistPoint1_plug = riklowerarmjntDist_fs.findPlug("startPoint", False)
                        riklowerarmjntDistPoint2_plug = riklowerarmjntDist_fs.findPlug("endPoint", False)
                        rikelbowDistOtpTrans_plug = rikelbowDist_fs.findPlug("translate", False)
                        rikhandDistOtpTrans_plug = rikhandDist_fs.findPlug("translate", False)
                        pvrightelbowctrlDecomposeMatrixOtpTrans_plug = pvrightelbowctrlDecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvrightelbowkeyotp_plug = pvrightelbowkey_fs.findPlug("output", False)
                        pvrighthandkeyotp_plug = pvrighthandkey_fs.findPlug("output", False)
                        rikpvupperarmtransblendnodeinp1g_plug = rikpvupperarmtransblendnode_fs.findPlug("color1G", False)
                        rikpvupperarmtransblendnodeinp2g_plug = rikpvupperarmtransblendnode_fs.findPlug("color2G", False)
                        rikpvupperarmtransblendnodeotp_plug = rikpvupperarmtransblendnode_fs.findPlug("outputG", False)
                        rikpvupperarmtransblendnodeblender_plug = rikpvupperarmtransblendnode_fs.findPlug("blender", False)
                        rikpvlowerarmtransblendnodeinp1g_plug = rikpvlowerarmtransblendnode_fs.findPlug("color1G", False)
                        rikpvlowerarmtransblendnodeinp2g_plug = rikpvlowerarmtransblendnode_fs.findPlug("color2G", False)
                        rikpvlowerarmtransblendnodeotp_plug = rikpvlowerarmtransblendnode_fs.findPlug("outputG", False)
                        rikpvlowerarmtransblendnodeblender_plug = rikpvlowerarmtransblendnode_fs.findPlug("blender", False)
                        pvrightelbowctrl_fs_plug = pvrightelbowctrl_fs.findPlug("elbowsnap", False)
                        rikpvupperarmstretchblendnodeinp1g_plug = rikupperarmstretchblendnode_fs.findPlug("color1G", False)
                        rikpvupperarmstretchblendnodeotp_plug = rikupperarmstretchblendnode_fs.findPlug("outputG", False)
                        rikpvupperarmstretchblendnodeblender_plug = rikupperarmstretchblendnode_fs.findPlug("blender", False)
                        rikpvlowerarmstretchblendnodeinp1g_plug = riklowerarmstretchblendnode_fs.findPlug("color1G", False)
                        rikpvlowerarmstretchblendnodeotp_plug = riklowerarmstretchblendnode_fs.findPlug("outputG", False)
                        rikpvlowerarmstretchblendnodeblender_plug = riklowerarmstretchblendnode_fs.findPlug("blender", False)
                        ikrighthandstretch_plug = righthandoption_fs.findPlug("stretchable", False)
                        pvrightelbowjntTrans_plug = pvrightelbowjnt_fs.findPlug("translateY", False)
                        pvrighthandjntTrans_plug = pvrighthandjnt_fs.findPlug("translateY", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force R_arm2_Shape.worldPosition[0] RightUpperArmDistance_InfoShape.startPoint')
                        self.MDG2_mod.commandToExecute('connectAttr -force Biped_PVRightElbow_ctrl.worldMatrix[0] PVRightElbow_decomposeMatrix.inputMatrix')
                        self.MDG2_mod.connect(rikelbowDistOtpTrans_plug, rikupperarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(rikelbowDistOtpTrans_plug, riklowerarmjntDistPoint1_plug)
                        self.MDG2_mod.connect(rikhandDistOtpTrans_plug, riklowerarmjntDistPoint2_plug)
                        self.MDG2_mod.connect(rikhanddecomposeOtpTrans_plug, rikhandDistOtpTrans_plug)
                        self.MDG2_mod.connect(pvrightelbowctrlDecomposeMatrixOtpTrans_plug, rikelbowDistOtpTrans_plug)

                        self.MDG2_mod.disconnect(pvrightelbowkeyotp_plug, pvrightelbowjntTrans_plug)
                        self.MDG2_mod.disconnect(pvrighthandkeyotp_plug, pvrighthandjntTrans_plug)
                        self.MDG2_mod.connect(pvrightelbowkeyotp_plug, rikpvupperarmtransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvrighthandkeyotp_plug, rikpvlowerarmtransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvrightelbowctrl_fs_plug, rikpvupperarmtransblendnodeblender_plug)
                        self.MDG2_mod.connect(pvrightelbowctrl_fs_plug, rikpvlowerarmtransblendnodeblender_plug)
                        self.MDG2_mod.connect(rikpvupperarmtransblendnodeotp_plug, rikpvupperarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikpvlowerarmtransblendnodeotp_plug, rikpvlowerarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikpvupperarmstretchblendnodeotp_plug, pvrightelbowjntTrans_plug)
                        self.MDG2_mod.connect(rikpvlowerarmstretchblendnodeotp_plug, pvrighthandjntTrans_plug)
                        self.MDG2_mod.connect(ikrighthandstretch_plug, rikpvupperarmstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikrighthandstretch_plug, rikpvlowerarmstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $pvikrightforearmtranslateY = `getAttr "PVRightUpperArmStretch_blend.color1G"`; setAttr "PVRightUpperArmStretch_blend.color2G" $pvikrightforearmtranslateY;')
                        self.MDG2_mod.commandToExecute('float $pvikrighthandtranslateY = `getAttr "PVRightLowerArmStretch_blend.color1G"`; setAttr "PVRightLowerArmStretch_blend.color2G" $pvikrighthandtranslateY;')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_elbow" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_hand2" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "RightUpperArmDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "RightLowerArmDistance_Info" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "forearmlength" -niceName "AutoElbow ForeArm Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.commandToExecute('addAttr -longName "wristlength" -niceName "AutoElbow Wrist Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkRightHand_ctrl')
                        self.MDG2_mod.doIt()

                        rikautokneeupperlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        rikautokneelowerlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        riknoflipupperarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        riknofliplowerarmtransblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.renameNode(rikautokneeupperlegnode, "NoFlipRightForeArmTrans_multiply")
                        self.MDG2_mod.renameNode(rikautokneelowerlegnode, "NoFlipRightHandTrans_multiply")
                        self.MDG2_mod.renameNode(riknoflipupperarmtransblendnode, "NoFlipRightUpperArmStretch_blend")
                        self.MDG2_mod.renameNode(riknofliplowerarmtransblendnode, "NoFlipRightLowerArmStretch_blend")

                        rikautoelbowupperleg_fs = om2.MFnDependencyNode(rikautokneeupperlegnode)
                        rikautoelbowlowerleg_fs = om2.MFnDependencyNode(rikautokneelowerlegnode)
                        nofliprightelbowkey_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(6))
                        nofliprighthandkey_fs = om2.MFnDependencyNode(IkRightArmDistance_sl_ls.getDependNode(7))
                        nofliprightelbowjntTrans_fs = om2.MFnDependencyNode(noflipikrarm_sl_ls.getDependNode(1))
                        nofliprighthandjntTrans_fs = om2.MFnDependencyNode(noflipikrarm_sl_ls.getDependNode(2))
                        riknoflipupperarmstretchblendnode_fs = om2.MFnDependencyNode(riknoflipupperarmtransblendnode)
                        riknofliplowerarmstretchblendnode_fs = om2.MFnDependencyNode(riknofliplowerarmtransblendnode)

                        ikautoelbowupperarmInp1Y_plug = rikautoelbowupperleg_fs.findPlug("input1Y", False)
                        ikautoelbowupperarmInp2Y_plug = rikautoelbowupperleg_fs.findPlug("input2Y", False)
                        rikautoelbowupperarmOtp_plug = rikautoelbowupperleg_fs.findPlug("outputY", False)
                        ikautoelbowlowerarmInp1Y_plug = rikautoelbowlowerleg_fs.findPlug("input1Y", False)
                        ikautoelbowlowerarmInp2Y_plug = rikautoelbowlowerleg_fs.findPlug("input2Y", False)
                        rikautoelbowlowerarmOtp_plug = rikautoelbowlowerleg_fs.findPlug("outputY", False)
                        nofliprightelbowkeyotp_plug = nofliprightelbowkey_fs.findPlug("output", False)
                        nofliprighthandkeyotp_plug = nofliprighthandkey_fs.findPlug("output", False)
                        nofliprightelbowjnttty_plug = nofliprightelbowjntTrans_fs.findPlug("translateY", False)
                        nofliprighthandjntty_plug = nofliprighthandjntTrans_fs.findPlug("translateY", False)
                        rikctrlelbowupperarm_plug = ikarmctrl_fs.findPlug("forearmlength", False)
                        rikctrlelbowlowerarm_plug = ikarmctrl_fs.findPlug("wristlength", False)
                        riknoflipupperarmstretchblendnodeinp1g_plug = riknoflipupperarmstretchblendnode_fs.findPlug("color1G", False)
                        riknoflipupperarmstretchblendnodeotp_plug = riknoflipupperarmstretchblendnode_fs.findPlug("outputG", False)
                        riknoflipupperarmstretchblendnodeblender_plug = riknoflipupperarmstretchblendnode_fs.findPlug("blender", False)
                        riknofliplowerarmstretchblendnodeinp1g_plug = riknofliplowerarmstretchblendnode_fs.findPlug("color1G", False)
                        riknofliplowerarmstretchblendnodeotp_plug = riknofliplowerarmstretchblendnode_fs.findPlug("outputG", False)
                        riknofliplowerarmstretchblendnodeblender_plug = riknofliplowerarmstretchblendnode_fs.findPlug("blender", False)

                        self.MDG2_mod.disconnect(nofliprightelbowkeyotp_plug, nofliprightelbowjnttty_plug)
                        self.MDG2_mod.disconnect(nofliprighthandkeyotp_plug, nofliprighthandjntty_plug)
                        self.MDG2_mod.connect(rikctrlelbowupperarm_plug, ikautoelbowupperarmInp1Y_plug)
                        self.MDG2_mod.connect(nofliprightelbowkeyotp_plug, ikautoelbowupperarmInp2Y_plug)
                        self.MDG2_mod.connect(rikctrlelbowlowerarm_plug, ikautoelbowlowerarmInp1Y_plug)
                        self.MDG2_mod.connect(nofliprighthandkeyotp_plug, ikautoelbowlowerarmInp2Y_plug)
                        self.MDG2_mod.connect(rikautoelbowupperarmOtp_plug, riknoflipupperarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikautoelbowlowerarmOtp_plug, riknofliplowerarmstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(riknoflipupperarmstretchblendnodeotp_plug, nofliprightelbowjnttty_plug)
                        self.MDG2_mod.connect(riknofliplowerarmstretchblendnodeotp_plug, nofliprighthandjntty_plug)
                        self.MDG2_mod.connect(ikrighthandstretch_plug, riknoflipupperarmstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikrighthandstretch_plug, riknofliplowerarmstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikrightforearmtranslateY = `getAttr "NoFlipRightUpperArmStretch_blend.color1G"`; setAttr "NoFlipRightUpperArmStretch_blend.color2G" $noflipikrightforearmtranslateY;')
                        self.MDG2_mod.commandToExecute('float $noflipikrighthandtranslateY = `getAttr "NoFlipRightLowerArmStretch_blend.color1G"`; setAttr "NoFlipRightLowerArmStretch_blend.color2G" $noflipikrighthandtranslateY;')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipRightForeArmTrans_multiply.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipRightHandTrans_multiply.operation" 1')

                        rightarmglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprightlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprightfootlobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(rightarmglobalscalenode, "IKRightArmGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprightlegglobalscalenode, "IKNoFlipRightForeArmGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprightfootlobalscalenode, "IKNoFlipRightHandGlobalScale_Average")

                        rightarmglobalscale_fs = om2.MFnDependencyNode(rightarmglobalscalenode)
                        nofliprightarmglobalscale_fs = om2.MFnDependencyNode(nofliprightlegglobalscalenode)
                        nofliprighthandlobalscale_fs = om2.MFnDependencyNode(nofliprightfootlobalscalenode)
                        masterlctrl_fs = om2.MFnDependencyNode(obj_masterctrl2)

                        rikupperarmjntDist_plug = rikupperarmjntDist_fs.findPlug("distance", False)
                        riklowerarmjntDist_plug = riklowerarmjntDist_fs.findPlug("distance", False)
                        rikarmjntDist_plug = rikarmjntDist_fs.findPlug("distance", False)
                        masterlctrlsy_plug = masterlctrl_fs.findPlug("scaleY", False)
                        rightarmglobalscaleInp1Y_plug = rightarmglobalscale_fs.findPlug("input1Y", False)
                        rightarmglobalscaleInp2Y_plug = rightarmglobalscale_fs.findPlug("input2Y", False)
                        rightarmglobalscaleOtpY_plug = rightarmglobalscale_fs.findPlug("outputY", False)
                        nofliprightarmglobalscaleInp1Y_plug = nofliprightarmglobalscale_fs.findPlug("input1Y", False)
                        nofliprightarmglobalscaleInp2Y_plug = nofliprightarmglobalscale_fs.findPlug("input2Y", False)
                        nofliprightarmglobalscaleOtpY_plug = nofliprightarmglobalscale_fs.findPlug("outputY", False)
                        nofliprighthandlobalscaleInp1Y_plug = nofliprighthandlobalscale_fs.findPlug("input1Y", False)
                        nofliprighthandlobalscaleInp2Y_plug = nofliprighthandlobalscale_fs.findPlug("input2Y", False)
                        nofliprighthandlobalscaleOtpY_plug = nofliprighthandlobalscale_fs.findPlug("outputY", False)
                        nofliprightelbowkeyinp_plug = nofliprightelbowkey_fs.findPlug("input", False)
                        nofliprighthandkeyinp_plug = nofliprighthandkey_fs.findPlug("input", False)
                        pvrightelbowkeyinp_plug = pvrightelbowkey_fs.findPlug("input", False)
                        pvrighthandkeyinp_plug = pvrighthandkey_fs.findPlug("input", False)

                        self.MDG2_mod.disconnect(rikarmjntDist_plug, nofliprightelbowkeyinp_plug)
                        self.MDG2_mod.disconnect(rikarmjntDist_plug, nofliprighthandkeyinp_plug)
                        self.MDG2_mod.disconnect(rikarmjntDist_plug, pvrightelbowkeyinp_plug)
                        self.MDG2_mod.disconnect(rikarmjntDist_plug, pvrighthandkeyinp_plug)
                        self.MDG2_mod.connect(riklowerarmjntDist_plug, nofliprighthandlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(rikupperarmjntDist_plug, nofliprightarmglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(riklowerarmjntDist_plug, nofliprighthandlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, nofliprightarmglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, nofliprighthandlobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(nofliprightarmglobalscaleOtpY_plug, rikpvupperarmtransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(nofliprighthandlobalscaleOtpY_plug, rikpvlowerarmtransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikarmjntDist_plug, rightarmglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, rightarmglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(rightarmglobalscaleOtpY_plug, nofliprightelbowkeyinp_plug)
                        self.MDG2_mod.connect(rightarmglobalscaleOtpY_plug, nofliprighthandkeyinp_plug)
                        self.MDG2_mod.connect(rightarmglobalscaleOtpY_plug, pvrightelbowkeyinp_plug)
                        self.MDG2_mod.connect(rightarmglobalscaleOtpY_plug, pvrighthandkeyinp_plug)
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipRightForeArmGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipRightHandGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKRightArmGlobalScale_Average.operation" 2')

                    # else:
                    #     # self.MDG2_mod.commandToExecute('delete "IkStretchyRightJointArm_grp"')
                    #     # self.MDG2_mod.commandToExecute('delete "RightArmIkCluster_grp"')

            else:
                self.MDG2_mod.commandToExecute('delete "Biped_IkRightHand_null"')
                self.MDG2_mod.commandToExecute('setAttr "IkRightArm.visibility" 0')

            rfinger_sl_ls = om2.MSelectionList()
            rfinger_sl_ls.add("RightFinger*")
            for index in range(rfinger_sl_ls.length()):
                jnt_obj = rfinger_sl_ls.getDependNode(index)
                jnt_string = rfinger_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    rfingerctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    rfingerctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(rfingerctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(rfingerctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    rfingermultMatrix_fs = om2.MFnDependencyNode(rfingerctrl_multMatrix)
                    rfingerdecomposeMatrix_fs = om2.MFnDependencyNode(rfingerctrl_decomposeMatrix)
                    rfingerjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    rfingermultMatrixSum_plug = rfingermultMatrix_fs.findPlug("matrixSum", False)
                    rfingerdecomposeInpMatrix_plug = rfingerdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rfingerdecomposeOtpTrans_plug = rfingerdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rfingerdecomposeOtpRot_plug = rfingerdecomposeMatrix_fs.findPlug("outputRotate", False)
                    rfingerjntTrans_plug = rfingerjnt_fs.findPlug("translate", False)
                    rfingerjntRot_plug = rfingerjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(rfingermultMatrixSum_plug, rfingerdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rfingerdecomposeOtpTrans_plug, rfingerjntTrans_plug)
                    self.MDG2_mod.connect(rfingerdecomposeOtpRot_plug, rfingerjntRot_plug)
                    self.MDG2_mod.connect(lfingerdecomposeOtpRot_plug, lfingerjntRot_plug)
                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

                    if cmds.objExists("Biped_{0}4_ctrl".format(str(jnt_string)[3:][:-4])):
                        self.MDG2_mod.commandToExecute('setAttr "Biped_{0}4_ctrl.visibility" 0'.format(str(jnt_string)[3:][:-4]))

            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "spread" -niceName "Spread" -attributeType double -keyable true -defaultValue 0 Biped_RightFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "relax" -niceName "Relax" -attributeType double -minValue -10 -maxValue 10 -keyable true -defaultValue 0 Biped_RightFingerOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightThumbOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightIndexOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightMiddleOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightRingOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "curl" -niceName "Curl" -attributeType double -keyable true -defaultValue 0 Biped_RightPinkyOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_RightThumbOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_RightIndexOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_RightMiddleOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_RightRingOptions_ctrl')
            self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_RightPinkyOptions_ctrl')
            self.MDG2_mod.doIt()

            rfingercurl_sl_ls = om2.MSelectionList()
            rfingercurl_sl_ls.add("Biped_RightFinger*_curl")

            self.MDG2_mod.commandToExecute('float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerthumbrotateZ = `getAttr "Biped_RightFingerThumb1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $rightfingeroptionsspread -attribute "rotateZ" -value $rightfingerthumbrotateZ Biped_RightFingerThumb1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 20.0; float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerthumbrotateZ = `getAttr "Biped_RightFingerThumb1_globalcurl.rotateZ"`; float $totalrightfingeroptionsspread = $rightfingeroptionsspread + $add1; float $totalrightthumbrotateZ = $rightfingerthumbrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $totalrightfingeroptionsspread -attribute "rotateZ" -value $totalrightthumbrotateZ Biped_RightFingerThumb1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerindexrotateZ = `getAttr "Biped_RightFingerIndex1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $rightfingeroptionsspread -attribute "rotateZ" -value $rightfingerindexrotateZ Biped_RightFingerIndex1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 10.0; float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerindexrotateZ = `getAttr "Biped_RightFingerIndex1_globalcurl.rotateZ"`; float $totalrightfingeroptionsspread = $rightfingeroptionsspread + $add1; float $totalrightindexrotateZ = $rightfingerindexrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $totalrightfingeroptionsspread -attribute "rotateZ" -value $totalrightindexrotateZ Biped_RightFingerIndex1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingermiddlerotateZ = `getAttr "Biped_RightFingerMiddle1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $rightfingeroptionsspread -attribute "rotateZ" -value $rightfingermiddlerotateZ Biped_RightFingerMiddle1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 2.0; float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingermiddlerotateZ = `getAttr "Biped_RightFingerMiddle1_globalcurl.rotateZ"`; float $totalrightfingeroptionsspread = $rightfingeroptionsspread + $add1; float $totalrightmiddlerotateZ = $rightfingermiddlerotateZ + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $totalrightfingeroptionsspread -attribute "rotateZ" -value $totalrightmiddlerotateZ Biped_RightFingerMiddle1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerringrotateZ = `getAttr "Biped_RightFingerRing1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $rightfingeroptionsspread -attribute "rotateZ" -value $rightfingerringrotateZ Biped_RightFingerRing1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = -8.0; float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerringrotateZ = `getAttr "Biped_RightFingerRing1_globalcurl.rotateZ"`; float $totalrightfingeroptionsspread = $rightfingeroptionsspread + $add1; float $totalrightringrotateZ = $rightfingerringrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $totalrightfingeroptionsspread -attribute "rotateZ" -value $totalrightringrotateZ Biped_RightFingerRing1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerpinkyrotateZ = `getAttr "Biped_RightFingerPinky1_globalcurl.rotateZ"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $rightfingeroptionsspread -attribute "rotateZ" -value $rightfingerpinkyrotateZ Biped_RightFingerPinky1_globalcurl;')
            self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = -15.0; float $rightfingeroptionsspread = `getAttr "Biped_RightFingerOptions_ctrl.spread"`; float $rightfingerpinkyrotateZ = `getAttr "Biped_RightFingerPinky1_globalcurl.rotateZ"`; float $totalrightfingeroptionsspread = $rightfingeroptionsspread + $add1; float $totalrightpinkyrotateZ = $rightfingerpinkyrotateZ + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.spread -driverValue $totalrightfingeroptionsspread -attribute "rotateZ" -value $totalrightpinkyrotateZ Biped_RightFingerPinky1_globalcurl;')

            for index in range(rfingercurl_sl_ls.length()):
                rfingercurl_obj = rfingercurl_sl_ls.getDependNode(index)
                rfingercurl_string = rfingercurl_sl_ls.getSelectionStrings(index)

                if rfingercurl_obj.hasFn(om2.MFn.kTransform):
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_Right{0}Options_ctrl.curl Biped_RightFinger{1}_curl.rotateX'.format(str(rfingercurl_string)[20:][:-9], str(rfingercurl_string)[20:][:-8]))
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_Right{0}Options_ctrl.lean Biped_RightFinger{1}_curl.rotateZ'.format(str(rfingercurl_string)[20:][:-9], str(rfingercurl_string)[20:][:-8]))

                for index in range(1,5):
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $rightfingeroptionscurl -attribute "rotateX" -value $leftfingerindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightindexrotateX = $rightfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightindexrotateX = $rightfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $rightfingeroptionscurl -attribute "rotateX" -value $rightfingermiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightmiddlerotateX = $rightfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightmiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightmiddlerotateX = $rightfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightmiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $rightfingeroptionscurl -attribute "rotateX" -value $rightfingerringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightringrotateX = $rightfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightringrotateX = $rightfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $rightfingeroptionscurl -attribute "rotateX" -value $rightfingerpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightpinkyrotateX = $rightfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = -90.0; float $rightfingeroptionscurl = `getAttr "Biped_RightFingerOptions_ctrl.curl"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; float $totalrightfingeroptionscurl = $rightfingeroptionscurl + $add1; float $totalrightpinkyrotateX = $rightfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.curl -driverValue $totalrightfingeroptionscurl -attribute "rotateX" -value $totalrightpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))

                    self.MDG2_mod.commandToExecute('float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $rightfingeroptionsrelax -attribute "rotateX" -value $rightfingerindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 15.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightindexrotateX = $rightfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 5.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerindexrotateX = `getAttr "Biped_RightFingerIndex{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightindexrotateX = $rightfingerindexrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightindexrotateX Biped_RightFingerIndex{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $rightfingeroptionsrelax -attribute "rotateX" -value $rightfingermiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 10.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightmiddlerotateX = $rightfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightmiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 8.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingermiddlerotateX = `getAttr "Biped_RightFingerMiddle{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightmiddlerotateX = $rightfingermiddlerotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightmiddlerotateX Biped_RightFingerMiddle{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $rightfingeroptionsrelax -attribute "rotateX" -value $rightfingerringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 8.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightringrotateX = $rightfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 10.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerringrotateX = `getAttr "Biped_RightFingerRing{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightringrotateX = $rightfingerringrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightringrotateX Biped_RightFingerRing{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $rightfingeroptionsrelax -attribute "rotateX" -value $rightfingerpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = 10.0; float $add2 = 5.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightpinkyrotateX = $rightfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))
                    self.MDG2_mod.commandToExecute('float $add1 = -10.0; float $add2 = 15.0; float $rightfingeroptionsrelax = `getAttr "Biped_RightFingerOptions_ctrl.relax"`; float $rightfingerpinkyrotateX = `getAttr "Biped_RightFingerPinky{0}_globalcurl.rotateX"`; float $totalrightfingeroptionsrelax = $rightfingeroptionsrelax + $add1; float $totalrightpinkyrotateX = $rightfingerpinkyrotateX + $add2; setDrivenKeyframe -currentDriver Biped_RightFingerOptions_ctrl.relax -driverValue $totalrightfingeroptionsrelax -attribute "rotateX" -value $totalrightpinkyrotateX Biped_RightFingerPinky{0}_globalcurl;'.format(index))

                    self.MDG2_mod.commandToExecute('selectKey Biped_RightFingerThumb{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_RightFingerIndex{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_RightFingerMiddle{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_RightFingerRing{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))
                    self.MDG2_mod.commandToExecute('selectKey Biped_RightFingerPinky{0}_globalcurl; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative -preInfinite cycleRelative'.format(index))


            rfingergrp_sl_ls = om2.MSelectionList()
            rfingergrp_sl_ls.add("Biped_RightFingers_null")
            grp_obj = rfingergrp_sl_ls.getDependNode(0)

            rfingergrp_multMatrix = self.MDG2_mod.createNode("multMatrix")
            rfingergrp_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
            self.MDG2_mod.renameNode(rfingergrp_multMatrix, "RightFingers_multMatrix")
            self.MDG2_mod.renameNode(rfingergrp_decomposeMatrix, "RightFingers_decomposeMatrix")

            rfingergrpmultMatrix_fs = om2.MFnDependencyNode(rfingergrp_multMatrix)
            rfingergrpdecomposeMatrix_fs = om2.MFnDependencyNode(rfingergrp_decomposeMatrix)
            rfingergrp_fs = om2.MFnDependencyNode(grp_obj)

            rfingergrpmultMatrixSum_plug = rfingergrpmultMatrix_fs.findPlug("matrixSum", False)
            rfingergrpdecomposeInpMatrix_plug = rfingergrpdecomposeMatrix_fs.findPlug("inputMatrix", False)
            rfingergrpdecomposeOtpTrans_plug = rfingergrpdecomposeMatrix_fs.findPlug("outputTranslate", False)
            rfingergrpdecomposeOtpRot_plug = rfingergrpdecomposeMatrix_fs.findPlug("outputRotate", False)
            rfingergrpjntTrans_plug = rfingergrp_fs.findPlug("translate", False)
            rfingergrpjntRot_plug = rfingergrp_fs.findPlug("rotate", False)

            self.MDG2_mod.commandToExecute('connectAttr -force RightHand.worldMatrix[0] RightFingers_multMatrix.matrixIn[0]')
            self.MDG2_mod.commandToExecute('connectAttr -force Biped_RightFingers_null.parentInverseMatrix[0] RightFingers_multMatrix.matrixIn[1]')
            self.MDG2_mod.connect(rfingergrpmultMatrixSum_plug, rfingergrpdecomposeInpMatrix_plug)
            self.MDG2_mod.connect(rfingergrpdecomposeOtpTrans_plug, rfingergrpjntTrans_plug)
            self.MDG2_mod.connect(rfingergrpdecomposeOtpRot_plug, rfingergrpjntRot_plug)

            ikrleg_sl_ls = om2.MSelectionList()
            ikrleg_sl_ls.add("IkRightUpLeg")
            ikrleg_sl_ls.add("IkRightLeg")
            ikrleg_sl_ls.add("IkRightFoot")
            ikrleg_sl_ls.add("IkRightToeBase")

            noflipikrleg_sl_ls = om2.MSelectionList()
            noflipikrleg_sl_ls.add("IkNoFlipRightUpLeg")
            noflipikrleg_sl_ls.add("IkNoFlipRightLeg")
            noflipikrleg_sl_ls.add("IkNoFlipRightFoot")

            pvikrleg_sl_ls = om2.MSelectionList()
            pvikrleg_sl_ls.add("IkPVRightUpLeg")
            pvikrleg_sl_ls.add("IkPVRightLeg")
            pvikrleg_sl_ls.add("IkPVRightFoot")

            if cmds.objExists("NoFlipRightLeg_Ik") or  self.autostretch.currentIndex() == 1:
                rlegoptions_sl_ls = om2.MSelectionList()
                rlegoptions_sl_ls.add("Biped_RightFootOptions_ctrl")
                rlegoptions_obj = rlegoptions_sl_ls.getDependNode(0)

            if cmds.objExists("NoFlipRightLeg_Ik") and cmds.objExists("PVRightLeg_Ik"):
                self.MDG2_mod.commandToExecute('addAttr -longName "fkik" -niceName "Fk/Ik" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "kneeswitch" -niceName "Auto/Manual Knee" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')
                self.MDG2_mod.doIt()

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "legcontrolsvis" -niceName "Leg Controls Vis" -attributeType bool -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkRightUpLeg_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchy" -niceName "Stretchy" -attributeType double -keyable true -defaultValue 0 Biped_FkRightLeg_ctrl')
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_RightFootOptions_ctrl.legcontrolsvis RightLegIkCluster_grp.visibility')
                self.MDG2_mod.doIt()

            for index in range(fkrleg_sl_ls.length()):
                jnt_obj = fkrleg_sl_ls.getDependNode(index)
                jnt_string = fkrleg_sl_ls.getSelectionStrings(index)

                ikjnt_obj = ikrleg_sl_ls.getDependNode(index)
                ikjnt_string = ikrleg_sl_ls.getSelectionStrings(index)

                bindjnt_obj = rleg_sl_ls.getDependNode(index)
                bindjnt_string = rleg_sl_ls.getSelectionStrings(index)

                if jnt_obj.hasFn(om2.MFn.kJoint):
                    rlegctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    rlegctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(rlegctrl_multMatrix, str(jnt_string)[2:][:-3] + "_multMatrix")
                    self.MDG2_mod.renameNode(rlegctrl_decomposeMatrix, str(jnt_string)[2:][:-3] + "_decomposeMatrix")

                    rlegmultMatrix_fs = om2.MFnDependencyNode(rlegctrl_multMatrix)
                    rlegdecomposeMatrix_fs = om2.MFnDependencyNode(rlegctrl_decomposeMatrix)
                    rlegjnt_fs = om2.MFnDependencyNode(jnt_obj)

                    rlegmultMatrixSum_plug = rlegmultMatrix_fs.findPlug("matrixSum", False)
                    rlegdecomposeInpMatrix_plug = rlegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    rlegdecomposeOtpTrans_plug = rlegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rlegdecomposeOtpRot_plug = rlegdecomposeMatrix_fs.findPlug("outputRotate", False)
                    rlegjntTrans_plug = rlegjnt_fs.findPlug("translate", False)
                    rlegjntRot_plug = rlegjnt_fs.findPlug("rotate", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_{0}_ctrl.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.commandToExecute('connectAttr -force {0}.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(jnt_string)[3:][:-3]))
                    self.MDG2_mod.connect(rlegmultMatrixSum_plug, rlegdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(rlegdecomposeOtpTrans_plug, rlegjntTrans_plug)
                    self.MDG2_mod.connect(rlegdecomposeOtpRot_plug, rlegjntRot_plug)

                    if cmds.getAttr("{0}.jointOrientX".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(jnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(jnt_string)[3:][:-3])) != 0:
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientX" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientY" 0'.format(str(jnt_string)[3:][:-3]))
                        self.MDG2_mod.commandToExecute('setAttr "{0}.jointOrientZ" 0'.format(str(jnt_string)[3:][:-3]))

                if bindjnt_obj.hasFn(om2.MFn.kJoint):
                    if cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3])) != 0 or cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3])) != 0:
                        jointort_xattr = cmds.getAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]))
                        jointort_yattr = cmds.getAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]))
                        jointort_zattr = cmds.getAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]))

                        cmds.setAttr("{0}.rotateX".format(str(bindjnt_string)[3:][:-3]), jointort_xattr)
                        cmds.setAttr("{0}.rotateY".format(str(bindjnt_string)[3:][:-3]), jointort_yattr)
                        cmds.setAttr("{0}.rotateZ".format(str(bindjnt_string)[3:][:-3]), jointort_zattr)

                        cmds.setAttr("{0}.jointOrientX".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientY".format(str(bindjnt_string)[3:][:-3]), 0)
                        cmds.setAttr("{0}.jointOrientZ".format(str(bindjnt_string)[3:][:-3]), 0)

                    legjoint_fs = om2.MFnDependencyNode(bindjnt_obj)
                    fklegjoint_fs = om2.MFnDependencyNode(jnt_obj)

                    legjointtransinp_plug = legjoint_fs.findPlug("translate", False)
                    legjointrotinp_plug = legjoint_fs.findPlug("rotate", False)
                    fklegjointtransotp_plug = fklegjoint_fs.findPlug("translate", False)
                    fklegjointrototp_plug = fklegjoint_fs.findPlug("rotate", False)

                    if cmds.objExists("NoFlipRightLeg_Ik") and cmds.objExists("PVRightLeg_Ik"):

                        rlegoptions_fs = om2.MFnDependencyNode(rlegoptions_obj)
                        rlegoptionsfkik_plug = rlegoptions_fs.findPlug("fkik", False)
                        rlegoptionskneeswitch_plug = rlegoptions_fs.findPlug("kneeswitch", False)

                        legrotblendnode = self.MDG2_mod.createNode("blendColors")
                        legtransblendnode = self.MDG2_mod.createNode("blendColors")
                        legjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        self.MDG2_mod.renameNode(legjoint_decomposeMatrix,
                                                 str(bindjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                        self.MDG2_mod.renameNode(legrotblendnode, str(bindjnt_string)[2:][:-3] + "Rot_blend")
                        self.MDG2_mod.renameNode(legtransblendnode, str(bindjnt_string)[2:][:-3] + "Trans_blend")

                        legrotblendnode_fs = om2.MFnDependencyNode(legrotblendnode)
                        legtransblendnode_fs = om2.MFnDependencyNode(legtransblendnode)
                        legdecomposeMatrix_fs = om2.MFnDependencyNode(legjoint_decomposeMatrix)
                        iklegjoint_fs = om2.MFnDependencyNode(ikjnt_obj)

                        legdecomposeInpMatrix_plug = legdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        legdecomposeOtpRot_plug = legdecomposeMatrix_fs.findPlug("outputRotate", False)
                        legdecomposeOtpTrans_plug = legdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        legrotblendnodeinp1_plug = legrotblendnode_fs.findPlug("color1", False)
                        legrotblendnodeinp2_plug = legrotblendnode_fs.findPlug("color2", False)
                        legrotblendnodeotp_plug = legrotblendnode_fs.findPlug("output", False)
                        legrotblendnodeblender_plug = legrotblendnode_fs.findPlug("blender", False)
                        legtransblendnodeinp1_plug = legtransblendnode_fs.findPlug("color1", False)
                        legtransblendnodeinp2_plug = legtransblendnode_fs.findPlug("color2", False)
                        legtransblendnodeotp_plug = legtransblendnode_fs.findPlug("output", False)
                        legtransblendnodeblender_plug = legtransblendnode_fs.findPlug("blender", False)
                        iklegjointotp_plug = iklegjoint_fs.findPlug("matrix", False)

                        self.MDG2_mod.connect(iklegjointotp_plug, legdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(legdecomposeOtpRot_plug, legrotblendnodeinp1_plug)
                        self.MDG2_mod.connect(legdecomposeOtpTrans_plug, legtransblendnodeinp1_plug)
                        self.MDG2_mod.connect(fklegjointrototp_plug, legrotblendnodeinp2_plug)
                        self.MDG2_mod.connect(fklegjointtransotp_plug, legtransblendnodeinp2_plug)
                        self.MDG2_mod.connect(legrotblendnodeotp_plug, legjointrotinp_plug)
                        self.MDG2_mod.connect(legtransblendnodeotp_plug, legjointtransinp_plug)
                        self.MDG2_mod.connect(rlegoptionsfkik_plug, legrotblendnodeblender_plug)
                        self.MDG2_mod.connect(rlegoptionsfkik_plug, legtransblendnodeblender_plug)

                        if index < 3:
                            noflipjnt_obj = noflipikrleg_sl_ls.getDependNode(index)
                            noflipjnt_string = noflipikrleg_sl_ls.getSelectionStrings(index)

                            pvjnt_obj = pvikrleg_sl_ls.getDependNode(index)
                            pvjnt_string = pvikrleg_sl_ls.getSelectionStrings(index)

                            legrotblendnode = self.MDG2_mod.createNode("blendColors")
                            legtransblendnode = self.MDG2_mod.createNode("blendColors")
                            nofliplegjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                            pvlegjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                            self.MDG2_mod.renameNode(nofliplegjoint_decomposeMatrix, str(noflipjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                            self.MDG2_mod.renameNode(pvlegjoint_decomposeMatrix, str(pvjnt_string)[2:][:-3] + "Blend_decomposeMatrix")
                            self.MDG2_mod.renameNode(legrotblendnode, str(bindjnt_string)[2:][:-3] + "Rot_kneeblend")
                            self.MDG2_mod.renameNode(legtransblendnode, str(bindjnt_string)[2:][:-3] + "Trans_kneeblend")

                            legrotblendnode_fs = om2.MFnDependencyNode(legrotblendnode)
                            legtransblendnode_fs = om2.MFnDependencyNode(legtransblendnode)
                            nofliplegdecomposeMatrix_fs = om2.MFnDependencyNode(nofliplegjoint_decomposeMatrix)
                            pvlegdecomposeMatrix_fs = om2.MFnDependencyNode(pvlegjoint_decomposeMatrix)
                            noflipiklegjoint_fs = om2.MFnDependencyNode(noflipjnt_obj)
                            pviklegjoint_fs = om2.MFnDependencyNode(pvjnt_obj)
                            pviklegctrl_fs = om2.MFnDependencyNode(self.pvrlegkneectrl_tn)

                            nofliplegdecomposeInpMatrix_plug = nofliplegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                            nofliplegdecomposeOtpRot_plug = nofliplegdecomposeMatrix_fs.findPlug("outputRotate", False)
                            nofliplegdecomposeOtpTrans_plug = nofliplegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                            pvlegdecomposeInpMatrix_plug = pvlegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                            pvlegdecomposeOtpRot_plug = pvlegdecomposeMatrix_fs.findPlug("outputRotate", False)
                            pvlegdecomposeOtpTrans_plug = pvlegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                            legrotblendnodeinp1_plug = legrotblendnode_fs.findPlug("color1", False)
                            legrotblendnodeinp2_plug = legrotblendnode_fs.findPlug("color2", False)
                            legrotblendnodeotp_plug = legrotblendnode_fs.findPlug("output", False)
                            legrotblendnodeblender_plug = legrotblendnode_fs.findPlug("blender", False)
                            legtransblendnodeinp1_plug = legtransblendnode_fs.findPlug("color1", False)
                            legtransblendnodeinp2_plug = legtransblendnode_fs.findPlug("color2", False)
                            legtransblendnodeotp_plug = legtransblendnode_fs.findPlug("output", False)
                            legtransblendnodeblender_plug = legtransblendnode_fs.findPlug("blender", False)
                            noflipiklegjointotp_plug = noflipiklegjoint_fs.findPlug("matrix", False)
                            pviklegjointotp_plug = pviklegjoint_fs.findPlug("matrix", False)
                            iklegjointinpTrans_plug = iklegjoint_fs.findPlug("translate", False)
                            iklegjointinpRot_plug = iklegjoint_fs.findPlug("jointOrient", False)
                            pviklegctrlVis_plug = pviklegctrl_fs.findPlug("visibility", False)

                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 1 Biped_FkRightUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 0 Biped_FkRightUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_FkRightUpLeg_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 0 -attribute "visibility" -value 0 Biped_IkRightFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 1 -attribute "visibility" -value 1 Biped_IkRightFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkRightFoot_ctrl')
                            self.MDG2_mod.commandToExecute('setDrivenKeyframe -currentDriver Biped_RightFootOptions_ctrl.fkik -driverValue 0.5 -attribute "visibility" -value 1 Biped_IkRightFoot_ctrl')
                            self.MDG2_mod.connect(noflipiklegjointotp_plug, nofliplegdecomposeInpMatrix_plug)
                            self.MDG2_mod.connect(pviklegjointotp_plug, pvlegdecomposeInpMatrix_plug)
                            self.MDG2_mod.connect(pvlegdecomposeOtpRot_plug, legrotblendnodeinp1_plug)
                            self.MDG2_mod.connect(pvlegdecomposeOtpTrans_plug, legtransblendnodeinp1_plug)
                            self.MDG2_mod.connect(nofliplegdecomposeOtpRot_plug, legrotblendnodeinp2_plug)
                            self.MDG2_mod.connect(nofliplegdecomposeOtpTrans_plug, legtransblendnodeinp2_plug)
                            self.MDG2_mod.connect(legrotblendnodeotp_plug, iklegjointinpRot_plug)
                            self.MDG2_mod.connect(legtransblendnodeotp_plug, iklegjointinpTrans_plug)
                            self.MDG2_mod.connect(rlegoptionskneeswitch_plug, legrotblendnodeblender_plug)
                            self.MDG2_mod.connect(rlegoptionskneeswitch_plug, legtransblendnodeblender_plug)
                            self.MDG2_mod.connect(rlegoptionskneeswitch_plug, pviklegctrlVis_plug)

                    else:
                        self.MDG2_mod.connect(fklegjointtransotp_plug, legjointtransinp_plug)
                        self.MDG2_mod.connect(fklegjointrototp_plug, legjointrotinp_plug)

                if self.autostretch.currentIndex() == 1:
                    if index < 2:
                        ikrleggrp_sl_lst = om2.MSelectionList()
                        ikrleggrp_sl_lst.add("RightUpperLegIkCluster_grp")
                        ikrleggrp_sl_lst.add("RightUpperLegIkCluster2_grp")
                        ikrleggrp_sl_lst.add("RightLowerLegIkCluster_grp")
                        ikrleggrp_sl_lst.add("RightLowerLegIkCluster2_grp")
                        ikrleggrp_sl_lst.add("RightLowerLegIkCluster0_grp")
                        ikrleggrp_sl_lst.add("IkCvSplineRightUpperLeg2")
                        grp_legupperikcluster = ikrleggrp_sl_lst.getDependNode(0)
                        grp_legupperikcluster2 = ikrleggrp_sl_lst.getDependNode(1)
                        grp_leglowerikcluster = ikrleggrp_sl_lst.getDependNode(2)
                        grp_leglowerikcluster2 = ikrleggrp_sl_lst.getDependNode(3)
                        grp_leglowerikcluster0 = ikrleggrp_sl_lst.getDependNode(4)
                        grp_legupperikcvcluster2 = ikrleggrp_sl_lst.getDependNode(5)

                        rlegjoint_multMatrix = self.MDG2_mod.createNode("multMatrix")
                        legjoint_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                        rlegmultMatrix_fs = om2.MFnDependencyNode(rlegjoint_multMatrix)
                        rlegdecomposeMatrix_fs = om2.MFnDependencyNode(legjoint_decomposeMatrix)
                        iklupperleggrp_fs = om2.MFnDependencyNode(grp_legupperikcluster)
                        ikllowerleggrp_fs = om2.MFnDependencyNode(grp_leglowerikcluster)
                        ikrupperlegcv2_fs = om2.MFnDependencyNode(grp_legupperikcvcluster2)
                        ikrlowerleggrp0_fs = om2.MFnDependencyNode(grp_leglowerikcluster0)

                        rlegmultMatrixSum_plug = rlegmultMatrix_fs.findPlug("matrixSum", False)
                        rlegdecomposeInpMatrix_plug = rlegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                        rlegdecomposeOtpTrans_plug = rlegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                        rlegdecomposeOtpRot_plug = rlegdecomposeMatrix_fs.findPlug("outputRotate", False)
                        iklupperleggrpTrans_plug = iklupperleggrp_fs.findPlug("translate", False)
                        iklupperleggrpRot_plug = iklupperleggrp_fs.findPlug("rotate", False)
                        ikrlowerleggrpTrans_plug = ikllowerleggrp_fs.findPlug("translate", False)
                        ikrlowerleggrpRot_plug = ikllowerleggrp_fs.findPlug("rotate", False)
                        ikrupperrlegcv2Trans_plug = ikrupperlegcv2_fs.findPlug("translate", False)
                        ikrlowerleggrp0Trans_plug = ikrlowerleggrp0_fs.findPlug("translate", False)
                        ikrupperrlegcv2RotY_plug = ikrupperlegcv2_fs.findPlug("rotateY", False)
                        ikrlowerleggrp0RotY_plug = ikrlowerleggrp0_fs.findPlug("rotateY", False)

                        self.MDG2_mod.renameNode(rlegjoint_multMatrix, str(bindjnt_string)[2:][:-3] + "_multMatrix")
                        self.MDG2_mod.renameNode(legjoint_decomposeMatrix, str(bindjnt_string)[2:][:-3] + "_decomposeMatrix")
                        self.MDG2_mod.commandToExecute('connectAttr -force {0}.worldMatrix[0] {0}_multMatrix.matrixIn[0]'.format(str(bindjnt_string)[3:][:-3]))
                        self.MDG2_mod.connect(rlegmultMatrixSum_plug, rlegdecomposeInpMatrix_plug)
                        self.MDG2_mod.connect(ikrupperrlegcv2Trans_plug, ikrlowerleggrp0Trans_plug)
                        self.MDG2_mod.connect(ikrupperrlegcv2RotY_plug, ikrlowerleggrp0RotY_plug)

                        fkrlegstretch_expression = om1.MFnExpression()

                        if index == 0:
                            fkrlegstretch_expression.create("Biped_StretchyRightLeg_null.translateY = Biped_FkRightUpLeg_ctrl.stretchy")
                            fkrlegstretch_expression.create("Biped_StretchyRightLeg_null.translateZ = Biped_StretchyRightLeg_null.translateY/10")

                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperLegIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(rlegdecomposeOtpTrans_plug, iklupperleggrpTrans_plug)
                            self.MDG2_mod.connect(rlegdecomposeOtpRot_plug, iklupperleggrpRot_plug)

                            rupperlegcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            rupperlegcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            rupperlegcluster2multMatrix_fs = om2.MFnDependencyNode(rupperlegcluster2_multMatrix)
                            rupperlegcluster2decomposeMatrix_fs = om2.MFnDependencyNode(rupperlegcluster2_decomposeMatrix)
                            rupperlegcluster2_fs = om2.MFnDependencyNode(grp_legupperikcluster2)

                            rupperlegcluster2multMatrixSum_plug = rupperlegcluster2multMatrix_fs.findPlug("matrixSum", False)
                            rupperlegcluster2decomposeInpMatrix_plug = rupperlegcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            rupperlegcluster2decomposeOtpTrans_plug = rupperlegcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            rupperlegcluster2Trans_plug = rupperlegcluster2_fs.findPlug("translate", False)

                            self.MDG2_mod.renameNode(rupperlegcluster2_multMatrix, "RightUpperLegCluster2_multMatrix")
                            self.MDG2_mod.renameNode(rupperlegcluster2_decomposeMatrix, "RightUpperLegCluster2_decomposeMatrix")
                            self.MDG2_mod.connect(rupperlegcluster2multMatrixSum_plug, rupperlegcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.commandToExecute('connectAttr -force RightLeg.worldMatrix[0] RightUpperLegCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force RightUpperLegIkCluster2_grp.parentInverseMatrix[0] RightUpperLegCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(rupperlegcluster2decomposeOtpTrans_plug, rupperlegcluster2Trans_plug)

                        elif index == 1:
                            fkrlegstretch_expression.create("Biped_StretchyRightFoot_null.translateY = Biped_FkRightLeg_ctrl.stretchy")
                            fkrlegstretch_expression.create("Biped_StretchyRightFoot_null.translateZ = Biped_StretchyRightFoot_null.translateY*(-1.5)")

                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerLegIkCluster_grp.parentInverseMatrix[0] {0}_multMatrix.matrixIn[1]'.format(str(bindjnt_string)[3:][:-3]))
                            self.MDG2_mod.connect(rlegdecomposeOtpTrans_plug, ikrlowerleggrpTrans_plug)
                            self.MDG2_mod.connect(rlegdecomposeOtpRot_plug, ikrlowerleggrpRot_plug)

                            rlowerlegcluster2_multMatrix = self.MDG2_mod.createNode("multMatrix")
                            rlowerlegcluster2_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")

                            rlowerlegcluster2multMatrix_f = om2.MFnDependencyNode(rlowerlegcluster2_multMatrix)
                            rlowerlegcluster2decomposeMatrix_fs = om2.MFnDependencyNode(rlowerlegcluster2_decomposeMatrix)
                            rlowerlegcluster2_fs = om2.MFnDependencyNode(grp_leglowerikcluster2)

                            rlowerlegcluster2multMatrixSum_plug = rlowerlegcluster2multMatrix_f.findPlug("matrixSum", False)
                            rlowerlegcluster2decomposeInpMatrix_plug = rlowerlegcluster2decomposeMatrix_fs.findPlug("inputMatrix", False)
                            rlowerlegcluster2decomposeOtpTrans_plug = rlowerlegcluster2decomposeMatrix_fs.findPlug("outputTranslate", False)
                            rlowerlegcluster2decomposeOtpRot_plug = rlowerlegcluster2decomposeMatrix_fs.findPlug("outputRotateY", False)
                            rlowerlegcluster2Trans_plug = rlowerlegcluster2_fs.findPlug("translate", False)
                            rlowerlegcluster2RotY_plug = rlowerlegcluster2_fs.findPlug("rotateY", False)

                            self.MDG2_mod.renameNode(rlowerlegcluster2_multMatrix, "RightLowerLegCluster2_multMatrix")
                            self.MDG2_mod.renameNode(rlowerlegcluster2_decomposeMatrix, "RightLowerLegCluster2_decomposeMatrix")
                            self.MDG2_mod.commandToExecute('connectAttr -force RightFoot.worldMatrix[0] RightLowerLegCluster2_multMatrix.matrixIn[0]')
                            self.MDG2_mod.commandToExecute('connectAttr -force RightLowerLegIkCluster2_grp.parentInverseMatrix[0] RightLowerLegCluster2_multMatrix.matrixIn[1]')
                            self.MDG2_mod.connect(rlowerlegcluster2multMatrixSum_plug, rlowerlegcluster2decomposeInpMatrix_plug)
                            self.MDG2_mod.connect(rlowerlegcluster2decomposeOtpTrans_plug, rlowerlegcluster2Trans_plug)
                            self.MDG2_mod.connect(rlowerlegcluster2decomposeOtpRot_plug, rlowerlegcluster2RotY_plug)

                elif cmds.objExists("RightLegIkCluster_grp") and cmds.objExists("IkStretchyRightJointLeg_grp"):
                    self.MDG2_mod.commandToExecute('delete "RightLegIkCluster_grp"')
                    self.MDG2_mod.doIt()

            rleggrp_sl_ls = om2.MSelectionList()
            rleggrp_sl_ls.add("FkRightJointLeg_grp")
            rleggrp_sl_ls.add("RightJointLeg_grp")

            fkrleggrp_obj = rleggrp_sl_ls.getDependNode(0)
            rleggrp_obj = rleggrp_sl_ls.getDependNode(1)

            fkrleggrp_fs = om2.MFnDependencyNode(fkrleggrp_obj)
            rleggrp_fs = om2.MFnDependencyNode(rleggrp_obj)

            fkrleggrpScal_plug = fkrleggrp_fs.findPlug("scale", False)
            rleggrpScal_plug = rleggrp_fs.findPlug("scale", False)

            self.MDG2_mod.connect(masterdecomposeOtpScale_plug, fkrleggrpScal_plug)
            self.MDG2_mod.connect(masterdecomposeOtpScale_plug, rleggrpScal_plug)

            grp_legupperikcluster1 = om1.MObject()
            grp_legupperikcluster2 = om1.MObject()
            obj_stretchyrightfoot = om1.MObject()

            if self.autostretch.currentIndex() == 1:
                self.MDG2_mod.commandToExecute('addAttr -longName "stretchable" -niceName "Stretchable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')
                self.MDG2_mod.commandToExecute('addAttr -longName "squashable" -niceName "Squashable" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')
                self.MDG2_mod.doIt()

                stretchy_sl_lst1.add("Biped_RightFootOptions_ctrl")
                stretchy_sl_lst1.getDependNode(5, obj_stretchyrightfoot)

                if cmds.objExists("IkSplineRightUpperLeg0"):
                    ikrupperleg_sl_lst = om1.MSelectionList()
                    ikrupperleg_sl_lst.add("IkSplineRightUpperLeg*")
                    ikrupperleg_sl_lst.getDependNode(0, obj_root)
                    ikrupperleg_sl_lst.getDependNode(ikrupperleg_sl_lst.length()-1, obj_endspine)

                    ikrupperleggrp_sl_lst = om1.MSelectionList()
                    ikrupperleggrp_sl_lst.add("RightUpperLegIkCluster1_grp")
                    ikrupperleggrp_sl_lst.add("RightUpperLegIkCluster2_grp")
                    ikrupperleggrp_sl_lst.getDependNode(0, grp_legupperikcluster1)
                    ikrupperleggrp_sl_lst.getDependNode(1, grp_legupperikcluster2)

                    rleg_pathnode = om1.MDagPath()
                    rootspine_path = rleg_pathnode.getAPathTo(obj_root)

                    try:
                        ikspineiksolver_lst.add("ikSplineSolver*")
                    except:
                        cmds.createNode("ikSplineSolver")

                    self.ikrleg_effector = self.IK_Effector.create(obj_endspine)
                    ikrleg_effector_path = rleg_pathnode.getAPathTo(self.ikrleg_effector)

                    self.rleg_ik = self.IK_Handle.create(rootspine_path, ikrleg_effector_path)

                    obj_array = om1.MPointArray()
                    obj_lst_mpoint = []
                    obj = om1.MObject()
                    for index in range(ikrupperleg_sl_lst.length()):
                        ikrupperleg_sl_lst.getDependNode(index, obj)
                        obj_path = self.MDag_path.getAPathTo(obj)
                        obj_tn = om1.MFnTransform(obj_path)
                        obj_t = obj_tn.translation(om1.MSpace.kWorld)
                        obj_lst_mpoint.append(om1.MPoint(obj_t))
                        obj_array.append(obj_lst_mpoint[index])

                    self.ikspline_cv_tn = ikspinedag_n.create("transform", "RightUpperLeg_SplineCv")
                    ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                    cmds.parent("RightUpperLeg_SplineCv", "DoNotTouch")

                    rlegcrv_info = ikspinedg_modifier.createNode("curveInfo")
                    rlegstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                    rlegstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                    rlegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    rlegscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                    riklegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                    blendstretch = ikspinedg_modifier.createNode("blendColors")
                    blendsquash = ikspinedg_modifier.createNode("blendColors")

                    rlegcrvinfo_fs = om1.MFnDependencyNode(rlegcrv_info)
                    rlegstretchpercent_fs = om1.MFnDependencyNode(rlegstretchpercent)
                    rlegstretchpow_fs = om1.MFnDependencyNode(rlegstretchpow)
                    rlegstretchdiv_fs = om1.MFnDependencyNode(rlegstretchdiv)
                    rlegscalediv_fs = om1.MFnDependencyNode(rlegscalediv)
                    riklegstretchdiv_fs = om1.MFnDependencyNode(riklegstretchdiv)
                    riklegstretchcluster1_fs = om1.MFnDependencyNode(grp_legupperikcluster1)
                    riklegstretchcluster2_fs = om1.MFnDependencyNode(grp_legupperikcluster2)
                    blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                    blendsquash_fs = om1.MFnDependencyNode(blendsquash)
                    rlegstretchoption_fs = om1.MFnDependencyNode(obj_stretchyrightfoot)

                    rlegcrvinfoarc_plug = rlegcrvinfo_fs.findPlug("arcLength")
                    rlegstretchpercentinp1y_plug = rlegstretchpercent_fs.findPlug("input1Y")
                    rlegstretchpercentotp_plug = rlegstretchpercent_fs.findPlug("outputY")
                    rlegstretchpowinp1x_plug = rlegstretchpow_fs.findPlug("input1X")
                    rlegstretchpowinp1z_plug = rlegstretchpow_fs.findPlug("input1Z")
                    rlegstretchpowotpx_plug = rlegstretchpow_fs.findPlug("outputX")
                    rlegstretchpowotpz_plug = rlegstretchpow_fs.findPlug("outputZ")
                    rlegstretchdivinp2x_plug = rlegstretchdiv_fs.findPlug("input2X")
                    rlegstretchdivinp2z_plug = rlegstretchdiv_fs.findPlug("input2Z")
                    rlegstretchdivotox_plug = rlegstretchdiv_fs.findPlug("outputX")
                    rlegstretchdivotpz_plug = rlegstretchdiv_fs.findPlug("outputZ")
                    rlegscaledivinp1y_plug = rlegscalediv_fs.findPlug("input1Y")
                    rlegscaledivinp2y_plug = rlegscalediv_fs.findPlug("input2Y")
                    rlegscaledivotpy_plug = rlegscalediv_fs.findPlug("outputY")
                    riklegstretchdivinp1_plug = riklegstretchdiv_fs.findPlug("input1")
                    riklegstretchdivotp_plug = riklegstretchdiv_fs.findPlug("output")
                    riklegstretchclust1trans_plug = riklegstretchcluster1_fs.findPlug("translate")
                    riklegstretchclust2trans_plug = riklegstretchcluster2_fs.findPlug("translate")
                    blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                    blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                    blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                    blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                    blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                    blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                    blendstretch_plug = blendstretch_fs.findPlug("blender")
                    blendsquash_plug = blendsquash_fs.findPlug("blender")
                    rlegstretchoption_plug = rlegstretchoption_fs.findPlug("stretchable")
                    rlegsquashoption_plug = rlegstretchoption_fs.findPlug("squashable")

                    objparent = om1.MObject()
                    objchild = om1.MObject()
                    for index in range(ikrupperleg_sl_lst.length()):
                        if index < ikrupperleg_sl_lst.length()-1:
                            ikrupperleg_sl_lst.getDependNode(index, objparent)
                            ikrupperleg_sl_lst.getDependNode(index+1, objchild)
                            rlegparentjnt_fs = om1.MFnDependencyNode(objparent)
                            rlegchildjnt_fs = om1.MFnDependencyNode(objchild)
                            rlegjnt_syplug = rlegparentjnt_fs.findPlug("scaleY")
                            rlegjnt_sxplug = rlegparentjnt_fs.findPlug("scaleX")
                            rlegjnt_szplug = rlegparentjnt_fs.findPlug("scaleZ")
                            rlegjnt_sotpplug = rlegparentjnt_fs.findPlug("scale")
                            rlegjnt_invsplug = rlegchildjnt_fs.findPlug("inverseScale")
                            ikspinedg_modifier.connect(rlegstretchpercentotp_plug, blendstretchinp1g_plug)
                            ikspinedg_modifier.connect(rlegstretchdivotox_plug, blendsquashinp1r_plug)
                            ikspinedg_modifier.connect(rlegstretchdivotpz_plug, blendsquashinp1b_plug)
                            ikspinedg_modifier.connect(blendstretchotpg_plug, rlegjnt_syplug)
                            ikspinedg_modifier.connect(blendsquashotpr_plug, rlegjnt_sxplug)
                            ikspinedg_modifier.connect(blendsquashotpb_plug, rlegjnt_szplug)
                            ikspinedg_modifier.connect(rlegjnt_sotpplug, rlegjnt_invsplug)

                    ikspinedg_modifier.renameNode(rlegcrv_info, "RightUpperLegSpline_Info")
                    ikspinedg_modifier.renameNode(rlegstretchpercent, "RightUpperLegStretch_Percent")
                    ikspinedg_modifier.renameNode(rlegstretchpow, "RightUpperLegStretch_Power")
                    ikspinedg_modifier.renameNode(rlegstretchdiv, "RightUpperLegStretch_Divide")
                    ikspinedg_modifier.renameNode(ikspline_cv, "RightUpperLeg_SplineCvShape")
                    ikspinedg_modifier.renameNode(self.rleg_ik, "RightUpperLeg_Ik")
                    ikspinedg_modifier.renameNode(self.ikrleg_effector, "RightUpperLeg_effector")
                    ikspinedg_modifier.renameNode(rlegscalediv, "IkRightUpperLegGlobalScale_Average")
                    ikspinedg_modifier.renameNode(riklegstretchdiv, "RightUpperLegStretch_Divide2")
                    ikspinedg_modifier.renameNode(blendstretch, "RightUpperLegStretch_Blend")
                    ikspinedg_modifier.renameNode(blendsquash, "RightUpperLegSquash_Blend")
                    ikspinedg_modifier.commandToExecute('parent "RightUpperLeg_Ik" "DoNotTouch"')
                    ikspinedg_modifier.commandToExecute('connectAttr -force RightUpperLeg_SplineCvShape.worldSpace[0] RightUpperLeg_Ik.inCurve')
                    ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "RightUpperLegIk_skin" IkCvSplineRightUpperLeg0 IkCvSplineRightUpperLeg1 IkCvSplineRightUpperLeg2 RightUpperLeg_SplineCv')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dTwistControlEnable" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpType" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dForwardAxis" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpAxis" 4')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpVectorY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpVectorEndY" 0')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpVectorZ" -1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLeg_Ik.dWorldUpVectorEndZ" -1')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineRightUpperLeg0.worldMatrix[0] RightUpperLeg_Ik.dWorldUpMatrix')
                    ikspinedg_modifier.commandToExecute('connectAttr -force IkCvSplineRightUpperLeg2.worldMatrix[0] RightUpperLeg_Ik.dWorldUpMatrixEnd')
                    ikspinedg_modifier.commandToExecute('connectAttr -force RightUpperLeg_SplineCvShape.worldSpace[0] RightUpperLegSpline_Info.inputCurve')
                    ikspinedg_modifier.connect(rlegcrvinfoarc_plug, rlegscaledivinp1y_plug)
                    ikspinedg_modifier.connect(masterctrlsy_plug, rlegscaledivinp2y_plug)
                    ikspinedg_modifier.connect(rlegscaledivotpy_plug, rlegstretchpercentinp1y_plug)
                    ikspinedg_modifier.connect(rlegstretchpercentotp_plug, rlegstretchpowinp1x_plug)
                    ikspinedg_modifier.connect(rlegstretchpercentotp_plug, rlegstretchpowinp1z_plug)
                    ikspinedg_modifier.connect(rlegstretchpowotpx_plug, rlegstretchdivinp2x_plug)
                    ikspinedg_modifier.connect(rlegstretchpowotpz_plug, rlegstretchdivinp2z_plug)
                    ikspinedg_modifier.connect(riklegstretchclust2trans_plug, riklegstretchdivinp1_plug)
                    ikspinedg_modifier.connect(riklegstretchdivotp_plug, riklegstretchclust1trans_plug)
                    ikspinedg_modifier.connect(rlegstretchoption_plug, blendstretch_plug)
                    ikspinedg_modifier.connect(rlegsquashoption_plug, blendsquash_plug)
                    ikspinedg_modifier.commandToExecute('float $rightupperlegstretchinput1Y = `getAttr "RightUpperLegStretch_Percent.input1Y"`; setAttr "RightUpperLegStretch_Percent.input2Y" $rightupperlegstretchinput1Y')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Power.input2X" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Power.input2Z" 0.5')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide.input1X" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide.input1Z" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Percent.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Power.operation" 3')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "IkRightUpperLegGlobalScale_Average.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide2.operation" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide2.input2X" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide2.input2Y" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Divide2.input2Z" 2')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegSquash_Blend.color2R" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegStretch_Blend.color2G" 1')
                    ikspinedg_modifier.commandToExecute('setAttr "RightUpperLegSquash_Blend.color2B" 1')
                    ikspinedg_modifier.doIt()

                    ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                    self.IK_Handle.setSolver(ikspline_solver)

                    grp_armlowerikcluster1 = om1.MObject()
                    grp_armlowerikcluster2 = om1.MObject()

                    if cmds.objExists("IkSplineRightLowerLeg0"):
                        ikrlowerleg_sl_lst = om1.MSelectionList()
                        ikrlowerleg_sl_lst.add("IkSplineRightLowerLeg*")
                        ikrlowerleg_sl_lst.getDependNode(0, obj_root)
                        ikrlowerleg_sl_lst.getDependNode(ikrlowerleg_sl_lst.length()-1, obj_endspine)

                        ikrlowerleggrp_sl_lst = om1.MSelectionList()
                        ikrlowerleggrp_sl_lst.add("RightLowerLegIkCluster1_grp")
                        ikrlowerleggrp_sl_lst.add("RightLowerLegIkCluster2_grp")
                        ikrlowerleggrp_sl_lst.getDependNode(0, grp_armlowerikcluster1)
                        ikrlowerleggrp_sl_lst.getDependNode(1, grp_armlowerikcluster2)

                        rleg_pathnode = om1.MDagPath()
                        rootspine_path = rleg_pathnode.getAPathTo(obj_root)

                        try:
                            ikspineiksolver_lst.add("ikSplineSolver*")
                        except:
                            cmds.createNode("ikSplineSolver")

                        self.ikrleg_effector = self.IK_Effector.create(obj_endspine)
                        ikrleg_effector_path = rleg_pathnode.getAPathTo(self.ikrleg_effector)

                        self.rleg_ik = self.IK_Handle.create(rootspine_path, ikrleg_effector_path)

                        obj_array = om1.MPointArray()
                        obj_lst_mpoint = []
                        obj = om1.MObject()
                        for index in range(ikrlowerleg_sl_lst.length()):
                            ikrlowerleg_sl_lst.getDependNode(index, obj)
                            obj_path = self.MDag_path.getAPathTo(obj)
                            obj_tn = om1.MFnTransform(obj_path)
                            obj_t = obj_tn.translation(om1.MSpace.kWorld)
                            obj_lst_mpoint.append(om1.MPoint(obj_t))
                            obj_array.append(obj_lst_mpoint[index])

                        self.ikspline_cv_tn = ikspinedag_n.create("transform", "RightLowerLeg_SplineCv")
                        ikspline_cv = self.MNurbs1_cv.createWithEditPoints(obj_array, 1, 1, False, True, True, self.ikspline_cv_tn)
                        cmds.parent("RightLowerLeg_SplineCv", "DoNotTouch")

                        rlegcrv_info = ikspinedg_modifier.createNode("curveInfo")
                        rlegstretchpercent = ikspinedg_modifier.createNode("multiplyDivide")
                        rlegstretchpow = ikspinedg_modifier.createNode("multiplyDivide")
                        rlegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                        rlegscalediv = ikspinedg_modifier.createNode("multiplyDivide")
                        riklegstretchdiv = ikspinedg_modifier.createNode("multiplyDivide")
                        blendstretch = ikspinedg_modifier.createNode("blendColors")
                        blendsquash = ikspinedg_modifier.createNode("blendColors")

                        rlegcrvinfo_fs = om1.MFnDependencyNode(rlegcrv_info)
                        rlegstretchpercent_fs = om1.MFnDependencyNode(rlegstretchpercent)
                        rlegstretchpow_fs = om1.MFnDependencyNode(rlegstretchpow)
                        rlegstretchdiv_fs = om1.MFnDependencyNode(rlegstretchdiv)
                        rlegscalediv_fs = om1.MFnDependencyNode(rlegscalediv)
                        riklegstretchdiv_fs = om1.MFnDependencyNode(riklegstretchdiv)
                        riklegstretchcluster1_fs = om1.MFnDependencyNode(grp_armlowerikcluster1)
                        riklegstretchcluster2_fs = om1.MFnDependencyNode(grp_armlowerikcluster2)
                        blendstretch_fs = om1.MFnDependencyNode(blendstretch)
                        blendsquash_fs = om1.MFnDependencyNode(blendsquash)

                        rlegcrvinfoarc_plug = rlegcrvinfo_fs.findPlug("arcLength")
                        rlegstretchpercentinp1y_plug = rlegstretchpercent_fs.findPlug("input1Y")
                        rlegstretchpercentotp_plug = rlegstretchpercent_fs.findPlug("outputY")
                        rlegstretchpowinp1x_plug = rlegstretchpow_fs.findPlug("input1X")
                        rlegstretchpowinp1z_plug = rlegstretchpow_fs.findPlug("input1Z")
                        rlegstretchpowotpx_plug = rlegstretchpow_fs.findPlug("outputX")
                        rlegstretchpowotpz_plug = rlegstretchpow_fs.findPlug("outputZ")
                        rlegstretchdivinp2x_plug = rlegstretchdiv_fs.findPlug("input2X")
                        rlegstretchdivinp2z_plug = rlegstretchdiv_fs.findPlug("input2Z")
                        rlegstretchdivotox_plug = rlegstretchdiv_fs.findPlug("outputX")
                        rlegstretchdivotpz_plug = rlegstretchdiv_fs.findPlug("outputZ")
                        rlegscaledivinp1y_plug = rlegscalediv_fs.findPlug("input1Y")
                        rlegscaledivinp2y_plug = rlegscalediv_fs.findPlug("input2Y")
                        rlegscaledivotpy_plug = rlegscalediv_fs.findPlug("outputY")
                        riklegstretchdivinp1_plug = riklegstretchdiv_fs.findPlug("input1")
                        riklegstretchdivotp_plug = riklegstretchdiv_fs.findPlug("output")
                        riklegstretchclust1trans_plug = riklegstretchcluster1_fs.findPlug("translate")
                        riklegstretchclust2trans_plug = riklegstretchcluster2_fs.findPlug("translate")
                        blendsquashinp1r_plug = blendsquash_fs.findPlug("color1R")
                        blendstretchinp1g_plug = blendstretch_fs.findPlug("color1G")
                        blendsquashinp1b_plug = blendsquash_fs.findPlug("color1B")
                        blendsquashotpr_plug = blendsquash_fs.findPlug("outputR")
                        blendstretchotpg_plug = blendstretch_fs.findPlug("outputG")
                        blendsquashotpb_plug = blendsquash_fs.findPlug("outputB")
                        blendstretch_plug = blendstretch_fs.findPlug("blender")
                        blendsquash_plug = blendsquash_fs.findPlug("blender")

                        objparent = om1.MObject()
                        objchild = om1.MObject()
                        for index in range(ikrlowerleg_sl_lst.length()):
                            if index < ikrlowerleg_sl_lst.length()-1:
                                ikrlowerleg_sl_lst.getDependNode(index, objparent)
                                ikrlowerleg_sl_lst.getDependNode(index+1, objchild)
                                rlegparentjnt_fs = om1.MFnDependencyNode(objparent)
                                rlegchildjnt_fs = om1.MFnDependencyNode(objchild)
                                rlegjnt_syplug = rlegparentjnt_fs.findPlug("scaleY")
                                rlegjnt_sxplug = rlegparentjnt_fs.findPlug("scaleX")
                                rlegjnt_szplug = rlegparentjnt_fs.findPlug("scaleZ")
                                rlegjnt_sotpplug = rlegparentjnt_fs.findPlug("scale")
                                rlegjnt_invsplug = rlegchildjnt_fs.findPlug("inverseScale")
                                ikspinedg_modifier.connect(rlegstretchpercentotp_plug, blendstretchinp1g_plug)
                                ikspinedg_modifier.connect(rlegstretchdivotox_plug, blendsquashinp1r_plug)
                                ikspinedg_modifier.connect(rlegstretchdivotpz_plug, blendsquashinp1b_plug)
                                ikspinedg_modifier.connect(blendstretchotpg_plug, rlegjnt_syplug)
                                ikspinedg_modifier.connect(blendsquashotpr_plug, rlegjnt_sxplug)
                                ikspinedg_modifier.connect(blendsquashotpb_plug, rlegjnt_szplug)
                                ikspinedg_modifier.connect(rlegjnt_sotpplug, rlegjnt_invsplug)

                        ikspinedg_modifier.renameNode(rlegcrv_info, "RightLowerLegSpline_Info")
                        ikspinedg_modifier.renameNode(rlegstretchpercent, "RightLowerLegStretch_Percent")
                        ikspinedg_modifier.renameNode(rlegstretchpow, "RightLowerLegStretch_Power")
                        ikspinedg_modifier.renameNode(rlegstretchdiv, "RightLowerLegStretch_Divide")
                        ikspinedg_modifier.renameNode(ikspline_cv, "RightLowerLeg_SplineCvShape")
                        ikspinedg_modifier.renameNode(self.rleg_ik, "RightLowerLeg_Ik")
                        ikspinedg_modifier.renameNode(self.ikrleg_effector, "RightLowerLeg_effector")
                        ikspinedg_modifier.renameNode(rlegscalediv, "IkRightLowerLegGlobalScale_Average")
                        ikspinedg_modifier.renameNode(riklegstretchdiv, "RightLowerLegStretch_Divide2")
                        ikspinedg_modifier.renameNode(blendstretch, "RightLowerLegStretch_Blend")
                        ikspinedg_modifier.renameNode(blendsquash, "RightLowerLegSquash_Blend")
                        ikspinedg_modifier.commandToExecute('parent "RightLowerLeg_Ik" "DoNotTouch"')
                        ikspinedg_modifier.commandToExecute('connectAttr -f RightLowerLeg_SplineCvShape.worldSpace[0] RightLowerLeg_Ik.inCurve')
                        ikspinedg_modifier.commandToExecute('skinCluster -bm 3 -sm 1 -dr 2.0 -name "RightLowerLegIk_skin" IkCvSplineRightLowerLeg0 IkCvSplineRightLowerLeg1 IkCvSplineRightLowerLeg2 RightLowerLeg_SplineCv')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dTwistControlEnable" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpType" 4')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dForwardAxis" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpAxis" 4')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpVectorY" 0')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpVectorEndY" 0')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpVectorZ" -1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLeg_Ik.dWorldUpVectorEndZ" -1')
                        ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineRightLowerLeg0.worldMatrix[0] RightLowerLeg_Ik.dWorldUpMatrix')
                        ikspinedg_modifier.commandToExecute('connectAttr -f IkCvSplineRightLowerLeg2.worldMatrix[0] RightLowerLeg_Ik.dWorldUpMatrixEnd')
                        ikspinedg_modifier.commandToExecute('connectAttr -f RightLowerLeg_SplineCvShape.worldSpace[0] RightLowerLegSpline_Info.inputCurve')
                        ikspinedg_modifier.connect(rlegcrvinfoarc_plug, rlegscaledivinp1y_plug)
                        ikspinedg_modifier.connect(masterctrlsy_plug, rlegscaledivinp2y_plug)
                        ikspinedg_modifier.connect(rlegscaledivotpy_plug, rlegstretchpercentinp1y_plug)
                        ikspinedg_modifier.connect(rlegstretchpercentotp_plug, rlegstretchpowinp1x_plug)
                        ikspinedg_modifier.connect(rlegstretchpercentotp_plug, rlegstretchpowinp1z_plug)
                        ikspinedg_modifier.connect(rlegstretchpowotpx_plug, rlegstretchdivinp2x_plug)
                        ikspinedg_modifier.connect(rlegstretchpowotpz_plug, rlegstretchdivinp2z_plug)
                        ikspinedg_modifier.connect(riklegstretchclust2trans_plug, riklegstretchdivinp1_plug)
                        ikspinedg_modifier.connect(riklegstretchdivotp_plug, riklegstretchclust1trans_plug)
                        ikspinedg_modifier.connect(rlegstretchoption_plug, blendstretch_plug)
                        ikspinedg_modifier.connect(rlegsquashoption_plug, blendsquash_plug)
                        ikspinedg_modifier.commandToExecute('float $rightlowerlegstretchinput1Y = `getAttr "RightLowerLegStretch_Percent.input1Y"`; setAttr "RightLowerLegStretch_Percent.input2Y" $rightlowerlegstretchinput1Y')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Power.input2X" 0.5')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Power.input2Z" 0.5')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide.input1X" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide.input1Z" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Percent.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Power.operation" 3')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "IkRightLowerLegGlobalScale_Average.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide2.operation" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide2.input2X" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide2.input2Y" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Divide2.input2Z" 2')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegSquash_Blend.color2R" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegStretch_Blend.color2G" 1')
                        ikspinedg_modifier.commandToExecute('setAttr "RightLowerLegSquash_Blend.color2B" 1')
                        ikspinedg_modifier.doIt()

                        ikspline_solver = self.IK_System.findSolver("ikSplineSolver")
                        self.IK_Handle.setSolver(ikspline_solver)

                ikcvleg_sl_lst.add("IkCvSplineRightUpperLeg*")
                ikcvleg_sl_lst.add("IkCvSplineRightLowerLeg*")

                ctrl_master_traingle_points2 = [om2.MPoint(box_transform_s[0] / 4, 0.0), om2.MPoint(0.0, 0.0, box_transform_s[0] / 4), om2.MPoint(-box_transform_s[0] / 4, 0.0), om2.MPoint(0.0, 0.0, -box_transform_s[0] / 4), om2.MPoint(box_transform_s[0] / 4, 0.0)]

                for index in range(ikcvleg_sl_lst.length()):
                    ikleg_obj = ikcvleg_sl_lst.getDependNode(index)
                    ikleg_str = ikcvleg_sl_lst.getSelectionStrings(index)
                    if not str(ikleg_str)[3:-3] == "IkCvSplineLeftLowerLeg0" and not str(ikleg_str)[3:-3] == "IkCvSplineRightLowerLeg0":
                        ctrl_traingle_comb_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_master_traingle_points2, 1, 1, False, True, True, ikleg_obj)
                        self.MDG2_mod.renameNode(ctrl_traingle_comb_cv, "{0}_shape".format(str(ikleg_str)[3:-3]))
                        self.MDG2_mod.commandToExecute('color -rgbColor 1 0 0 "{0}"'.format(str(ikleg_str)[3:-3]))

            if cmds.objExists("NoFlipRightLeg_Ik") and cmds.objExists("PVRightLeg_Ik"):

                self.MDG2_mod.commandToExecute('addAttr -longName "follow" -niceName "Follow Body" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                self.MDG2_mod.commandToExecute('parentConstraint -mo -weight 1 Biped_Root_ctrl Biped_IkRightFootRot_null')
                self.MDG2_mod.doIt()

                rlegik_sl_ls = om2.MSelectionList()
                rlegik_sl_ls.add("RightLegIk_grp")
                rlegik_sl_ls.add("Biped_NoFlipRightKnee_null")
                rlegik_sl_ls.add("Biped_IkRightFoot_ctrl")
                rlegik_sl_ls.add("IkRightJointLeg_grp")
                rlegik_sl_ls.add("IkStretchyRightJointLeg_grp")
                rikleggrpobj_fs = om2.MFnDependencyNode(rlegik_sl_ls.getDependNode(0))
                nofliprightkneenullobj_fs = om2.MFnDependencyNode(rlegik_sl_ls.getDependNode(1))
                iklegctrl_fs = om2.MFnDependencyNode(rlegik_sl_ls.getDependNode(2))
                ikrightjointleggrp_fs = om2.MFnDependencyNode(rlegik_sl_ls.getDependNode(3))

                if self.typeofRLegIK.currentIndex() == 1:
                    riklegctrl_multMatrix = self.MDG2_mod.createNode("multMatrix")
                    riklegctrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                    self.MDG2_mod.renameNode(riklegctrl_multMatrix, "IkRightLegCtrl_multMatrix")
                    self.MDG2_mod.renameNode(riklegctrl_decomposeMatrix, "IkRightLegCtrl_decomposeMatrix")

                    riklegmultMatrix_fs = om2.MFnDependencyNode(riklegctrl_multMatrix)
                    riklegdecomposeMatrix_fs = om2.MFnDependencyNode(riklegctrl_decomposeMatrix)

                    riklegmultMatrixSum_plug = riklegmultMatrix_fs.findPlug("matrixSum", False)
                    riklegdecomposeInpMatrix_plug = riklegdecomposeMatrix_fs.findPlug("inputMatrix", False)
                    riklegdecomposeOtpTrans_plug = riklegdecomposeMatrix_fs.findPlug("outputTranslate", False)
                    rikleggrpTrans_plug = rikleggrpobj_fs.findPlug("translate", False)
                    riklegdecomposeOtpRot_plug = riklegdecomposeMatrix_fs.findPlug("outputRotate", False)
                    rikleggrpRot_plug = rikleggrpobj_fs.findPlug("rotate", False)
                    iklegctrlTrans_plug = iklegctrl_fs.findPlug("translate", False)
                    nofliprightkneenullTrans_plug = nofliprightkneenullobj_fs.findPlug("translate", False)
                    iklegctrlRot_plug = iklegctrl_fs.findPlug("rotate", False)
                    nofliprightkneenullRot_plug = nofliprightkneenullobj_fs.findPlug("rotate", False)
                    riklegjntScal_plug = rikleggrpobj_fs.findPlug("scale", False)

                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkRightFoot_ctrl.worldMatrix[0] IkRightLegCtrl_multMatrix.matrixIn[0]')
                    self.MDG2_mod.commandToExecute('parent RightReverseFootHeel RightLegIk_grp')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_NoFlipRightKnee_ctrl NoFlipRightLeg_Ik')
                    self.MDG2_mod.commandToExecute('poleVectorConstraint Biped_PVRightKnee_ctrl PVRightLeg_Ik')
                    self.MDG2_mod.commandToExecute('setAttr "NoFlipRightLeg_Ik.twist" 90')
                    self.MDG2_mod.commandToExecute('connectAttr -force Biped_IkRightFoot_ctrl.follow Biped_IkRightFootRot_null_parentConstraint1.Biped_Root_ctrlW0')
                    self.MDG2_mod.connect(riklegmultMatrixSum_plug, riklegdecomposeInpMatrix_plug)
                    self.MDG2_mod.connect(riklegdecomposeOtpTrans_plug, rikleggrpTrans_plug)
                    self.MDG2_mod.connect(riklegdecomposeOtpRot_plug, rikleggrpRot_plug)
                    self.MDG2_mod.connect(iklegctrlTrans_plug, nofliprightkneenullTrans_plug)
                    self.MDG2_mod.connect(iklegctrlRot_plug, nofliprightkneenullRot_plug)
                    self.MDG2_mod.connect(masterdecomposeOtpScale_plug, riklegjntScal_plug)

                    if self.autostretch.currentIndex() == 1:
                        riklegdistloc = om2.MFnDagNode()

                        rikupperlegdistloc1_tn = riklegdistloc.create("transform", "distloc_R_upleg1", rlegik_sl_ls.getDependNode(4))
                        rikupperlegdistloc_ln = riklegdistloc.create("locator", "R_upleg1_Shape", rikupperlegdistloc1_tn)
                        rikfootlegdistloc1_tn = riklegdistloc.create("transform", "distloc_R_legfoot1")
                        rikfootlegdistloc_ln = riklegdistloc.create("locator", "R_foot1_Shape", rikfootlegdistloc1_tn)
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "IkRightLegDistance_Info"')
                        self.MDG2_mod.doIt()

                        ruplegnull_transform_t = ruplegnull_transform.translation(om2.MSpace.kTransform)
                        rikupperlegdistloc_transform = om2.MFnTransform(rikupperlegdistloc1_tn)
                        rikupperlegdistloc_transform.setTranslation(ruplegnull_transform_t, om2.MSpace.kTransform)

                        IkRightLegDistance_sl_ls = om2.MSelectionList()
                        IkRightLegDistance_sl_ls.add("IkRightLegDistance_InfoShape")

                        rikfootlegDist_fs = om2.MFnDependencyNode(rikfootlegdistloc1_tn)
                        riklegjntDist_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(0))

                        riklegjntDistPoint2_plug = riklegjntDist_fs.findPlug("endPoint", False)
                        rikfootlegDistOtpTrans_plug = rikfootlegDist_fs.findPlug("translate", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force R_upleg1_Shape.worldPosition[0] IkRightLegDistance_InfoShape.startPoint')
                        self.MDG2_mod.connect(rikfootlegDistOtpTrans_plug, riklegjntDistPoint2_plug)
                        self.MDG2_mod.connect(riklegdecomposeOtpTrans_plug, rikfootlegDistOtpTrans_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikrightlegtranslateY = `getAttr "IkNoFlipRightLeg.translateY"`; float $noflipikrightfoottranslateY = `getAttr "IkNoFlipRightFoot.translateY"`; float $totalnoflipikrightlegtranslateY = $noflipikrightlegtranslateY + $noflipikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue $totalnoflipikrightlegtranslateY -attribute "translateY" -value $noflipikrightlegtranslateY IkNoFlipRightLeg;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightlegtranslateY = `getAttr "IkNoFlipRightLeg.translateY"`; float $noflipikrightfoottranslateY = `getAttr "IkNoFlipRightFoot.translateY"`; float $totalnoflipikrightlegtranslateY = $noflipikrightlegtranslateY + $noflipikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue ($totalnoflipikrightlegtranslateY*2) -attribute "translateY" -value ($noflipikrightlegtranslateY*2) IkNoFlipRightLeg;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightlegtranslateY = `getAttr "IkNoFlipRightLeg.translateY"`; float $noflipikrightfoottranslateY = `getAttr "IkNoFlipRightFoot.translateY"`; float $totalnoflipikrightlegtranslateY = $noflipikrightlegtranslateY + $noflipikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue $totalnoflipikrightlegtranslateY -attribute "translateY" -value $noflipikrightfoottranslateY IkNoFlipRightFoot;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightlegtranslateY = `getAttr "IkNoFlipRightLeg.translateY"`; float $noflipikrightfoottranslateY = `getAttr "IkNoFlipRightFoot.translateY"`; float $totalnoflipikrightlegtranslateY = $noflipikrightlegtranslateY + $noflipikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue ($totalnoflipikrightlegtranslateY*2) -attribute "translateY" -value ($noflipikrightfoottranslateY*2) IkNoFlipRightFoot;')
                        self.MDG2_mod.commandToExecute('float $pvikrightlegtranslateY = `getAttr "IkPVRightLeg.translateY"`; float $pvikrightfoottranslateY = `getAttr "IkPVRightFoot.translateY"`; float $totalpvikrightlegtranslateY = $pvikrightlegtranslateY + $pvikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue $totalpvikrightlegtranslateY -attribute "translateY" -value $pvikrightlegtranslateY IkPVRightLeg;')
                        self.MDG2_mod.commandToExecute('float $pvikrightlegtranslateY = `getAttr "IkPVRightLeg.translateY"`; float $pvikrightfoottranslateY = `getAttr "IkPVRightFoot.translateY"`; float $totalpvikrightlegtranslateY = $pvikrightlegtranslateY + $pvikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue ($totalpvikrightlegtranslateY*2) -attribute "translateY" -value ($pvikrightlegtranslateY*2) IkPVRightLeg;')
                        self.MDG2_mod.commandToExecute('float $pvikrightlegtranslateY = `getAttr "IkPVRightLeg.translateY"`; float $pvikrightfoottranslateY = `getAttr "IkPVRightFoot.translateY"`; float $totalpvikrightlegtranslateY = $pvikrightlegtranslateY + $pvikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue $totalpvikrightlegtranslateY -attribute "translateY" -value $pvikrightfoottranslateY IkPVRightFoot;')
                        self.MDG2_mod.commandToExecute('float $pvikrightlegtranslateY = `getAttr "IkPVRightLeg.translateY"`; float $pvikrightfoottranslateY = `getAttr "IkPVRightFoot.translateY"`; float $totalpvikrightlegtranslateY = $pvikrightlegtranslateY + $pvikrightfoottranslateY; setDrivenKeyframe -currentDriver IkRightLegDistance_InfoShape.distance -driverValue ($totalpvikrightlegtranslateY*2) -attribute "translateY" -value ($pvikrightfoottranslateY*2) IkPVRightFoot;')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipRightLeg; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVRightLeg; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkNoFlipRightFoot; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('selectKey -attribute translateY IkPVRightFoot; keyTangent -inTangentType linear -outTangentType linear; setInfinity -postInfinite cycleRelative')
                        self.MDG2_mod.commandToExecute('parent "IkRightLegDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_legfoot1" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "kneesnap" -niceName "Knee Snap" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_PVRightKnee_ctrl')

                        rikupperlegdistloc2_tn = riklegdistloc.create("transform", "distloc_R_upleg2", rlegik_sl_ls.getDependNode(4))
                        rikupperlegdistloc_ln = riklegdistloc.create("locator", "R_upleg2_Shape", rikupperlegdistloc2_tn)
                        rikkneedistloc_tn = riklegdistloc.create("transform", "distloc_R_legknee")
                        rikkneedistloc_ln = riklegdistloc.create("locator", "R_legknee_Shape", rikkneedistloc_tn)
                        rikfootlegdistloc2_tn = riklegdistloc.create("transform", "distloc_R_legfoot2")
                        rikfootlegdistloc_ln = riklegdistloc.create("locator", "R_legfoot2_Shape", rikfootlegdistloc2_tn)
                        pvrightkneectrl_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                        rikpvuppertransblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvlowertransblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvupperlegstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        rikpvlowerlegstretchblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.commandToExecute('createNode "distanceDimShape"')
                        self.MDG2_mod.renameNode(pvrightkneectrl_decomposeMatrix, "PVRightKnee_decomposeMatrix")
                        self.MDG2_mod.renameNode(rikpvuppertransblendnode, "PVRightUpperLegTrans_blend")
                        self.MDG2_mod.renameNode(rikpvlowertransblendnode, "PVRightLowerLegTrans_blend")
                        self.MDG2_mod.renameNode(rikpvupperlegstretchblendnode, "PVRightUpperLegStretch_blend")
                        self.MDG2_mod.renameNode(rikpvlowerlegstretchblendnode, "PVRightLowerLegStretch_blend")
                        self.MDG2_mod.commandToExecute('rename "distanceDimension1" "RightUpperLegDistance_Info"')
                        self.MDG2_mod.commandToExecute('rename "distanceDimension2" "RightLowerLegDistance_Info"')
                        self.MDG2_mod.doIt()

                        rikupperlegdistloc2_transform = om2.MFnTransform(rikupperlegdistloc2_tn)
                        rikupperlegdistloc2_transform.setTranslation(ruplegnull_transform_t, om2.MSpace.kTransform)

                        IkRightLegDistance_sl_ls.add("RightUpperLegDistance_InfoShape")
                        IkRightLegDistance_sl_ls.add("RightLowerLegDistance_InfoShape")
                        IkRightLegDistance_sl_ls.add("IkPVRightLeg_translateY")
                        IkRightLegDistance_sl_ls.add("IkPVRightFoot_translateY")
                        IkRightLegDistance_sl_ls.add("Biped_PVRightKnee_ctrl")
                        IkRightLegDistance_sl_ls.add("IkNoFlipRightLeg_translateY")
                        IkRightLegDistance_sl_ls.add("IkNoFlipRightFoot_translateY")

                        rikkneeDist_fs = om2.MFnDependencyNode(rikkneedistloc_tn)
                        rikfootlegDist_fs = om2.MFnDependencyNode(rikfootlegdistloc2_tn)
                        rikupperlegjntDist_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(1))
                        riklowerlegjntDist_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(2))
                        pvrightkneekey_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(3))
                        pvrightfootkey_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(4))
                        pvrightkneectrlDecomposeMatrix_fs = om2.MFnDependencyNode(pvrightkneectrl_decomposeMatrix)
                        rikpvuppertransblendnode_fs = om2.MFnDependencyNode(rikpvuppertransblendnode)
                        rikpvlowertransblendnode_fs = om2.MFnDependencyNode(rikpvlowertransblendnode)
                        pvrightkneectrl_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(5))
                        pvrightkneejnt_fs = om2.MFnDependencyNode(pvikrleg_sl_ls.getDependNode(1))
                        pvrightfootjnt_fs = om2.MFnDependencyNode(pvikrleg_sl_ls.getDependNode(2))
                        rikupperlegstretchblendnode_fs = om2.MFnDependencyNode(rikpvupperlegstretchblendnode)
                        riklowerlegstretchblendnode_fs = om2.MFnDependencyNode(rikpvlowerlegstretchblendnode)
                        rightlegoption_fs = om2.MFnDependencyNode(rlegoptions_obj)

                        rikupperlegjntDistPoint2_plug = rikupperlegjntDist_fs.findPlug("endPoint", False)
                        riklowerlegjntDistPoint1_plug = riklowerlegjntDist_fs.findPlug("startPoint", False)
                        riklowerlegjntDistPoint2_plug = riklowerlegjntDist_fs.findPlug("endPoint", False)
                        rikkneeDistOtpTrans_plug = rikkneeDist_fs.findPlug("translate", False)
                        rikfootlegDistOtpTrans_plug = rikfootlegDist_fs.findPlug("translate", False)
                        pvrightkneectrlDecomposeMatrixOtpTrans_plug = pvrightkneectrlDecomposeMatrix_fs.findPlug("outputTranslate", False)
                        pvrightkneekeyotp_plug = pvrightkneekey_fs.findPlug("output", False)
                        pvrightfootkeyotp_plug = pvrightfootkey_fs.findPlug("output", False)
                        rikpvuppertransblendnodeinp1g_plug = rikpvuppertransblendnode_fs.findPlug("color1G", False)
                        rikpvuppertransblendnodeinp2g_plug = rikpvuppertransblendnode_fs.findPlug("color2G", False)
                        rikpvuppertransblendnodeotp_plug = rikpvuppertransblendnode_fs.findPlug("outputG", False)
                        rikpvuppertransblendnodeblender_plug = rikpvuppertransblendnode_fs.findPlug("blender", False)
                        rikpvlowertransblendnodeinp1g_plug = rikpvlowertransblendnode_fs.findPlug("color1G", False)
                        rikpvlowertransblendnodeinp2g_plug = rikpvlowertransblendnode_fs.findPlug("color2G", False)
                        rikpvlowertransblendnodeotp_plug = rikpvlowertransblendnode_fs.findPlug("outputG", False)
                        rikpvlowertransblendnodeblender_plug = rikpvlowertransblendnode_fs.findPlug("blender", False)
                        pvrightkneectrl_fs_plug = pvrightkneectrl_fs.findPlug("kneesnap", False)
                        rikpvupperlegstretchblendnodeinp1g_plug = rikupperlegstretchblendnode_fs.findPlug("color1G", False)
                        rikpvupperlegstretchblendnodeotp_plug = rikupperlegstretchblendnode_fs.findPlug("outputG", False)
                        rikpvupperlegstretchblendnodeblender_plug = rikupperlegstretchblendnode_fs.findPlug("blender", False)
                        rikpvlowerlegstretchblendnodeinp1g_plug = riklowerlegstretchblendnode_fs.findPlug("color1G", False)
                        rikpvlowerlegstretchblendnodeotp_plug = riklowerlegstretchblendnode_fs.findPlug("outputG", False)
                        rikpvlowerlegstretchblendnodeblender_plug = riklowerlegstretchblendnode_fs.findPlug("blender", False)
                        ikrightlegstretch_plug = rightlegoption_fs.findPlug("stretchable", False)
                        pvrightkneejntTrans_plug = pvrightkneejnt_fs.findPlug("translateY", False)
                        pvrightfootjntTrans_plug = pvrightfootjnt_fs.findPlug("translateY", False)

                        self.MDG2_mod.commandToExecute('connectAttr -force R_upleg2_Shape.worldPosition[0] RightUpperLegDistance_InfoShape.startPoint')
                        self.MDG2_mod.commandToExecute('connectAttr -force Biped_PVRightKnee_ctrl.worldMatrix[0] PVRightKnee_decomposeMatrix.inputMatrix')
                        self.MDG2_mod.connect(rikkneeDistOtpTrans_plug, rikupperlegjntDistPoint2_plug)
                        self.MDG2_mod.connect(rikkneeDistOtpTrans_plug, riklowerlegjntDistPoint1_plug)
                        self.MDG2_mod.connect(rikfootlegDistOtpTrans_plug, riklowerlegjntDistPoint2_plug)
                        self.MDG2_mod.connect(riklegdecomposeOtpTrans_plug, rikfootlegDistOtpTrans_plug)
                        self.MDG2_mod.connect(pvrightkneectrlDecomposeMatrixOtpTrans_plug, rikkneeDistOtpTrans_plug)

                        self.MDG2_mod.disconnect(pvrightkneekeyotp_plug, pvrightkneejntTrans_plug)
                        self.MDG2_mod.disconnect(pvrightfootkeyotp_plug, pvrightfootjntTrans_plug)
                        self.MDG2_mod.connect(pvrightkneekeyotp_plug, rikpvuppertransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvrightfootkeyotp_plug, rikpvlowertransblendnodeinp2g_plug)
                        self.MDG2_mod.connect(pvrightkneectrl_fs_plug, rikpvuppertransblendnodeblender_plug)
                        self.MDG2_mod.connect(pvrightkneectrl_fs_plug, rikpvlowertransblendnodeblender_plug)
                        self.MDG2_mod.connect(rikpvuppertransblendnodeotp_plug, rikpvupperlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikpvlowertransblendnodeotp_plug, rikpvlowerlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(rikpvupperlegstretchblendnodeotp_plug, pvrightkneejntTrans_plug)
                        self.MDG2_mod.connect(rikpvlowerlegstretchblendnodeotp_plug, pvrightfootjntTrans_plug)
                        self.MDG2_mod.connect(ikrightlegstretch_plug, rikpvupperlegstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikrightlegstretch_plug, rikpvlowerlegstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $pvikrightlegtranslateY = `getAttr "PVRightUpperLegStretch_blend.color1G"`; setAttr "PVRightUpperLegStretch_blend.color2G" $pvikrightlegtranslateY;')
                        self.MDG2_mod.commandToExecute('float $pvikrightfoottranslateY = `getAttr "PVRightLowerLegStretch_blend.color1G"`; setAttr "PVRightLowerLegStretch_blend.color2G" $pvikrightfoottranslateY;')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_legknee" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "distloc_R_legfoot2" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "RightUpperLegDistance_Info" "DoNotTouch"')
                        self.MDG2_mod.commandToExecute('parent "RightLowerLegDistance_Info" "DoNotTouch"')

                        self.MDG2_mod.commandToExecute('addAttr -longName "thighlength" -niceName "AutoKnee Thigh Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkRightFoot_ctrl')
                        self.MDG2_mod.commandToExecute('addAttr -longName "calflength" -niceName "AutoKnee Calf Length" -attributeType double -minValue 0 -keyable true -defaultValue 1 Biped_IkRightFoot_ctrl')
                        self.MDG2_mod.doIt()

                        rikautokneeupperlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        rikautokneelowerlegnode = self.MDG2_mod.createNode("multiplyDivide")
                        riknoflipupperlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        riknofliplowerlegtransblendnode = self.MDG2_mod.createNode("blendColors")
                        self.MDG2_mod.renameNode(rikautokneeupperlegnode, "NoFlipRightLegTrans_multiply")
                        self.MDG2_mod.renameNode(rikautokneelowerlegnode, "NoFlipRightFootTrans_multiply")
                        self.MDG2_mod.renameNode(riknoflipupperlegtransblendnode, "NoFlipRightUpperLegStretch_blend")
                        self.MDG2_mod.renameNode(riknofliplowerlegtransblendnode, "NoFlipRightLowerLegStretch_blend")

                        rikautokneeupperleg_fs = om2.MFnDependencyNode(rikautokneeupperlegnode)
                        rikautokneelowerleg_fs = om2.MFnDependencyNode(rikautokneelowerlegnode)
                        nofliprightkneekey_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(6))
                        nofliprightfootkey_fs = om2.MFnDependencyNode(IkRightLegDistance_sl_ls.getDependNode(7))
                        nofliprightkneejntTrans_fs = om2.MFnDependencyNode(noflipikrleg_sl_ls.getDependNode(1))
                        nofliprightfootjntTrans_fs = om2.MFnDependencyNode(noflipikrleg_sl_ls.getDependNode(2))
                        riknoflipupperlegstretchblendnode_fs = om2.MFnDependencyNode(riknoflipupperlegtransblendnode)
                        riknofliplowerlegstretchblendnode_fs = om2.MFnDependencyNode(riknofliplowerlegtransblendnode)

                        ikautoelbowupperarmInp1Y_plug = rikautokneeupperleg_fs.findPlug("input1Y", False)
                        ikautoelbowupperarmInp2Y_plug = rikautokneeupperleg_fs.findPlug("input2Y", False)
                        likautoelbowupperarmOtp_plug = rikautokneeupperleg_fs.findPlug("outputY", False)
                        ikautoelbowlowerarmInp1Y_plug = rikautokneelowerleg_fs.findPlug("input1Y", False)
                        ikautoelbowlowerarmInp2Y_plug = rikautokneelowerleg_fs.findPlug("input2Y", False)
                        likautoelbowlowerarmOtp_plug = rikautokneelowerleg_fs.findPlug("outputY", False)
                        nofliprightkneekeyotp_plug = nofliprightkneekey_fs.findPlug("output", False)
                        nofliprightfootkeyotp_plug = nofliprightfootkey_fs.findPlug("output", False)
                        nofliprightkneejnttty_plug = nofliprightkneejntTrans_fs.findPlug("translateY", False)
                        nofliprightfootjntty_plug = nofliprightfootjntTrans_fs.findPlug("translateY", False)
                        iklegctrrkneeupperleg_plug = iklegctrl_fs.findPlug("thighlength", False)
                        iklegctrrkneelowerleg_plug = iklegctrl_fs.findPlug("calflength", False)
                        riknoflipupperlegstretchblendnodeinp1g_plug = riknoflipupperlegstretchblendnode_fs.findPlug("color1G", False)
                        riknoflipupperlegstretchblendnodeotp_plug = riknoflipupperlegstretchblendnode_fs.findPlug("outputG", False)
                        riknoflipupperlegstretchblendnodeblender_plug = riknoflipupperlegstretchblendnode_fs.findPlug("blender", False)
                        riknofliplowerlegstretchblendnodeinp1g_plug = riknofliplowerlegstretchblendnode_fs.findPlug("color1G", False)
                        riknofliplowerlegstretchblendnodeotp_plug = riknofliplowerlegstretchblendnode_fs.findPlug("outputG", False)
                        riknofliplowerlegstretchblendnodeblender_plug = riknofliplowerlegstretchblendnode_fs.findPlug("blender", False)

                        self.MDG2_mod.disconnect(nofliprightkneekeyotp_plug, nofliprightkneejnttty_plug)
                        self.MDG2_mod.disconnect(nofliprightfootkeyotp_plug, nofliprightfootjntty_plug)
                        self.MDG2_mod.connect(iklegctrrkneeupperleg_plug, ikautoelbowupperarmInp1Y_plug)
                        self.MDG2_mod.connect(nofliprightkneekeyotp_plug, ikautoelbowupperarmInp2Y_plug)
                        self.MDG2_mod.connect(iklegctrrkneelowerleg_plug, ikautoelbowlowerarmInp1Y_plug)
                        self.MDG2_mod.connect(nofliprightfootkeyotp_plug, ikautoelbowlowerarmInp2Y_plug)
                        self.MDG2_mod.connect(likautoelbowupperarmOtp_plug, riknoflipupperlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(likautoelbowlowerarmOtp_plug, riknofliplowerlegstretchblendnodeinp1g_plug)
                        self.MDG2_mod.connect(riknoflipupperlegstretchblendnodeotp_plug, nofliprightkneejnttty_plug)
                        self.MDG2_mod.connect(riknofliplowerlegstretchblendnodeotp_plug, nofliprightfootjntty_plug)
                        self.MDG2_mod.connect(ikrightlegstretch_plug, riknoflipupperlegstretchblendnodeblender_plug)
                        self.MDG2_mod.connect(ikrightlegstretch_plug, riknofliplowerlegstretchblendnodeblender_plug)
                        self.MDG2_mod.commandToExecute('float $noflipikrightlegtranslateY = `getAttr "NoFlipRightUpperLegStretch_blend.color1G"`; setAttr "NoFlipRightUpperLegStretch_blend.color2G" $noflipikrightlegtranslateY;')
                        self.MDG2_mod.commandToExecute('float $noflipikrightfoottranslateY = `getAttr "NoFlipRightLowerLegStretch_blend.color1G"`; setAttr "NoFlipRightLowerLegStretch_blend.color2G" $noflipikrightfoottranslateY;')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipRightLegTrans_multiply.operation" 1')
                        self.MDG2_mod.commandToExecute('setAttr "NoFlipRightFootTrans_multiply.operation" 1')

                        rightlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprightlegglobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        nofliprigthfootlobalscalenode = self.MDG2_mod.createNode("multiplyDivide")
                        self.MDG2_mod.renameNode(rightlegglobalscalenode, "IKRightLegGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprightlegglobalscalenode, "IKNoFlipRightLegGlobalScale_Average")
                        self.MDG2_mod.renameNode(nofliprigthfootlobalscalenode, "IKNoFlipRightFootGlobalScale_Average")

                        rightlegglobalscale_fs = om2.MFnDependencyNode(rightlegglobalscalenode)
                        nofliprightlegglobalscale_fs = om2.MFnDependencyNode(nofliprightlegglobalscalenode)
                        nofliprightfootlobalscale_fs = om2.MFnDependencyNode(nofliprigthfootlobalscalenode)
                        masterlctrl_fs = om2.MFnDependencyNode(obj_masterctrl2)

                        rikupperlegjntDist_plug = rikupperlegjntDist_fs.findPlug("distance", False)
                        riklowerlegjntDist_plug = riklowerlegjntDist_fs.findPlug("distance", False)
                        riklegjntDist_plug = riklegjntDist_fs.findPlug("distance", False)
                        masterlctrlsy_plug = masterlctrl_fs.findPlug("scaleY", False)
                        rightlegglobalscaleInp1Y_plug = rightlegglobalscale_fs.findPlug("input1Y", False)
                        rightlegglobalscaleInp2Y_plug = rightlegglobalscale_fs.findPlug("input2Y", False)
                        rigthlegglobalscaleOtpY_plug = rightlegglobalscale_fs.findPlug("outputY", False)
                        nofliprightlegglobalscaleInp1Y_plug = nofliprightlegglobalscale_fs.findPlug("input1Y", False)
                        nofliprightlegglobalscaleInp2Y_plug = nofliprightlegglobalscale_fs.findPlug("input2Y", False)
                        nofliprightlegglobalscaleOtpY_plug = nofliprightlegglobalscale_fs.findPlug("outputY", False)
                        nofliprightfootlobalscaleInp1Y_plug = nofliprightfootlobalscale_fs.findPlug("input1Y", False)
                        nofliprightfootlobalscaleInp2Y_plug = nofliprightfootlobalscale_fs.findPlug("input2Y", False)
                        nofliprightfootlobalscaleOtpY_plug = nofliprightfootlobalscale_fs.findPlug("outputY", False)
                        nofliprightkneekeyinp_plug = nofliprightkneekey_fs.findPlug("input", False)
                        nofliprightfootkeyinp_plug = nofliprightfootkey_fs.findPlug("input", False)
                        pvrightkneekeyinp_plug = pvrightkneekey_fs.findPlug("input", False)
                        pvrightfootkeyinp_plug = pvrightfootkey_fs.findPlug("input", False)
                        ikrightjointleggrps_plug = ikrightjointleggrp_fs.findPlug("scale", False)

                        self.MDG2_mod.disconnect(riklegjntDist_plug, nofliprightkneekeyinp_plug)
                        self.MDG2_mod.disconnect(riklegjntDist_plug, nofliprightfootkeyinp_plug)
                        self.MDG2_mod.disconnect(riklegjntDist_plug, pvrightkneekeyinp_plug)
                        self.MDG2_mod.disconnect(riklegjntDist_plug, pvrightfootkeyinp_plug)
                        self.MDG2_mod.connect(riklowerlegjntDist_plug, nofliprightfootlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(rikupperlegjntDist_plug, nofliprightlegglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(riklowerlegjntDist_plug, nofliprightfootlobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, nofliprightlegglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, nofliprightfootlobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(nofliprightlegglobalscaleOtpY_plug, rikpvuppertransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(nofliprightfootlobalscaleOtpY_plug, rikpvlowertransblendnodeinp1g_plug)
                        self.MDG2_mod.connect(riklegjntDist_plug, rightlegglobalscaleInp1Y_plug)
                        self.MDG2_mod.connect(masterlctrlsy_plug, rightlegglobalscaleInp2Y_plug)
                        self.MDG2_mod.connect(rigthlegglobalscaleOtpY_plug, nofliprightkneekeyinp_plug)
                        self.MDG2_mod.connect(rigthlegglobalscaleOtpY_plug, nofliprightfootkeyinp_plug)
                        self.MDG2_mod.connect(rigthlegglobalscaleOtpY_plug, pvrightkneekeyinp_plug)
                        self.MDG2_mod.connect(rigthlegglobalscaleOtpY_plug, pvrightfootkeyinp_plug)
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipRightLegGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKNoFlipRightFootGlobalScale_Average.operation" 2')
                        self.MDG2_mod.commandToExecute('setAttr "IKRightLegGlobalScale_Average.operation" 2')
                        self.MDG2_mod.connect(masterdecomposeOtpScale_plug, ikrightjointleggrps_plug)

                    # else:
                    #     self.MDG2_mod.commandToExecute('delete "IkStretchyRightJointLeg_grp"')
                    #     self.MDG2_mod.commandToExecute('delete "RightLegIkCluster_grp"')

                    self.MDG2_mod.commandToExecute('addAttr -longName "footrollswitch" -niceName "Auto/Manual Foot Roll" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_RightFootOptions_ctrl')

                    self.MDG2_mod.commandToExecute('addAttr -longName "autoroll" -niceName "Auto Roll" -attributeType "enum" -en "__________:" -keyable true Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "roll" -niceName "Roll" -attributeType double -minValue -90 -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "bendlimitangle" -niceName "Bend Limit Angle" -attributeType double -keyable true -defaultValue 45 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toestraightangle" -niceName "Toe Straight Angle" -attributeType double -keyable true -defaultValue 70 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "manualroll" -niceName "Manual Roll" -attributeType "enum" -en "__________:" -keyable true Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "heelroll" -niceName "Heel Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.doIt()

                    rikheelclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(rikheelclampnode, "RightHeel_rotclamp")
                    rikheelblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(rikheelblendernode, "RightHeel_blend")
                    leg_reverse_sl_ls = om2.MSelectionList()
                    leg_reverse_sl_ls.add("RightReverseFootHeel")
                    reverse_heel_obj = leg_reverse_sl_ls.getDependNode(0)

                    rikheelclamp_fs = om2.MFnDependencyNode(rikheelclampnode)
                    rikheelblender_fs = om2.MFnDependencyNode(rikheelblendernode)
                    reverseheel_fs = om2.MFnDependencyNode(reverse_heel_obj)

                    rlegoptionsfootrollswitch_plug = rlegoptions_fs.findPlug("footrollswitch", False)
                    rikheelblender_plug = rikheelblender_fs.findPlug("blender", False)
                    iklegctrlRoll_plug = iklegctrl_fs.findPlug("roll", False)
                    rikheelclampInpR_plug = rikheelclamp_fs.findPlug("inputR", False)
                    rikheelclampOtpR_plug = rikheelclamp_fs.findPlug("outputR", False)
                    rikheelblendCol2R_plug = rikheelblender_fs.findPlug("color2R", False)
                    iklegctrlHeelRoll_plug = iklegctrl_fs.findPlug("heelroll", False)
                    rikheelblendCol1R_plug = rikheelblender_fs.findPlug("color1R", False)
                    rikheelblendOtpR_plug = rikheelblender_fs.findPlug("outputR", False)
                    rikheelclampInpX_plug = reverseheel_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(rlegoptionsfootrollswitch_plug, rikheelblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, rikheelclampInpR_plug)
                    self.MDG2_mod.connect(rikheelclampOtpR_plug, rikheelblendCol2R_plug)
                    self.MDG2_mod.connect(iklegctrlHeelRoll_plug, rikheelblendCol1R_plug)
                    self.MDG2_mod.connect(rikheelblendOtpR_plug, rikheelclampInpX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "RightHeel_rotclamp.minR" -90')

                    self.MDG2_mod.commandToExecute('addAttr -longName "footroll" -niceName "Foot Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.doIt()

                    rikballclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(rikballclampnode, "RightBall_rotclamp")
                    rikballrangenode = self.MDG2_mod.createNode("setRange")
                    self.MDG2_mod.renameNode(rikballrangenode, "RightBall_range")
                    rikballblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(rikballblendernode, "RightBall_blend")
                    rikballminusnode = self.MDG2_mod.createNode("plusMinusAverage")
                    self.MDG2_mod.renameNode(rikballminusnode, "RightBall_minus")
                    rikballmultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(rikballmultnode, "RightBall_percetmult")
                    rikballrollmultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(rikballrollmultnode, "RightBall_rollmult")
                    leg_reverse_sl_ls.add("RightReverseFootToe")
                    reverse_toe_obj = leg_reverse_sl_ls.getDependNode(1)

                    rikballclamp_fs = om2.MFnDependencyNode(rikballclampnode)
                    rikballrange_fs = om2.MFnDependencyNode(rikballrangenode)
                    rikballsub_fs = om2.MFnDependencyNode(rikballminusnode)
                    rikballmult_fs = om2.MFnDependencyNode(rikballmultnode)
                    rikballrollmult_fs = om2.MFnDependencyNode(rikballrollmultnode)
                    rikballblender_fs = om2.MFnDependencyNode(rikballblendernode)
                    reversetoe_fs = om2.MFnDependencyNode(reverse_toe_obj)

                    rikballblender_plug = rikballblender_fs.findPlug("blender", False)
                    rikballclampInpR_plug = rikballclamp_fs.findPlug("inputR", False)
                    rikballclampMinR_plug = rikballclamp_fs.findPlug("minR", False)
                    iklegctrlBendLimit_plug = iklegctrl_fs.findPlug("bendlimitangle", False)
                    rikballclampMaxR_plug = rikballclamp_fs.findPlug("maxR", False)
                    rikballrangeValueX_plug = rikballrange_fs.findPlug("valueX", False)
                    rikballrangeOldMinX_plug = rikballrange_fs.findPlug("oldMinX", False)
                    rikballrangeOldMaxX_plug = rikballrange_fs.findPlug("oldMaxX", False)
                    rikballrangeOutValueX_plug = rikballrange_fs.findPlug("outValueX", False)
                    rikballmultInp1X_plug = rikballmult_fs.findPlug("input1X", False)
                    rikballmultInp2X_plug = rikballmult_fs.findPlug("input2X", False)
                    rikballmultOtpX_plug = rikballmult_fs.findPlug("outputX", False)
                    rikballsubOtp1D_plug = rikballsub_fs.findPlug("output1D", False)
                    rikballrollmultInp1X_plug = rikballrollmult_fs.findPlug("input1X", False)
                    rikballrollmultInp2X_plug = rikballrollmult_fs.findPlug("input2X", False)
                    rikballrollmultOtpX_plug = rikballrollmult_fs.findPlug("outputX", False)
                    rikballblendCol2R_plug = rikballblender_fs.findPlug("color2R", False)
                    iklegctrlBallRoll_plug = iklegctrl_fs.findPlug("footroll", False)
                    rikballblendCol1R_plug = rikballblender_fs.findPlug("color1R", False)
                    rikballblendOtpR_plug = rikballblender_fs.findPlug("outputR", False)
                    rikballclampRotX_plug = reversetoe_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(rlegoptionsfootrollswitch_plug, rikballblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, rikballclampInpR_plug)
                    self.MDG2_mod.connect(iklegctrlBendLimit_plug, rikballclampMaxR_plug)
                    self.MDG2_mod.connect(rikballclampInpR_plug, rikballrangeValueX_plug)
                    self.MDG2_mod.connect(rikballclampMinR_plug, rikballrangeOldMinX_plug)
                    self.MDG2_mod.connect(rikballclampMaxR_plug, rikballrangeOldMaxX_plug)
                    self.MDG2_mod.connect(rikballrangeOutValueX_plug, rikballmultInp1X_plug)
                    self.MDG2_mod.connect(rikballsubOtp1D_plug, rikballmultInp2X_plug)
                    self.MDG2_mod.connect(rikballmultOtpX_plug, rikballrollmultInp1X_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, rikballrollmultInp2X_plug)
                    self.MDG2_mod.connect(rikballrollmultOtpX_plug, rikballblendCol2R_plug)
                    self.MDG2_mod.connect(iklegctrlBallRoll_plug, rikballblendCol1R_plug)
                    self.MDG2_mod.connect(rikballblendOtpR_plug, rikballclampRotX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_range.minX" 0')
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_range.maxX" 1')
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_minus.input1D[0]" 1')
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_minus.operation" 2')
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_percetmult.operation" 1')
                    self.MDG2_mod.commandToExecute('setAttr "RightBall_rollmult.operation" 1')

                    self.MDG2_mod.commandToExecute('addAttr -longName "toeroll" -niceName "Toe Roll" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.doIt()

                    riktoeclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(riktoeclampnode, "RightToe_rotclamp")
                    riktoeblendernode = self.MDG2_mod.createNode("blendColors")
                    self.MDG2_mod.renameNode(riktoeblendernode, "RightToe_blend")
                    riktoerangernode = self.MDG2_mod.createNode("setRange")
                    self.MDG2_mod.renameNode(riktoerangernode, "RightToe_range")
                    riktoemultnode = self.MDG2_mod.createNode("multiplyDivide")
                    self.MDG2_mod.renameNode(riktoemultnode, "RightToe_percetmultiply")
                    leg_reverse_sl_ls.add("RightReverseFootToeEnd")
                    reverse_toeend_obj = leg_reverse_sl_ls.getDependNode(2)

                    riktoeclamp_fs = om2.MFnDependencyNode(riktoeclampnode)
                    riktoerange_fs = om2.MFnDependencyNode(riktoerangernode)
                    riktoemult_fs = om2.MFnDependencyNode(riktoemultnode)
                    riktoeblender_fs = om2.MFnDependencyNode(riktoeblendernode)
                    reversetoeend_fs = om2.MFnDependencyNode(reverse_toeend_obj)

                    riktoeblender_plug = riktoeblender_fs.findPlug("blender", False)
                    iklegctrlStraightLimit_plug = iklegctrl_fs.findPlug("toestraightangle", False)
                    riktoeclampInpR_plug = riktoeclamp_fs.findPlug("inputR", False)
                    riktoeclampMinR_plug = riktoeclamp_fs.findPlug("minR", False)
                    riktoeclampMaxR_plug = riktoeclamp_fs.findPlug("maxR", False)
                    riktoerangeValueX_plug = riktoerange_fs.findPlug("valueX", False)
                    riktoerangeOldMinX_plug = riktoerange_fs.findPlug("oldMinX", False)
                    riktoerangeOldMaxX_plug = riktoerange_fs.findPlug("oldMaxX", False)
                    riktoerangeoOutValX_plug = riktoerange_fs.findPlug("outValueX", False)
                    riktoemultInp1X_plug = riktoemult_fs.findPlug("input1X", False)
                    riktoemultInp2X_plug = riktoemult_fs.findPlug("input2X", False)
                    riktoemultOtpX_plug = riktoemult_fs.findPlug("outputX", False)
                    riktoeblendCol2R_plug = riktoeblender_fs.findPlug("color2R", False)
                    iklegctrlToeRoll_plug = iklegctrl_fs.findPlug("toeroll", False)
                    riktoeblendCol1R_plug = riktoeblender_fs.findPlug("color1R", False)
                    riktoeblendOtpR_plug = riktoeblender_fs.findPlug("outputR", False)
                    riktoeclampRotX_plug = reversetoeend_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(rlegoptionsfootrollswitch_plug, riktoeblender_plug)
                    self.MDG2_mod.connect(iklegctrlRoll_plug, riktoeclampInpR_plug)
                    self.MDG2_mod.connect(iklegctrlBendLimit_plug, riktoeclampMinR_plug)
                    self.MDG2_mod.connect(iklegctrlStraightLimit_plug, riktoeclampMaxR_plug)
                    self.MDG2_mod.connect(riktoeclampInpR_plug, riktoerangeValueX_plug)
                    self.MDG2_mod.connect(riktoeclampMinR_plug, riktoerangeOldMinX_plug)
                    self.MDG2_mod.connect(riktoeclampMaxR_plug, riktoerangeOldMaxX_plug)
                    self.MDG2_mod.connect(riktoerangeoOutValX_plug, riktoemultInp1X_plug)
                    self.MDG2_mod.connect(riktoeclampInpR_plug, riktoemultInp2X_plug)
                    self.MDG2_mod.connect(riktoemultOtpX_plug, riktoeblendCol2R_plug)
                    self.MDG2_mod.commandToExecute('connectAttr -force RightToe_range.outValueX RightBall_minus.input1D[1]')
                    self.MDG2_mod.connect(iklegctrlToeRoll_plug, riktoeblendCol1R_plug)
                    self.MDG2_mod.connect(riktoeblendOtpR_plug, riktoeclampRotX_plug)
                    self.MDG2_mod.commandToExecute('setAttr "RightToe_range.minX" 0')
                    self.MDG2_mod.commandToExecute('setAttr "RightToe_range.maxX" 1')
                    self.MDG2_mod.commandToExecute('setAttr "RightToe_percetmultiply.operation" 1')

                    self.MDG2_mod.commandToExecute('addAttr -longName "common" -niceName "Common" -attributeType "enum" -en "__________:" -keyable true Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "tilt" -niceName "Tilt" -attributeType double -minValue -180 -maxValue 180 -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.doIt()

                    rikinnerlegtiltclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(rikinnerlegtiltclampnode, "RightInnerLegTilt_clamp")
                    rikouterlegtiltclampnode = self.MDG2_mod.createNode("clamp")
                    self.MDG2_mod.renameNode(rikouterlegtiltclampnode, "RightOuterLegTilt_clamp")
                    leg_reverse_sl_ls.add("RightReverseInnerFoot")
                    leg_reverse_sl_ls.add("RightReverseOuterFoot")
                    reverse_inner_obj = leg_reverse_sl_ls.getDependNode(3)
                    reverse_outer_obj = leg_reverse_sl_ls.getDependNode(4)

                    rikinnerclamp_fs = om2.MFnDependencyNode(rikinnerlegtiltclampnode)
                    rikouterclamp_fs = om2.MFnDependencyNode(rikouterlegtiltclampnode)
                    reverseinnerfoot_fs = om2.MFnDependencyNode(reverse_inner_obj)
                    reverseouterfoot_fs = om2.MFnDependencyNode(reverse_outer_obj)

                    iklegctrlTilt_plug = iklegctrl_fs.findPlug("tilt", False)
                    rikinnerclampInpB_plug = rikinnerclamp_fs.findPlug("inputB", False)
                    rikouterclampInpB_plug = rikouterclamp_fs.findPlug("inputB", False)
                    rikinnerclampOtpB_plug = rikinnerclamp_fs.findPlug("outputB", False)
                    rikinnerclampRotZ_plug = reverseinnerfoot_fs.findPlug("rotateZ", False)
                    rikouterclampOtpB_plug = rikouterclamp_fs.findPlug("outputB", False)
                    rikouterclampRotZ_plug = reverseouterfoot_fs.findPlug("rotateZ", False)

                    self.MDG2_mod.connect(iklegctrlTilt_plug, rikinnerclampInpB_plug)
                    self.MDG2_mod.connect(iklegctrlTilt_plug, rikouterclampInpB_plug)
                    self.MDG2_mod.connect(rikinnerclampOtpB_plug, rikinnerclampRotZ_plug)
                    self.MDG2_mod.connect(rikouterclampOtpB_plug, rikouterclampRotZ_plug)
                    self.MDG2_mod.commandToExecute('setAttr "RightInnerLegTilt_clamp.minB" -180')
                    self.MDG2_mod.commandToExecute('setAttr "RightOuterLegTilt_clamp.maxB" 180')

                    self.MDG2_mod.commandToExecute('addAttr -longName "lean" -niceName "Lean" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toespin" -niceName "Toe Spin" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.commandToExecute('addAttr -longName "toewiggle" -niceName "Toe Wiggle" -attributeType double -keyable true -defaultValue 0 Biped_IkRightFoot_ctrl')
                    self.MDG2_mod.doIt()

                    leg_reverse_sl_ls.add("RightReverseFootToeWiggle")
                    reverse_toewiggle_obj = leg_reverse_sl_ls.getDependNode(5)

                    reversetoewiggle_fs = om2.MFnDependencyNode(reverse_toewiggle_obj)

                    iklegctrlLean_plug = iklegctrl_fs.findPlug("lean", False)
                    rikballclampRotZ_plug = reversetoe_fs.findPlug("rotateZ", False)
                    iklegctrlToeSpin_plug = iklegctrl_fs.findPlug("toespin", False)
                    riktoeclampRotY_plug = reversetoeend_fs.findPlug("rotateY", False)
                    iklegctrlToeWiggle_plug = iklegctrl_fs.findPlug("toewiggle", False)
                    reversetoewiggleRotX_plug = reversetoewiggle_fs.findPlug("rotateX", False)

                    self.MDG2_mod.connect(iklegctrlLean_plug, rikballclampRotZ_plug)
                    self.MDG2_mod.connect(iklegctrlToeSpin_plug, riktoeclampRotY_plug)
                    self.MDG2_mod.connect(iklegctrlToeWiggle_plug, reversetoewiggleRotX_plug)
            else:
                self.MDG2_mod.commandToExecute('delete "Biped_IkRightFoot_null"')
                self.MDG2_mod.commandToExecute('delete "IkRightJointLeg_grp"')
                self.MDG2_mod.doIt()

            self.MDG2_mod.commandToExecute('delete "Draw*"')
            self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "DoNotTouch.visibility" 0')
            self.MDG2_mod.commandToExecute('select -hierarchy "DoNotTouch"; hide -clearSelection;')
            self.MDG2_mod.doIt()
        else:
            print("Nah! Nah! Couldn't rig the character. Please check if all asset exist.")

    def deleteRig(self):
        node_ls = om2.MSelectionList()
        if cmds.objExists("facialBlendShape"):
            node_ls.add("facialBlendShape")
        if cmds.objExists("tongueBlendShape"):
            node_ls.add("tongueBlendShape")
        if cmds.objExists("blendShapes*"):
            node_ls.add("blendShapes*")
        if cmds.objExists("Biped_jnt*"):
            node_ls.add("Biped_jnt*")
        if cmds.objExists("Biped_ctrl*"):
            node_ls.add("Biped_ctrl*")

        for index in range(node_ls.length()):
            node_str = node_ls.getSelectionStrings(index)
            if str(node_str)[3:-3] == "facialBlendShape":
                self.MDG2_mod.commandToExecute('delete "facialBlendShape"')
            elif str(node_str)[3:-3] == "tongueBlendShape":
                self.MDG2_mod.commandToExecute('delete "tongueBlendShape"')
            elif str(node_str)[3:14] == "blendShapes" or str(node_str)[3:12] == "Biped_jnt" or str(node_str)[3:13] == "Biped_ctrl":
                self.MDG2_mod.commandToExecute('delete "{0}"'.format(str(node_str)[3:-3]))
            else:
                print("Bla Bla....! No Rig Asset Exist.")
        self.MDG2_mod.doIt()

    def detachRig(self):
        mas_ls = om2.MSelectionList()
        mas_ls.add("Biped_Master_ctrl")

        obj_lst = om2.MSelectionList()
        obj_lst.add("boundingBox")
        box_obj = obj_lst.getDependNode(0)

        box_transform = om2.MFnTransform(box_obj)
        box_transform_s = self.box_transform.scale()

        ctrl_active_sl = om2.MGlobal.getActiveSelectionList()

        for index in range(ctrl_active_sl.length()):
            ctrl_active_obj = ctrl_active_sl.getDependNode(index)
            ctrl_active_string = ctrl_active_sl.getSelectionStrings(index)

            ctrl_detach_line = [om2.MPoint(0.00, 0.00), om2.MPoint(0.00, 0.00, 1.50), om2.MPoint(-0.50, 0.00, 1.50), om2.MPoint(0.50, 0.00, 1.50)]

            if str(ctrl_active_string)[9:11] == "Fk" and not str(ctrl_active_string)[9:11] == "Ik" and not str(ctrl_active_string)[-15:-8] == "Options" and not str(ctrl_active_string)[9:17] == "Stretchy" and not str(ctrl_active_string)[9:13] == "Root" and not str(ctrl_active_string)[9:15] == "Master" and not str(ctrl_active_string)[9:14] == "World" and not str(ctrl_active_string)[9:11] == "PV":
                detach_tn = self.MDag2_node.create("transform", "Biped_{0}Detach_ctrl".format(str(ctrl_active_string)[11:-8]), mas_ls.getDependNode(0))
                ctrl_detach_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_detach_line, 1, 1, False, True, True, detach_tn)

                detacctrl_transform = om2.MFnTransform(detach_tn)
                detacctrl_transform_s = detacctrl_transform.findPlug("scale", False)
                if detacctrl_transform_s.isCompound:
                   for i in range(detacctrl_transform_s.numChildren()):
                       child_plug = detacctrl_transform_s.child(i)
                       attr_value = child_plug.setDouble(box_transform_s[0]/8)

                self.MDG2_mod.renameNode(ctrl_detach_cv, "{0}Detach_shape".format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('color -rgbColor 1 0.5 0.2 "Biped_{0}Detach_ctrl"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_{0}Detach_ctrl"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateX"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateY"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateZ"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateX"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateY"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateZ"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleX"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleY"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleZ"'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('addAttr -longName "attachdetach" -niceName "Attach/Detach" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_{0}Detach_ctrl'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.doIt()

                detach_tr_n = om2.MFnDagNode(detach_tn)
                detach_tr_n.addChild(ctrl_active_obj)

                detach_multMatrix = self.MDG2_mod.createNode("multMatrix")
                self.MDG2_mod.renameNode(detach_multMatrix, "Detach{0}_multMatrix".format(str(ctrl_active_string)[11:-8]))
                detach_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                self.MDG2_mod.renameNode(detach_decomposeMatrix, "Detach{0}_decomposeMatrix".format(str(ctrl_active_string)[11:-8]))
                detachtransblendnode = self.MDG2_mod.createNode("blendColors")
                self.MDG2_mod.renameNode(detachtransblendnode, "Detach{0}Trans_blend".format(str(ctrl_active_string)[11:-8]))
                detachrotblendnode = self.MDG2_mod.createNode("blendColors")
                self.MDG2_mod.renameNode(detachrotblendnode, "Detach{0}Rot_blend".format(str(ctrl_active_string)[11:-8]))

                detachmultMatrix_fs = om2.MFnDependencyNode(detach_multMatrix)
                detachdecomposeMatrix_fs = om2.MFnDependencyNode(detach_decomposeMatrix)
                detachrotblendnode_fs = om2.MFnDependencyNode(detachrotblendnode)
                detachtransblendnode_fs = om2.MFnDependencyNode(detachtransblendnode)
                detachctrl_fs = om2.MFnDependencyNode(detach_tn)

                detachmultMatrixSum_plug = detachmultMatrix_fs.findPlug("matrixSum", False)
                detachInpMatrix_plug = detachdecomposeMatrix_fs.findPlug("inputMatrix", False)
                detachdecomposeOtpRot_plug = detachdecomposeMatrix_fs.findPlug("outputRotate", False)
                detachdecomposeOtpTrans_plug = detachdecomposeMatrix_fs.findPlug("outputTranslate", False)
                detachrotblendnodeinp2_plug = detachrotblendnode_fs.findPlug("color2", False)
                detachrotblendnodeotp_plug = detachrotblendnode_fs.findPlug("output", False)
                detachrotblendnodeblender_plug = detachrotblendnode_fs.findPlug("blender", False)
                detachtransblendnodeinp2_plug = detachtransblendnode_fs.findPlug("color2", False)
                detachtransblendnodeotp_plug = detachtransblendnode_fs.findPlug("output", False)
                detachtransblendnodeblender_plug = detachtransblendnode_fs.findPlug("blender", False)
                detachrot_plug = detachctrl_fs.findPlug("rotate", False)
                detachtrans_plug = detachctrl_fs.findPlug("translate", False)
                detachblend_plug = detachctrl_fs.findPlug("attachdetach", False)

                self.MDG2_mod.connect(detachblend_plug, detachrotblendnodeblender_plug)
                self.MDG2_mod.connect(detachblend_plug, detachtransblendnodeblender_plug)
                self.MDG2_mod.commandToExecute('connectAttr -force {0}_null.worldMatrix[0] Detach{1}_multMatrix.matrixIn[0]'.format(str(ctrl_active_string)[3:-8], str(ctrl_active_string)[11:-8]))                                
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.inverseMatrix Detach{0}_multMatrix.matrixIn[1]'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.parentInverseMatrix[0] Detach{0}_multMatrix.matrixIn[2]'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.connect(detachmultMatrixSum_plug, detachInpMatrix_plug)
                self.MDG2_mod.connect(detachdecomposeOtpTrans_plug, detachtransblendnodeinp2_plug)
                self.MDG2_mod.connect(detachdecomposeOtpRot_plug, detachrotblendnodeinp2_plug)
                self.MDG2_mod.connect(detachrotblendnodeotp_plug, detachrot_plug)
                self.MDG2_mod.connect(detachtransblendnodeotp_plug, detachtrans_plug)
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2R = `getAttr "Detach{0}Rot_blend.color2R"`; setAttr "Detach{0}Rot_blend.color1R" $detachrotblendnodecolor2R;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2G = `getAttr "Detach{0}Rot_blend.color2G"`; setAttr "Detach{0}Rot_blend.color1G" $detachrotblendnodecolor2G;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2B = `getAttr "Detach{0}Rot_blend.color2B"`; setAttr "Detach{0}Rot_blend.color1B" $detachrotblendnodecolor2B;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2R = `getAttr "Detach{0}Trans_blend.color2R"`; setAttr "Detach{0}Trans_blend.color1R" $detachtransblendnodecolor2R;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2G = `getAttr "Detach{0}Trans_blend.color2G"`; setAttr "Detach{0}Trans_blend.color1G" $detachtransblendnodecolor2G;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2B = `getAttr "Detach{0}Trans_blend.color2B"`; setAttr "Detach{0}Trans_blend.color1B" $detachtransblendnodecolor2B;'.format(str(ctrl_active_string)[11:-8]))
                self.MDG2_mod.doIt()

            elif not str(ctrl_active_string)[9:11] == "Fk" and not str(ctrl_active_string)[9:11] == "Ik" and not str(ctrl_active_string)[-15:-8] == "Options" and not str(ctrl_active_string)[9:17] == "Stretchy" and not str(ctrl_active_string)[9:13] == "Root" and not str(ctrl_active_string)[9:15] == "Master" and not str(ctrl_active_string)[9:14] == "World" and not str(ctrl_active_string)[9:11] == "PV":
                detach_tn = self.MDag2_node.create("transform", "Biped_{0}Detach_ctrl".format(str(ctrl_active_string)[9:-8]), mas_ls.getDependNode(0))
                ctrl_detach_cv = self.MNurbs2_cv.createWithEditPoints(ctrl_detach_line, 1, 1, False, True, True, detach_tn)

                detacctrl_transform = om2.MFnTransform(detach_tn)
                detacctrl_transform_s = detacctrl_transform.findPlug("scale", False)
                if detacctrl_transform_s.isCompound:
                   for i in range(detacctrl_transform_s.numChildren()):
                       child_plug = detacctrl_transform_s.child(i)
                       attr_value = child_plug.setDouble(box_transform_s[0]/8)

                self.MDG2_mod.renameNode(ctrl_detach_cv, "{0}Detach_shape".format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('color -rgbColor 1 0.5 0.2 "Biped_{0}Detach_ctrl"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 "Biped_{0}Detach_ctrl"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateX"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateY"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.translateZ"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateX"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateY"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.rotateZ"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleX"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleY"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('setAttr -lock true -keyable false -channelBox false "Biped_{0}Detach_ctrl.scaleZ"'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('addAttr -longName "attachdetach" -niceName "Attach/Detach" -attributeType double -minValue 0 -maxValue 1 -keyable true -defaultValue 0 Biped_{0}Detach_ctrl'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.doIt()

                detach_tr_n = om2.MFnDagNode(detach_tn)
                detach_tr_n.addChild(ctrl_active_obj)

                detach_multMatrix = self.MDG2_mod.createNode("multMatrix")
                self.MDG2_mod.renameNode(detach_multMatrix, "Detach{0}_multMatrix".format(str(ctrl_active_string)[9:-8]))
                detach_decomposeMatrix = self.MDG2_mod.createNode("decomposeMatrix")
                self.MDG2_mod.renameNode(detach_decomposeMatrix, "Detach{0}_decomposeMatrix".format(str(ctrl_active_string)[9:-8]))
                detachtransblendnode = self.MDG2_mod.createNode("blendColors")
                self.MDG2_mod.renameNode(detachtransblendnode, "Detach{0}Trans_blend".format(str(ctrl_active_string)[9:-8]))
                detachrotblendnode = self.MDG2_mod.createNode("blendColors")
                self.MDG2_mod.renameNode(detachrotblendnode, "Detach{0}Rot_blend".format(str(ctrl_active_string)[9:-8]))

                detachmultMatrix_fs = om2.MFnDependencyNode(detach_multMatrix)
                detachdecomposeMatrix_fs = om2.MFnDependencyNode(detach_decomposeMatrix)
                detachrotblendnode_fs = om2.MFnDependencyNode(detachrotblendnode)
                detachtransblendnode_fs = om2.MFnDependencyNode(detachtransblendnode)
                detachctrl_fs = om2.MFnDependencyNode(detach_tn)

                detachmultMatrixSum_plug = detachmultMatrix_fs.findPlug("matrixSum", False)
                detachInpMatrix_plug = detachdecomposeMatrix_fs.findPlug("inputMatrix", False)
                detachdecomposeOtpRot_plug = detachdecomposeMatrix_fs.findPlug("outputRotate", False)
                detachdecomposeOtpTrans_plug = detachdecomposeMatrix_fs.findPlug("outputTranslate", False)
                detachrotblendnodeinp2_plug = detachrotblendnode_fs.findPlug("color2", False)
                detachrotblendnodeotp_plug = detachrotblendnode_fs.findPlug("output", False)
                detachrotblendnodeblender_plug = detachrotblendnode_fs.findPlug("blender", False)
                detachtransblendnodeinp2_plug = detachtransblendnode_fs.findPlug("color2", False)
                detachtransblendnodeotp_plug = detachtransblendnode_fs.findPlug("output", False)
                detachtransblendnodeblender_plug = detachtransblendnode_fs.findPlug("blender", False)
                detachrot_plug = detachctrl_fs.findPlug("rotate", False)
                detachtrans_plug = detachctrl_fs.findPlug("translate", False)
                detachblend_plug = detachctrl_fs.findPlug("attachdetach", False)

                self.MDG2_mod.connect(detachblend_plug, detachrotblendnodeblender_plug)
                self.MDG2_mod.connect(detachblend_plug, detachtransblendnodeblender_plug)
                self.MDG2_mod.commandToExecute('connectAttr -force {0}_null.worldMatrix[0] Detach{1}_multMatrix.matrixIn[0]'.format(str(ctrl_active_string)[3:-8], str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.inverseMatrix Detach{0}_multMatrix.matrixIn[1]'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('connectAttr -force Biped_Master_ctrl.parentInverseMatrix[0] Detach{0}_multMatrix.matrixIn[2]'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.connect(detachmultMatrixSum_plug, detachInpMatrix_plug)
                self.MDG2_mod.connect(detachdecomposeOtpTrans_plug, detachtransblendnodeinp2_plug)
                self.MDG2_mod.connect(detachdecomposeOtpRot_plug, detachrotblendnodeinp2_plug)
                self.MDG2_mod.connect(detachrotblendnodeotp_plug, detachrot_plug)
                self.MDG2_mod.connect(detachtransblendnodeotp_plug, detachtrans_plug)
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2R = `getAttr "Detach{0}Rot_blend.color2R"`; setAttr "Detach{0}Rot_blend.color1R" $detachrotblendnodecolor2R;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2G = `getAttr "Detach{0}Rot_blend.color2G"`; setAttr "Detach{0}Rot_blend.color1G" $detachrotblendnodecolor2G;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('float $detachrotblendnodecolor2B = `getAttr "Detach{0}Rot_blend.color2B"`; setAttr "Detach{0}Rot_blend.color1B" $detachrotblendnodecolor2B;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2R = `getAttr "Detach{0}Trans_blend.color2R"`; setAttr "Detach{0}Trans_blend.color1R" $detachtransblendnodecolor2R;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2G = `getAttr "Detach{0}Trans_blend.color2G"`; setAttr "Detach{0}Trans_blend.color1G" $detachtransblendnodecolor2G;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.commandToExecute('float $detachtransblendnodecolor2B = `getAttr "Detach{0}Trans_blend.color2B"`; setAttr "Detach{0}Trans_blend.color1B" $detachtransblendnodecolor2B;'.format(str(ctrl_active_string)[9:-8]))
                self.MDG2_mod.doIt()
            else:
                print("Yo! You have selected inappropriate controller")
                
    def importAnim(self):
        pass

    def exportJointRig(self):
        pass

try:
    display_dailog.close()
    display_dailog.deleteLater()
except:
    pass

display_dailog = MainWindow()
display_dailog.show()
